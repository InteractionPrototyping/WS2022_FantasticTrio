import {
  $,
  dom7_esm_exports,
  getDocument,
  getWindow
} from "./chunk-GBD6V2I2.js";
import {
  __export
} from "./chunk-S6G64ZP5.js";

// node_modules/framework7/esm/shared/dom7.js
Object.keys(dom7_esm_exports).forEach(function(methodName) {
  if (methodName === "$")
    return;
  $.fn[methodName] = dom7_esm_exports[methodName];
});
var dom7_default = $;

// node_modules/framework7/esm/shared/utils.js
var utils_exports = {};
__export(utils_exports, {
  auroraPreloaderContent: () => auroraPreloaderContent,
  bindMethods: () => bindMethods,
  cancelAnimationFrame: () => cancelAnimationFrame,
  colorHexToRgb: () => colorHexToRgb,
  colorHsbToHsl: () => colorHsbToHsl,
  colorHslToHsb: () => colorHslToHsb,
  colorHslToRgb: () => colorHslToRgb,
  colorRgbToHex: () => colorRgbToHex,
  colorRgbToHsl: () => colorRgbToHsl,
  colorThemeCSSProperties: () => colorThemeCSSProperties,
  deleteProps: () => deleteProps,
  eventNameToColonCase: () => eventNameToColonCase,
  extend: () => extend,
  flattenArray: () => flattenArray,
  getTranslate: () => getTranslate,
  id: () => id,
  iosPreloaderContent: () => iosPreloaderContent,
  isObject: () => isObject,
  mdPreloaderContent: () => mdPreloaderContent,
  merge: () => merge,
  nextFrame: () => nextFrame,
  nextTick: () => nextTick,
  now: () => now,
  parseUrlQuery: () => parseUrlQuery,
  requestAnimationFrame: () => requestAnimationFrame,
  serializeObject: () => serializeObject,
  uniqueNumber: () => uniqueNumber
});
var uniqueNum = 0;
function uniqueNumber() {
  uniqueNum += 1;
  return uniqueNum;
}
function id(mask, map) {
  if (mask === void 0) {
    mask = "xxxxxxxxxx";
  }
  if (map === void 0) {
    map = "0123456789abcdef";
  }
  var length = map.length;
  return mask.replace(/x/g, function() {
    return map[Math.floor(Math.random() * length)];
  });
}
var mdPreloaderContent = '\n  <span class="preloader-inner">\n    <svg viewBox="0 0 36 36">\n      <circle cx="18" cy="18" r="16"></circle>\n    </svg>\n  </span>\n'.trim();
var iosPreloaderContent = ('\n  <span class="preloader-inner">\n    ' + [0, 1, 2, 3, 4, 5, 6, 7].map(function() {
  return '<span class="preloader-inner-line"></span>';
}).join("") + "\n  </span>\n").trim();
var auroraPreloaderContent = '\n  <span class="preloader-inner">\n    <span class="preloader-inner-circle"></span>\n  </span>\n';
function eventNameToColonCase(eventName) {
  var hasColon;
  return eventName.split("").map(function(char, index) {
    if (char.match(/[A-Z]/) && index !== 0 && !hasColon) {
      hasColon = true;
      return ":" + char.toLowerCase();
    }
    return char.toLowerCase();
  }).join("");
}
function deleteProps(obj) {
  var object = obj;
  Object.keys(object).forEach(function(key) {
    try {
      object[key] = null;
    } catch (e) {
    }
    try {
      delete object[key];
    } catch (e) {
    }
  });
}
function requestAnimationFrame(callback) {
  var window2 = getWindow();
  return window2.requestAnimationFrame(callback);
}
function cancelAnimationFrame(frameId) {
  var window2 = getWindow();
  return window2.cancelAnimationFrame(frameId);
}
function nextTick(callback, delay) {
  if (delay === void 0) {
    delay = 0;
  }
  return setTimeout(callback, delay);
}
function nextFrame(callback) {
  return requestAnimationFrame(function() {
    requestAnimationFrame(callback);
  });
}
function now() {
  return Date.now();
}
function parseUrlQuery(url) {
  var window2 = getWindow();
  var query = {};
  var urlToParse = url || window2.location.href;
  var i;
  var params;
  var param;
  var length;
  if (typeof urlToParse === "string" && urlToParse.length) {
    urlToParse = urlToParse.indexOf("?") > -1 ? urlToParse.replace(/\S*\?/, "") : "";
    params = urlToParse.split("&").filter(function(paramsPart) {
      return paramsPart !== "";
    });
    length = params.length;
    for (i = 0; i < length; i += 1) {
      param = params[i].replace(/#\S+/g, "").split("=");
      query[decodeURIComponent(param[0])] = typeof param[1] === "undefined" ? void 0 : decodeURIComponent(param.slice(1).join("=")) || "";
    }
  }
  return query;
}
function getTranslate(el, axis) {
  if (axis === void 0) {
    axis = "x";
  }
  var window2 = getWindow();
  var matrix;
  var curTransform;
  var transformMatrix;
  var curStyle = window2.getComputedStyle(el, null);
  if (window2.WebKitCSSMatrix) {
    curTransform = curStyle.transform || curStyle.webkitTransform;
    if (curTransform.split(",").length > 6) {
      curTransform = curTransform.split(", ").map(function(a) {
        return a.replace(",", ".");
      }).join(", ");
    }
    transformMatrix = new window2.WebKitCSSMatrix(curTransform === "none" ? "" : curTransform);
  } else {
    transformMatrix = curStyle.MozTransform || curStyle.OTransform || curStyle.MsTransform || curStyle.msTransform || curStyle.transform || curStyle.getPropertyValue("transform").replace("translate(", "matrix(1, 0, 0, 1,");
    matrix = transformMatrix.toString().split(",");
  }
  if (axis === "x") {
    if (window2.WebKitCSSMatrix)
      curTransform = transformMatrix.m41;
    else if (matrix.length === 16)
      curTransform = parseFloat(matrix[12]);
    else
      curTransform = parseFloat(matrix[4]);
  }
  if (axis === "y") {
    if (window2.WebKitCSSMatrix)
      curTransform = transformMatrix.m42;
    else if (matrix.length === 16)
      curTransform = parseFloat(matrix[13]);
    else
      curTransform = parseFloat(matrix[5]);
  }
  return curTransform || 0;
}
function serializeObject(obj, parents) {
  if (parents === void 0) {
    parents = [];
  }
  if (typeof obj === "string")
    return obj;
  var resultArray = [];
  var separator = "&";
  var newParents;
  function varName(name) {
    if (parents.length > 0) {
      var parentParts = "";
      for (var j = 0; j < parents.length; j += 1) {
        if (j === 0)
          parentParts += parents[j];
        else
          parentParts += "[" + encodeURIComponent(parents[j]) + "]";
      }
      return parentParts + "[" + encodeURIComponent(name) + "]";
    }
    return encodeURIComponent(name);
  }
  function varValue(value) {
    return encodeURIComponent(value);
  }
  Object.keys(obj).forEach(function(prop) {
    var toPush;
    if (Array.isArray(obj[prop])) {
      toPush = [];
      for (var i = 0; i < obj[prop].length; i += 1) {
        if (!Array.isArray(obj[prop][i]) && typeof obj[prop][i] === "object") {
          newParents = parents.slice();
          newParents.push(prop);
          newParents.push(String(i));
          toPush.push(serializeObject(obj[prop][i], newParents));
        } else {
          toPush.push(varName(prop) + "[]=" + varValue(obj[prop][i]));
        }
      }
      if (toPush.length > 0)
        resultArray.push(toPush.join(separator));
    } else if (obj[prop] === null || obj[prop] === "") {
      resultArray.push(varName(prop) + "=");
    } else if (typeof obj[prop] === "object") {
      newParents = parents.slice();
      newParents.push(prop);
      toPush = serializeObject(obj[prop], newParents);
      if (toPush !== "")
        resultArray.push(toPush);
    } else if (typeof obj[prop] !== "undefined" && obj[prop] !== "") {
      resultArray.push(varName(prop) + "=" + varValue(obj[prop]));
    } else if (obj[prop] === "")
      resultArray.push(varName(prop));
  });
  return resultArray.join(separator);
}
function isObject(o) {
  return typeof o === "object" && o !== null && o.constructor && o.constructor === Object;
}
function merge() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var to = args[0];
  args.splice(0, 1);
  var from = args;
  for (var i = 0; i < from.length; i += 1) {
    var nextSource = args[i];
    if (nextSource !== void 0 && nextSource !== null) {
      var keysArray = Object.keys(Object(nextSource));
      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        var nextKey = keysArray[nextIndex];
        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        if (desc !== void 0 && desc.enumerable) {
          to[nextKey] = nextSource[nextKey];
        }
      }
    }
  }
  return to;
}
function extend() {
  var deep = true;
  var to;
  var from;
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }
  if (typeof args[0] === "boolean") {
    deep = args[0];
    to = args[1];
    args.splice(0, 2);
    from = args;
  } else {
    to = args[0];
    args.splice(0, 1);
    from = args;
  }
  for (var i = 0; i < from.length; i += 1) {
    var nextSource = args[i];
    if (nextSource !== void 0 && nextSource !== null) {
      var keysArray = Object.keys(Object(nextSource));
      for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex += 1) {
        var nextKey = keysArray[nextIndex];
        var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
        if (desc !== void 0 && desc.enumerable) {
          if (!deep) {
            to[nextKey] = nextSource[nextKey];
          } else if (isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            extend(to[nextKey], nextSource[nextKey]);
          } else if (!isObject(to[nextKey]) && isObject(nextSource[nextKey])) {
            to[nextKey] = {};
            extend(to[nextKey], nextSource[nextKey]);
          } else {
            to[nextKey] = nextSource[nextKey];
          }
        }
      }
    }
  }
  return to;
}
function colorHexToRgb(hex) {
  var h = hex.replace(/^#?([a-f\d])([a-f\d])([a-f\d])$/i, function(m, r, g, b) {
    return r + r + g + g + b + b;
  });
  var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(h);
  return result ? result.slice(1).map(function(n) {
    return parseInt(n, 16);
  }) : null;
}
function colorRgbToHex(r, g, b) {
  var result = [r, g, b].map(function(n) {
    var hex = n.toString(16);
    return hex.length === 1 ? "0" + hex : hex;
  }).join("");
  return "#" + result;
}
function colorRgbToHsl(r, g, b) {
  r /= 255;
  g /= 255;
  b /= 255;
  var max = Math.max(r, g, b);
  var min = Math.min(r, g, b);
  var d = max - min;
  var h;
  if (d === 0)
    h = 0;
  else if (max === r)
    h = (g - b) / d % 6;
  else if (max === g)
    h = (b - r) / d + 2;
  else if (max === b)
    h = (r - g) / d + 4;
  var l = (min + max) / 2;
  var s = d === 0 ? 0 : d / (1 - Math.abs(2 * l - 1));
  if (h < 0)
    h = 360 / 60 + h;
  return [h * 60, s, l];
}
function colorHslToRgb(h, s, l) {
  var c = (1 - Math.abs(2 * l - 1)) * s;
  var hp = h / 60;
  var x = c * (1 - Math.abs(hp % 2 - 1));
  var rgb1;
  if (Number.isNaN(h) || typeof h === "undefined") {
    rgb1 = [0, 0, 0];
  } else if (hp <= 1)
    rgb1 = [c, x, 0];
  else if (hp <= 2)
    rgb1 = [x, c, 0];
  else if (hp <= 3)
    rgb1 = [0, c, x];
  else if (hp <= 4)
    rgb1 = [0, x, c];
  else if (hp <= 5)
    rgb1 = [x, 0, c];
  else if (hp <= 6)
    rgb1 = [c, 0, x];
  var m = l - c / 2;
  return rgb1.map(function(n) {
    return Math.max(0, Math.min(255, Math.round(255 * (n + m))));
  });
}
function colorHsbToHsl(h, s, b) {
  var HSL = {
    h,
    s: 0,
    l: 0
  };
  var HSB = {
    h,
    s,
    b
  };
  HSL.l = (2 - HSB.s) * HSB.b / 2;
  HSL.s = HSL.l && HSL.l < 1 ? HSB.s * HSB.b / (HSL.l < 0.5 ? HSL.l * 2 : 2 - HSL.l * 2) : HSL.s;
  return [HSL.h, HSL.s, HSL.l];
}
function colorHslToHsb(h, s, l) {
  var HSB = {
    h,
    s: 0,
    b: 0
  };
  var HSL = {
    h,
    s,
    l
  };
  var t = HSL.s * (HSL.l < 0.5 ? HSL.l : 1 - HSL.l);
  HSB.b = HSL.l + t;
  HSB.s = HSL.l > 0 ? 2 * t / HSB.b : HSB.s;
  return [HSB.h, HSB.s, HSB.b];
}
function colorThemeCSSProperties() {
  var hex;
  var rgb;
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }
  if (args.length === 1) {
    hex = args[0];
    rgb = colorHexToRgb(hex);
  } else if (args.length === 3) {
    rgb = args;
    hex = colorRgbToHex.apply(void 0, rgb);
  }
  if (!rgb)
    return {};
  var hsl = colorRgbToHsl.apply(void 0, rgb);
  var hslShade = [hsl[0], hsl[1], Math.max(0, hsl[2] - 0.08)];
  var hslTint = [hsl[0], hsl[1], Math.max(0, hsl[2] + 0.08)];
  var shade = colorRgbToHex.apply(void 0, colorHslToRgb.apply(void 0, hslShade));
  var tint = colorRgbToHex.apply(void 0, colorHslToRgb.apply(void 0, hslTint));
  return {
    "--f7-theme-color": hex,
    "--f7-theme-color-rgb": rgb.join(", "),
    "--f7-theme-color-shade": shade,
    "--f7-theme-color-tint": tint
  };
}
function bindMethods(instance, obj) {
  Object.keys(obj).forEach(function(key) {
    if (isObject(obj[key])) {
      Object.keys(obj[key]).forEach(function(subKey) {
        if (typeof obj[key][subKey] === "function") {
          obj[key][subKey] = obj[key][subKey].bind(instance);
        }
      });
    }
    instance[key] = obj[key];
  });
}
function flattenArray() {
  var arr = [];
  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }
  args.forEach(function(arg) {
    if (Array.isArray(arg))
      arr.push.apply(arr, flattenArray.apply(void 0, arg));
    else
      arr.push(arg);
  });
  return arr;
}

// node_modules/framework7/esm/shared/get-support.js
var support;
function calcSupport() {
  var window2 = getWindow();
  var document = getDocument();
  return {
    touch: !!("ontouchstart" in window2 || window2.DocumentTouch && document instanceof window2.DocumentTouch),
    pointerEvents: !!window2.PointerEvent && "maxTouchPoints" in window2.navigator && window2.navigator.maxTouchPoints >= 0,
    passiveListener: function checkPassiveListener() {
      var supportsPassive = false;
      try {
        var opts = Object.defineProperty({}, "passive", {
          get: function get2() {
            supportsPassive = true;
          }
        });
        window2.addEventListener("testPassiveListener", null, opts);
      } catch (e) {
      }
      return supportsPassive;
    }(),
    intersectionObserver: function checkObserver() {
      return "IntersectionObserver" in window2;
    }()
  };
}
function getSupport() {
  if (!support) {
    support = calcSupport();
  }
  return support;
}

// node_modules/framework7/esm/shared/get-device.js
var deviceCalculated;
function calcDevice(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, userAgent = _ref.userAgent;
  var support2 = getSupport();
  var window2 = getWindow();
  var platform = window2.navigator.platform;
  var ua = userAgent || window2.navigator.userAgent;
  var device = {
    ios: false,
    android: false,
    androidChrome: false,
    desktop: false,
    iphone: false,
    ipod: false,
    ipad: false,
    edge: false,
    ie: false,
    firefox: false,
    macos: false,
    windows: false,
    cordova: !!(window2.cordova || window2.phonegap),
    phonegap: !!(window2.cordova || window2.phonegap),
    electron: false,
    capacitor: !!window2.Capacitor,
    nwjs: false
  };
  var screenWidth = window2.screen.width;
  var screenHeight = window2.screen.height;
  var android = ua.match(/(Android);?[\s\/]+([\d.]+)?/);
  var ipad = ua.match(/(iPad).*OS\s([\d_]+)/);
  var ipod = ua.match(/(iPod)(.*OS\s([\d_]+))?/);
  var iphone = !ipad && ua.match(/(iPhone\sOS|iOS|iPhone;\sCPU\sOS)\s([\d_]+)/);
  var ie = ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
  var edge = ua.indexOf("Edge/") >= 0;
  var firefox = ua.indexOf("Gecko/") >= 0 && ua.indexOf("Firefox/") >= 0;
  var windows = platform === "Win32";
  var electron = ua.toLowerCase().indexOf("electron") >= 0;
  var nwjs = typeof nw !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && typeof process.versions.nw !== "undefined";
  var macos = platform === "MacIntel";
  var iPadScreens = ["1024x1366", "1366x1024", "834x1194", "1194x834", "834x1112", "1112x834", "768x1024", "1024x768", "820x1180", "1180x820", "810x1080", "1080x810"];
  if (!ipad && macos && support2.touch && iPadScreens.indexOf(screenWidth + "x" + screenHeight) >= 0) {
    ipad = ua.match(/(Version)\/([\d.]+)/);
    if (!ipad)
      ipad = [0, 1, "13_0_0"];
    macos = false;
  }
  device.ie = ie;
  device.edge = edge;
  device.firefox = firefox;
  if (android) {
    device.os = "android";
    device.osVersion = android[2];
    device.android = true;
    device.androidChrome = ua.toLowerCase().indexOf("chrome") >= 0;
  }
  if (ipad || iphone || ipod) {
    device.os = "ios";
    device.ios = true;
  }
  if (iphone && !ipod) {
    device.osVersion = iphone[2].replace(/_/g, ".");
    device.iphone = true;
  }
  if (ipad) {
    device.osVersion = ipad[2].replace(/_/g, ".");
    device.ipad = true;
  }
  if (ipod) {
    device.osVersion = ipod[3] ? ipod[3].replace(/_/g, ".") : null;
    device.ipod = true;
  }
  if (device.ios && device.osVersion && ua.indexOf("Version/") >= 0) {
    if (device.osVersion.split(".")[0] === "10") {
      device.osVersion = ua.toLowerCase().split("version/")[1].split(" ")[0];
    }
  }
  device.webView = !!((iphone || ipad || ipod) && (ua.match(/.*AppleWebKit(?!.*Safari)/i) || window2.navigator.standalone)) || window2.matchMedia && window2.matchMedia("(display-mode: standalone)").matches;
  device.webview = device.webView;
  device.standalone = device.webView;
  device.desktop = !(device.ios || device.android) || electron || nwjs;
  if (device.desktop) {
    device.electron = electron;
    device.nwjs = nwjs;
    device.macos = macos;
    device.windows = windows;
    if (device.macos) {
      device.os = "macos";
    }
    if (device.windows) {
      device.os = "windows";
    }
  }
  device.pixelRatio = window2.devicePixelRatio || 1;
  var DARK = "(prefers-color-scheme: dark)";
  var LIGHT = "(prefers-color-scheme: light)";
  device.prefersColorScheme = function prefersColorTheme() {
    var theme;
    if (window2.matchMedia && window2.matchMedia(LIGHT).matches) {
      theme = "light";
    }
    if (window2.matchMedia && window2.matchMedia(DARK).matches) {
      theme = "dark";
    }
    return theme;
  };
  return device;
}
function getDevice(overrides, reset) {
  if (overrides === void 0) {
    overrides = {};
  }
  if (!deviceCalculated || reset) {
    deviceCalculated = calcDevice(overrides);
  }
  return deviceCalculated;
}

// node_modules/framework7/esm/shared/request.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf(subClass, superClass);
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
  if (_isNativeReflectConstruct()) {
    _construct = Reflect.construct;
  } else {
    _construct = function _construct4(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _isNativeFunction(fn) {
  return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
var globals = {};
var jsonpRequests = 0;
var RequestResponse = function RequestResponse2(obj) {
  Object.assign(this, obj);
};
var RequestError = function(_Error) {
  _inheritsLoose(RequestError2, _Error);
  function RequestError2(obj) {
    var _this;
    _this = _Error.call(this) || this;
    Object.assign(_assertThisInitialized(_this), obj);
    return _this;
  }
  return RequestError2;
}(_wrapNativeSuper(Error));
var request = function request2(requestOptions) {
  return new Promise(function(resolve, reject) {
    var window2 = getWindow();
    var document = getDocument();
    var globalsNoCallbacks = extend({}, globals);
    "beforeCreate beforeOpen beforeSend error complete success statusCode".split(" ").forEach(function(callbackName2) {
      delete globalsNoCallbacks[callbackName2];
    });
    var defaults = extend({
      url: window2.location.toString(),
      method: "GET",
      data: false,
      async: true,
      cache: true,
      user: "",
      password: "",
      headers: {},
      xhrFields: {},
      statusCode: {},
      processData: true,
      dataType: "text",
      contentType: "application/x-www-form-urlencoded",
      timeout: 0
    }, globalsNoCallbacks);
    var proceedRequest;
    var options = extend({}, defaults, requestOptions);
    if (requestOptions.abortController) {
      options.abortController = requestOptions.abortController;
    }
    if (options.abortController && options.abortController.canceled) {
      reject(new RequestError({
        options,
        status: "canceled",
        message: "canceled"
      }));
      return;
    }
    function fireCallback(callbackName2) {
      var globalCallbackValue;
      var optionCallbackValue;
      for (var _len = arguments.length, data2 = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        data2[_key - 1] = arguments[_key];
      }
      if (globals[callbackName2]) {
        globalCallbackValue = globals[callbackName2].apply(globals, data2);
      }
      if (options[callbackName2]) {
        optionCallbackValue = options[callbackName2].apply(options, data2);
      }
      if (typeof globalCallbackValue !== "boolean")
        globalCallbackValue = true;
      if (typeof optionCallbackValue !== "boolean")
        optionCallbackValue = true;
      if (options.abortController && options.abortController.canceled && (callbackName2 === "beforeCreate" || callbackName2 === "beforeOpen" || callbackName2 === "beforeSend")) {
        return false;
      }
      return globalCallbackValue && optionCallbackValue;
    }
    proceedRequest = fireCallback("beforeCreate", options);
    if (proceedRequest === false) {
      reject(new RequestError({
        options,
        status: "canceled",
        message: "canceled"
      }));
      return;
    }
    if (options.type)
      options.method = options.type;
    var paramsPrefix = options.url.indexOf("?") >= 0 ? "&" : "?";
    var method = options.method.toUpperCase();
    if ((method === "GET" || method === "HEAD" || method === "OPTIONS" || method === "DELETE") && options.data) {
      var stringData;
      if (typeof options.data === "string") {
        if (options.data.indexOf("?") >= 0)
          stringData = options.data.split("?")[1];
        else
          stringData = options.data;
      } else {
        stringData = serializeObject(options.data);
      }
      if (stringData.length) {
        options.url += paramsPrefix + stringData;
        if (paramsPrefix === "?")
          paramsPrefix = "&";
      }
    }
    if (options.dataType === "json" && options.url.indexOf("callback=") >= 0) {
      var callbackName = "f7jsonp_" + (Date.now() + (jsonpRequests += 1));
      var abortTimeout;
      var callbackSplit = options.url.split("callback=");
      var requestUrl = callbackSplit[0] + "callback=" + callbackName;
      if (callbackSplit[1].indexOf("&") >= 0) {
        var addVars = callbackSplit[1].split("&").filter(function(el) {
          return el.indexOf("=") > 0;
        }).join("&");
        if (addVars.length > 0)
          requestUrl += "&" + addVars;
      }
      var script = document.createElement("script");
      script.type = "text/javascript";
      script.onerror = function onerror() {
        clearTimeout(abortTimeout);
        fireCallback("error", null, "scripterror", "scripterror");
        reject(new RequestError({
          options,
          status: "scripterror",
          message: "scripterror"
        }));
        fireCallback("complete", null, "scripterror");
      };
      script.src = requestUrl;
      window2[callbackName] = function jsonpCallback(data2) {
        clearTimeout(abortTimeout);
        fireCallback("success", data2);
        script.parentNode.removeChild(script);
        script = null;
        delete window2[callbackName];
        resolve(new RequestResponse({
          options,
          data: data2
        }));
      };
      document.querySelector("head").appendChild(script);
      if (options.timeout > 0) {
        abortTimeout = setTimeout(function() {
          script.parentNode.removeChild(script);
          script = null;
          fireCallback("error", null, "timeout", "timeout");
          reject(new RequestError({
            options,
            status: "timeout",
            message: "timeout"
          }));
        }, options.timeout);
      }
      return;
    }
    if (method === "GET" || method === "HEAD" || method === "OPTIONS" || method === "DELETE") {
      if (options.cache === false) {
        options.url += paramsPrefix + "_nocache" + Date.now();
      }
    }
    var xhr = new XMLHttpRequest();
    if (options.abortController) {
      var aborted = false;
      options.abortController.onAbort = function() {
        if (aborted)
          return;
        aborted = true;
        xhr.abort();
        reject(new RequestError({
          options,
          xhr,
          status: "canceled",
          message: "canceled"
        }));
      };
    }
    xhr.requestUrl = options.url;
    xhr.requestParameters = options;
    proceedRequest = fireCallback("beforeOpen", xhr, options);
    if (proceedRequest === false) {
      reject(new RequestError({
        options,
        xhr,
        status: "canceled",
        message: "canceled"
      }));
      return;
    }
    xhr.open(method, options.url, options.async, options.user, options.password);
    var postData = null;
    if ((method === "POST" || method === "PUT" || method === "PATCH") && options.data) {
      if (options.processData) {
        var postDataInstances = [ArrayBuffer, Blob, Document, FormData];
        if (postDataInstances.indexOf(options.data.constructor) >= 0) {
          postData = options.data;
        } else {
          var boundary = "---------------------------" + Date.now().toString(16);
          if (options.contentType === "multipart/form-data") {
            xhr.setRequestHeader("Content-Type", "multipart/form-data; boundary=" + boundary);
          } else {
            xhr.setRequestHeader("Content-Type", options.contentType);
          }
          postData = "";
          var data = serializeObject(options.data);
          if (options.contentType === "multipart/form-data") {
            data = data.split("&");
            var newData = [];
            for (var i = 0; i < data.length; i += 1) {
              newData.push('Content-Disposition: form-data; name="' + data[i].split("=")[0] + '"\r\n\r\n' + data[i].split("=")[1] + "\r\n");
            }
            postData = "--" + boundary + "\r\n" + newData.join("--" + boundary + "\r\n") + "--" + boundary + "--\r\n";
          } else if (options.contentType === "application/json") {
            postData = JSON.stringify(options.data);
          } else {
            postData = data;
          }
        }
      } else {
        postData = options.data;
        xhr.setRequestHeader("Content-Type", options.contentType);
      }
    }
    if (options.dataType === "json" && (!options.headers || !options.headers.Accept)) {
      xhr.setRequestHeader("Accept", "application/json");
    }
    if (options.headers) {
      Object.keys(options.headers).forEach(function(headerName) {
        if (typeof options.headers[headerName] === "undefined")
          return;
        xhr.setRequestHeader(headerName, options.headers[headerName]);
      });
    }
    if (typeof options.crossDomain === "undefined") {
      options.crossDomain = /^([\w-]+:)?\/\/([^\/]+)/.test(options.url) && RegExp.$2 !== window2.location.host;
    }
    if (!options.crossDomain) {
      xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    }
    if (options.xhrFields) {
      extend(xhr, options.xhrFields);
    }
    xhr.onload = function onload() {
      if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 0) {
        var responseData;
        if (options.dataType === "json") {
          var parseError;
          try {
            responseData = JSON.parse(xhr.responseText);
          } catch (err) {
            parseError = true;
          }
          if (!parseError) {
            fireCallback("success", responseData, xhr.status, xhr);
            resolve(new RequestResponse({
              options,
              data: responseData,
              status: xhr.status,
              xhr
            }));
          } else {
            fireCallback("error", xhr, "parseerror", "parseerror");
            reject(new RequestError({
              options,
              xhr,
              status: "parseerror",
              message: "parseerror"
            }));
          }
        } else {
          responseData = xhr.responseType === "text" || xhr.responseType === "" ? xhr.responseText : xhr.response;
          fireCallback("success", responseData, xhr.status, xhr);
          resolve(new RequestResponse({
            options,
            data: responseData,
            status: xhr.status,
            xhr
          }));
        }
      } else {
        fireCallback("error", xhr, xhr.status, xhr.statusText);
        reject(new RequestError({
          options,
          xhr,
          status: xhr.status,
          message: xhr.statusText
        }));
      }
      if (options.statusCode) {
        if (globals.statusCode && globals.statusCode[xhr.status])
          globals.statusCode[xhr.status](xhr);
        if (options.statusCode[xhr.status])
          options.statusCode[xhr.status](xhr);
      }
      fireCallback("complete", xhr, xhr.status);
    };
    xhr.onerror = function onerror() {
      fireCallback("error", xhr, xhr.status, xhr.status);
      reject(new RequestError({
        options,
        xhr,
        status: xhr.status,
        message: xhr.statusText
      }));
      fireCallback("complete", xhr, "error");
    };
    if (options.timeout > 0) {
      xhr.timeout = options.timeout;
      xhr.ontimeout = function() {
        fireCallback("error", xhr, "timeout", "timeout");
        reject(new RequestError({
          options,
          xhr,
          status: "timeout",
          message: "timeout"
        }));
        fireCallback("complete", xhr, "timeout");
      };
    }
    proceedRequest = fireCallback("beforeSend", xhr, options);
    if (proceedRequest === false) {
      reject(new RequestError({
        options,
        xhr,
        status: "canceled",
        message: "canceled"
      }));
      return;
    }
    xhr.send(postData);
  });
};
function requestShortcut(method) {
  var _ref = [], url = _ref[0], data = _ref[1], success = _ref[2], error = _ref[3], dataType = _ref[4];
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }
  if (typeof args[1] === "function") {
    url = args[0];
    success = args[1];
    error = args[2];
    dataType = args[3];
  } else {
    url = args[0];
    data = args[1];
    success = args[2];
    error = args[3];
    dataType = args[4];
  }
  [success, error].forEach(function(callback) {
    if (typeof callback === "string") {
      dataType = callback;
      if (callback === success)
        success = void 0;
      else
        error = void 0;
    }
  });
  dataType = dataType || (method === "json" || method === "postJSON" ? "json" : void 0);
  var requestOptions = {
    url,
    method: method === "post" || method === "postJSON" ? "POST" : "GET",
    data,
    success,
    error,
    dataType
  };
  if (method === "postJSON") {
    extend(requestOptions, {
      contentType: "application/json",
      processData: false,
      crossDomain: true,
      data: typeof data === "string" ? data : JSON.stringify(data)
    });
  }
  return request(requestOptions);
}
Object.assign(request, {
  get: function get() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    return requestShortcut.apply(void 0, ["get"].concat(args));
  },
  post: function post() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    return requestShortcut.apply(void 0, ["post"].concat(args));
  },
  json: function json() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    return requestShortcut.apply(void 0, ["json"].concat(args));
  },
  getJSON: function getJSON() {
    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }
    return requestShortcut.apply(void 0, ["json"].concat(args));
  },
  postJSON: function postJSON() {
    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }
    return requestShortcut.apply(void 0, ["postJSON"].concat(args));
  }
});
request.abortController = function() {
  var contoller = {
    canceled: false,
    onAbort: null,
    abort: function abort() {
      contoller.canceled = true;
      if (contoller.onAbort)
        contoller.onAbort();
    }
  };
  return contoller;
};
request.setup = function setup(options) {
  if (options.type && !options.method) {
    extend(options, {
      method: options.type
    });
  }
  extend(globals, options);
};
var request_default = request;

// node_modules/framework7/esm/modules/store/create-store.js
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function createStore(storeParams) {
  if (storeParams === void 0) {
    storeParams = {};
  }
  var store = {
    __store: true
  };
  var originalState = _extends({}, storeParams.state || {});
  var actions = _extends({}, storeParams.actions || {});
  var getters = _extends({}, storeParams.getters || {});
  var state = extend({}, originalState);
  var propsQueue = [];
  var gettersDependencies = {};
  var gettersCallbacks = {};
  Object.keys(getters).forEach(function(getterKey) {
    gettersDependencies[getterKey] = [];
    gettersCallbacks[getterKey] = [];
  });
  var getGetterValue = function getGetterValue2(getterKey) {
    return getters[getterKey]({
      state: store.state
    });
  };
  var addGetterDependencies = function addGetterDependencies2(getterKey, deps) {
    if (!gettersDependencies[getterKey])
      gettersDependencies[getterKey] = [];
    deps.forEach(function(dep) {
      if (gettersDependencies[getterKey].indexOf(dep) < 0) {
        gettersDependencies[getterKey].push(dep);
      }
    });
  };
  var addGetterCallback = function addGetterCallback2(getterKey, callback) {
    if (!gettersCallbacks[getterKey])
      gettersCallbacks[getterKey] = [];
    gettersCallbacks[getterKey].push(callback);
  };
  var runGetterCallbacks = function runGetterCallbacks2(stateKey) {
    var keys = Object.keys(gettersDependencies).filter(function(getterKey) {
      return gettersDependencies[getterKey].indexOf(stateKey) >= 0;
    });
    keys.forEach(function(getterKey) {
      if (!gettersCallbacks[getterKey] || !gettersCallbacks[getterKey].length)
        return;
      gettersCallbacks[getterKey].forEach(function(callback) {
        callback(getGetterValue(getterKey));
      });
    });
  };
  var removeGetterCallback = function removeGetterCallback2(callback) {
    Object.keys(gettersCallbacks).forEach(function(stateKey) {
      var callbacks = gettersCallbacks[stateKey];
      if (callbacks.indexOf(callback) >= 0) {
        callbacks.splice(callbacks.indexOf(callback), 1);
      }
    });
  };
  store.__removeCallback = function(callback) {
    removeGetterCallback(callback);
  };
  var getterValue = function getterValue2(getterKey, addCallback) {
    if (addCallback === void 0) {
      addCallback = true;
    }
    if (getterKey === "constructor")
      return void 0;
    propsQueue = [];
    var value = getGetterValue(getterKey);
    addGetterDependencies(getterKey, propsQueue);
    var onUpdated = function onUpdated2(callback2) {
      addGetterCallback(getterKey, callback2);
    };
    var obj = {
      value,
      onUpdated
    };
    if (!addCallback) {
      return obj;
    }
    var callback = function callback2(v) {
      obj.value = v;
    };
    obj.__callback = callback;
    addGetterCallback(getterKey, callback);
    return obj;
  };
  store.state = new Proxy(state, {
    set: function set(target, prop, value) {
      target[prop] = value;
      runGetterCallbacks(prop);
      return true;
    },
    get: function get2(target, prop) {
      propsQueue.push(prop);
      return target[prop];
    }
  });
  store.getters = new Proxy(getters, {
    set: function set() {
      return false;
    },
    get: function get2(target, prop) {
      if (!target[prop]) {
        return void 0;
      }
      return getterValue(prop, true);
    }
  });
  store._gettersPlain = new Proxy(getters, {
    set: function set() {
      return false;
    },
    get: function get2(target, prop) {
      if (!target[prop]) {
        return void 0;
      }
      return getterValue(prop, false);
    }
  });
  store.dispatch = function(actionName, data) {
    return new Promise(function(resolve, reject) {
      if (!actions[actionName]) {
        reject();
        throw new Error('Framework7: Store action "' + actionName + '" is not found');
      }
      var result = actions[actionName]({
        state: store.state,
        dispatch: store.dispatch
      }, data);
      resolve(result);
    });
  };
  return store;
}
var create_store_default = createStore;

// node_modules/framework7/esm/modules/store/store.js
var store_default = {
  name: "store",
  static: {
    createStore: create_store_default
  },
  proto: {
    createStore: create_store_default
  }
};

// node_modules/framework7/esm/shared/events-class.js
var EventsClass = function() {
  function EventsClass2(parents) {
    if (parents === void 0) {
      parents = [];
    }
    var self = this;
    self.eventsParents = parents;
    self.eventsListeners = {};
  }
  var _proto = EventsClass2.prototype;
  _proto.on = function on(events, handler, priority) {
    var self = this;
    if (typeof handler !== "function")
      return self;
    var method = priority ? "unshift" : "push";
    events.split(" ").forEach(function(event) {
      if (!self.eventsListeners[event])
        self.eventsListeners[event] = [];
      self.eventsListeners[event][method](handler);
    });
    return self;
  };
  _proto.once = function once(events, handler, priority) {
    var self = this;
    if (typeof handler !== "function")
      return self;
    function onceHandler() {
      self.off(events, onceHandler);
      if (onceHandler.f7proxy) {
        delete onceHandler.f7proxy;
      }
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      handler.apply(self, args);
    }
    onceHandler.f7proxy = handler;
    return self.on(events, onceHandler, priority);
  };
  _proto.off = function off(events, handler) {
    var self = this;
    if (!self.eventsListeners)
      return self;
    events.split(" ").forEach(function(event) {
      if (typeof handler === "undefined") {
        self.eventsListeners[event] = [];
      } else if (self.eventsListeners[event]) {
        self.eventsListeners[event].forEach(function(eventHandler, index) {
          if (eventHandler === handler || eventHandler.f7proxy && eventHandler.f7proxy === handler) {
            self.eventsListeners[event].splice(index, 1);
          }
        });
      }
    });
    return self;
  };
  _proto.emit = function emit() {
    var self = this;
    if (!self.eventsListeners)
      return self;
    var events;
    var data;
    var context;
    var eventsParents;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    if (typeof args[0] === "string" || Array.isArray(args[0])) {
      events = args[0];
      data = args.slice(1, args.length);
      context = self;
      eventsParents = self.eventsParents;
    } else {
      events = args[0].events;
      data = args[0].data;
      context = args[0].context || self;
      eventsParents = args[0].local ? [] : args[0].parents || self.eventsParents;
    }
    var eventsArray = Array.isArray(events) ? events : events.split(" ");
    var localEvents = eventsArray.map(function(eventName) {
      return eventName.replace("local::", "");
    });
    var parentEvents = eventsArray.filter(function(eventName) {
      return eventName.indexOf("local::") < 0;
    });
    localEvents.forEach(function(event) {
      if (self.eventsListeners && self.eventsListeners[event]) {
        var handlers = [];
        self.eventsListeners[event].forEach(function(eventHandler) {
          handlers.push(eventHandler);
        });
        handlers.forEach(function(eventHandler) {
          eventHandler.apply(context, data);
        });
      }
    });
    if (eventsParents && eventsParents.length > 0) {
      eventsParents.forEach(function(eventsParent) {
        eventsParent.emit.apply(eventsParent, [parentEvents].concat(data));
      });
    }
    return self;
  };
  return EventsClass2;
}();
var events_class_default = EventsClass;

// node_modules/framework7/esm/shared/class.js
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  return Constructor;
}
function _assertThisInitialized2(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose2(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf2(subClass, superClass);
}
function _setPrototypeOf2(o, p) {
  _setPrototypeOf2 = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf2(o, p);
}
var Framework7Class = function(_EventsClass) {
  _inheritsLoose2(Framework7Class2, _EventsClass);
  function Framework7Class2(params, parents) {
    var _this;
    if (params === void 0) {
      params = {};
    }
    if (parents === void 0) {
      parents = [];
    }
    _this = _EventsClass.call(this, parents) || this;
    var self = _assertThisInitialized2(_this);
    self.params = params;
    if (self.params && self.params.on) {
      Object.keys(self.params.on).forEach(function(eventName) {
        self.on(eventName, self.params.on[eventName]);
      });
    }
    return _this;
  }
  var _proto = Framework7Class2.prototype;
  _proto.useModuleParams = function useModuleParams(module, instanceParams) {
    if (module.params) {
      var originalParams = {};
      Object.keys(module.params).forEach(function(paramKey) {
        if (typeof instanceParams[paramKey] === "undefined")
          return;
        originalParams[paramKey] = extend({}, instanceParams[paramKey]);
      });
      extend(instanceParams, module.params);
      Object.keys(originalParams).forEach(function(paramKey) {
        extend(instanceParams[paramKey], originalParams[paramKey]);
      });
    }
  };
  _proto.useModulesParams = function useModulesParams(instanceParams) {
    var instance = this;
    if (!instance.modules)
      return;
    Object.keys(instance.modules).forEach(function(moduleName) {
      var module = instance.modules[moduleName];
      if (module.params) {
        extend(instanceParams, module.params);
      }
    });
  };
  _proto.useModule = function useModule(moduleName, moduleParams) {
    if (moduleName === void 0) {
      moduleName = "";
    }
    if (moduleParams === void 0) {
      moduleParams = {};
    }
    var instance = this;
    if (!instance.modules)
      return;
    var module = typeof moduleName === "string" ? instance.modules[moduleName] : moduleName;
    if (!module)
      return;
    if (module.instance) {
      Object.keys(module.instance).forEach(function(modulePropName) {
        var moduleProp = module.instance[modulePropName];
        if (typeof moduleProp === "function") {
          instance[modulePropName] = moduleProp.bind(instance);
        } else {
          instance[modulePropName] = moduleProp;
        }
      });
    }
    if (module.on && instance.on) {
      Object.keys(module.on).forEach(function(moduleEventName) {
        instance.on(moduleEventName, module.on[moduleEventName]);
      });
    }
    if (module.vnode) {
      if (!instance.vnodeHooks)
        instance.vnodeHooks = {};
      Object.keys(module.vnode).forEach(function(vnodeId) {
        Object.keys(module.vnode[vnodeId]).forEach(function(hookName) {
          var handler = module.vnode[vnodeId][hookName];
          if (!instance.vnodeHooks[hookName])
            instance.vnodeHooks[hookName] = {};
          if (!instance.vnodeHooks[hookName][vnodeId])
            instance.vnodeHooks[hookName][vnodeId] = [];
          instance.vnodeHooks[hookName][vnodeId].push(handler.bind(instance));
        });
      });
    }
    if (module.create) {
      module.create.bind(instance)(moduleParams);
    }
  };
  _proto.useModules = function useModules(modulesParams) {
    if (modulesParams === void 0) {
      modulesParams = {};
    }
    var instance = this;
    if (!instance.modules)
      return;
    Object.keys(instance.modules).forEach(function(moduleName) {
      var moduleParams = modulesParams[moduleName] || {};
      instance.useModule(moduleName, moduleParams);
    });
  };
  Framework7Class2.installModule = function installModule(module) {
    var Class = this;
    if (!Class.prototype.modules)
      Class.prototype.modules = {};
    var name = module.name || Object.keys(Class.prototype.modules).length + "_" + now();
    Class.prototype.modules[name] = module;
    if (module.proto) {
      Object.keys(module.proto).forEach(function(key) {
        Class.prototype[key] = module.proto[key];
      });
    }
    if (module.static) {
      Object.keys(module.static).forEach(function(key) {
        Class[key] = module.static[key];
      });
    }
    if (module.install) {
      for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        params[_key - 1] = arguments[_key];
      }
      module.install.apply(Class, params);
    }
    return Class;
  };
  Framework7Class2.use = function use(module) {
    var Class = this;
    if (Array.isArray(module)) {
      module.forEach(function(m) {
        return Class.installModule(m);
      });
      return Class;
    }
    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      params[_key2 - 1] = arguments[_key2];
    }
    return Class.installModule.apply(Class, [module].concat(params));
  };
  _createClass(Framework7Class2, null, [{
    key: "components",
    set: function set(components) {
      var Class = this;
      if (!Class.use)
        return;
      Class.use(components);
    }
  }]);
  return Framework7Class2;
}(events_class_default);
var class_default = Framework7Class;

// node_modules/framework7/esm/shared/constructor-methods.js
function _construct2(Parent, args, Class) {
  if (_isNativeReflectConstruct2()) {
    _construct2 = Reflect.construct;
  } else {
    _construct2 = function _construct4(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf3(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct2.apply(null, arguments);
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _setPrototypeOf3(o, p) {
  _setPrototypeOf3 = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf3(o, p);
}
function ConstructorMethods(parameters) {
  if (parameters === void 0) {
    parameters = {};
  }
  var _parameters = parameters, defaultSelector = _parameters.defaultSelector, Constructor = _parameters.constructor, domProp = _parameters.domProp, app = _parameters.app, addMethods = _parameters.addMethods;
  var methods = {
    create: function create11() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (app)
        return _construct2(Constructor, [app].concat(args));
      return _construct2(Constructor, args);
    },
    get: function get2(el) {
      if (el === void 0) {
        el = defaultSelector;
      }
      if (el instanceof Constructor)
        return el;
      var $el = dom7_default(el);
      if ($el.length === 0)
        return void 0;
      return $el[0][domProp];
    },
    destroy: function destroy2(el) {
      var instance = methods.get(el);
      if (instance && instance.destroy)
        return instance.destroy();
      return void 0;
    }
  };
  if (addMethods && Array.isArray(addMethods)) {
    addMethods.forEach(function(methodName) {
      methods[methodName] = function(el) {
        if (el === void 0) {
          el = defaultSelector;
        }
        var instance = methods.get(el);
        for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
          args[_key2 - 1] = arguments[_key2];
        }
        if (instance && instance[methodName])
          return instance[methodName].apply(instance, args);
        return void 0;
      };
    });
  }
  return methods;
}

// node_modules/framework7/esm/shared/modal-methods.js
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function ModalMethods(parameters) {
  if (parameters === void 0) {
    parameters = {};
  }
  var _parameters = parameters, defaultSelector = _parameters.defaultSelector, Constructor = _parameters.constructor, app = _parameters.app;
  var methods = extend(ConstructorMethods({
    defaultSelector,
    constructor: Constructor,
    app,
    domProp: "f7Modal"
  }), {
    open: function open(el, animate, targetEl) {
      var $el = dom7_default(el);
      if ($el.length > 1 && targetEl) {
        var $targetPage = dom7_default(targetEl).parents(".page");
        if ($targetPage.length) {
          $el.each(function(modalEl) {
            var $modalEl = dom7_default(modalEl);
            if ($modalEl.parents($targetPage)[0] === $targetPage[0]) {
              $el = $modalEl;
            }
          });
        }
      }
      if ($el.length > 1) {
        $el = $el.eq($el.length - 1);
      }
      if (!$el.length)
        return void 0;
      var instance = $el[0].f7Modal;
      if (!instance) {
        var params = $el.dataset();
        instance = new Constructor(app, _extends2({
          el: $el
        }, params));
      }
      return instance.open(animate);
    },
    close: function close(el, animate, targetEl) {
      if (el === void 0) {
        el = defaultSelector;
      }
      var $el = dom7_default(el);
      if (!$el.length)
        return void 0;
      if ($el.length > 1) {
        var $parentEl;
        if (targetEl) {
          var $targetEl = dom7_default(targetEl);
          if ($targetEl.length) {
            $parentEl = $targetEl.parents($el);
          }
        }
        if ($parentEl && $parentEl.length > 0) {
          $el = $parentEl;
        } else {
          $el = $el.eq($el.length - 1);
        }
      }
      var instance = $el[0].f7Modal;
      if (!instance) {
        var params = $el.dataset();
        instance = new Constructor(app, _extends2({
          el: $el
        }, params));
      }
      return instance.close(animate);
    }
  });
  return methods;
}

// node_modules/framework7/esm/components/app/load-module.js
var fetchedModules = [];
function loadModule(moduleToLoad) {
  var Framework72 = this;
  var window2 = getWindow();
  var document = getDocument();
  return new Promise(function(resolve, reject) {
    var app = Framework72.instance;
    var modulePath;
    var moduleObj;
    var moduleFunc;
    if (!moduleToLoad) {
      reject(new Error("Framework7: Lazy module must be specified"));
      return;
    }
    function install(module2) {
      Framework72.use(module2);
      if (app) {
        app.useModuleParams(module2, app.params);
        app.useModule(module2);
      }
    }
    if (typeof moduleToLoad === "string") {
      var matchNamePattern = moduleToLoad.match(/([a-z0-9-]*)/i);
      if (moduleToLoad.indexOf(".") < 0 && matchNamePattern && matchNamePattern[0].length === moduleToLoad.length) {
        if (!app || app && !app.params.lazyModulesPath) {
          reject(new Error('Framework7: "lazyModulesPath" app parameter must be specified to fetch module by name'));
          return;
        }
        modulePath = app.params.lazyModulesPath + "/" + moduleToLoad + "/" + moduleToLoad + ".js";
      } else {
        modulePath = moduleToLoad;
      }
    } else if (typeof moduleToLoad === "function") {
      moduleFunc = moduleToLoad;
    } else {
      moduleObj = moduleToLoad;
    }
    if (moduleFunc) {
      var module = moduleFunc(Framework72, false);
      if (!module) {
        reject(new Error("Framework7: Can't find Framework7 component in specified component function"));
        return;
      }
      if (Framework72.prototype.modules && Framework72.prototype.modules[module.name]) {
        resolve();
        return;
      }
      install(module);
      resolve();
    }
    if (moduleObj) {
      var _module = moduleObj;
      if (!_module) {
        reject(new Error("Framework7: Can't find Framework7 component in specified component"));
        return;
      }
      if (Framework72.prototype.modules && Framework72.prototype.modules[_module.name]) {
        resolve();
        return;
      }
      install(_module);
      resolve();
    }
    if (modulePath) {
      if (fetchedModules.indexOf(modulePath) >= 0) {
        resolve();
        return;
      }
      fetchedModules.push(modulePath);
      var scriptLoad = new Promise(function(resolveScript, rejectScript) {
        Framework72.request.get(modulePath, function(scriptContent) {
          var callbackId = id();
          var callbackLoadName = "f7_component_loader_callback_" + callbackId;
          var scriptEl = document.createElement("script");
          scriptEl.innerHTML = "window." + callbackLoadName + " = function (Framework7, Framework7AutoInstallComponent) {return " + scriptContent.trim() + "}";
          dom7_default("head").append(scriptEl);
          var componentLoader = window2[callbackLoadName];
          delete window2[callbackLoadName];
          dom7_default(scriptEl).remove();
          var module2 = componentLoader(Framework72, false);
          if (!module2) {
            rejectScript(new Error("Framework7: Can't find Framework7 component in " + modulePath + " file"));
            return;
          }
          if (Framework72.prototype.modules && Framework72.prototype.modules[module2.name]) {
            resolveScript();
            return;
          }
          install(module2);
          resolveScript();
        }, function(xhr, status) {
          rejectScript(xhr, status);
        });
      });
      var styleLoad = new Promise(function(resolveStyle) {
        Framework72.request.get(modulePath.replace(".js", app.rtl ? ".rtl.css" : ".css"), function(styleContent) {
          var styleEl = document.createElement("style");
          styleEl.innerHTML = styleContent;
          dom7_default("head").append(styleEl);
          resolveStyle();
        }, function() {
          resolveStyle();
        });
      });
      Promise.all([scriptLoad, styleLoad]).then(function() {
        resolve();
      }).catch(function(err) {
        reject(err);
      });
    }
  });
}
var load_module_default = loadModule;

// node_modules/framework7/esm/components/app/app-class.js
function _defineProperties2(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass2(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties2(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties2(Constructor, staticProps);
  return Constructor;
}
function _assertThisInitialized3(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose3(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf4(subClass, superClass);
}
function _setPrototypeOf4(o, p) {
  _setPrototypeOf4 = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf4(o, p);
}
var Framework7 = function(_Framework7Class) {
  _inheritsLoose3(Framework72, _Framework7Class);
  function Framework72(params) {
    var _this;
    if (params === void 0) {
      params = {};
    }
    _this = _Framework7Class.call(this, params) || this;
    if (Framework72.instance && typeof window !== "undefined") {
      throw new Error("Framework7 is already initialized and can't be initialized more than once");
    }
    var device = getDevice({
      userAgent: params.userAgent || void 0
    });
    var support2 = getSupport();
    var passedParams = extend({}, params);
    var app = _assertThisInitialized3(_this);
    app.device = device;
    app.support = support2;
    var w = getWindow();
    var d = getDocument();
    Framework72.instance = app;
    var defaults = {
      version: "1.0.0",
      id: "io.framework7.myapp",
      el: "body",
      theme: "auto",
      language: w.navigator.language,
      routes: [],
      name: "Framework7",
      lazyModulesPath: null,
      initOnDeviceReady: true,
      init: true,
      autoDarkTheme: false,
      iosTranslucentBars: true,
      iosTranslucentModals: true,
      component: void 0,
      componentUrl: void 0,
      userAgent: null,
      url: null
    };
    app.useModulesParams(defaults);
    app.params = extend(defaults, params);
    extend(app, {
      id: app.params.id,
      name: app.params.name,
      version: app.params.version,
      routes: app.params.routes,
      language: app.params.language,
      theme: function getTheme() {
        if (app.params.theme === "auto") {
          if (device.ios)
            return "ios";
          if (device.desktop && device.electron)
            return "aurora";
          return "md";
        }
        return app.params.theme;
      }(),
      passedParams,
      online: w.navigator.onLine
    });
    if (params.store)
      app.params.store = params.store;
    if (app.$el && app.$el[0]) {
      app.$el[0].f7 = app;
    }
    app.useModules();
    app.initStore();
    if (app.params.init) {
      if (device.cordova && app.params.initOnDeviceReady) {
        dom7_default(d).on("deviceready", function() {
          app.init();
        });
      } else {
        app.init();
      }
    }
    return app || _assertThisInitialized3(_this);
  }
  var _proto = Framework72.prototype;
  _proto.mount = function mount(rootEl) {
    var app = this;
    var window2 = getWindow();
    var document = getDocument();
    var $rootEl = dom7_default(rootEl || app.params.el).eq(0);
    app.$el = $rootEl;
    if (app.$el && app.$el[0]) {
      app.el = app.$el[0];
      app.el.f7 = app;
      app.rtl = $rootEl.css("direction") === "rtl";
    }
    var DARK = "(prefers-color-scheme: dark)";
    var LIGHT = "(prefers-color-scheme: light)";
    app.mq = {};
    if (window2.matchMedia) {
      app.mq.dark = window2.matchMedia(DARK);
      app.mq.light = window2.matchMedia(LIGHT);
    }
    app.colorSchemeListener = function colorSchemeListener(_ref) {
      var matches = _ref.matches, media = _ref.media;
      if (!matches) {
        return;
      }
      var html = document.querySelector("html");
      if (media === DARK) {
        html.classList.add("theme-dark");
        app.darkTheme = true;
        app.emit("darkThemeChange", true);
      } else if (media === LIGHT) {
        html.classList.remove("theme-dark");
        app.darkTheme = false;
        app.emit("darkThemeChange", false);
      }
    };
    app.emit("mount");
  };
  _proto.initStore = function initStore() {
    var app = this;
    if (typeof app.params.store !== "undefined" && app.params.store.__store) {
      app.store = app.params.store;
    } else {
      app.store = app.createStore(app.params.store);
    }
  };
  _proto.enableAutoDarkTheme = function enableAutoDarkTheme() {
    var window2 = getWindow();
    var document = getDocument();
    if (!window2.matchMedia)
      return;
    var app = this;
    var html = document.querySelector("html");
    if (app.mq.dark && app.mq.light) {
      app.mq.dark.addListener(app.colorSchemeListener);
      app.mq.light.addListener(app.colorSchemeListener);
    }
    if (app.mq.dark && app.mq.dark.matches) {
      html.classList.add("theme-dark");
      app.darkTheme = true;
      app.emit("darkThemeChange", true);
    } else if (app.mq.light && app.mq.light.matches) {
      html.classList.remove("theme-dark");
      app.darkTheme = false;
      app.emit("darkThemeChange", false);
    }
  };
  _proto.disableAutoDarkTheme = function disableAutoDarkTheme() {
    var window2 = getWindow();
    if (!window2.matchMedia)
      return;
    var app = this;
    if (app.mq.dark)
      app.mq.dark.removeListener(app.colorSchemeListener);
    if (app.mq.light)
      app.mq.light.removeListener(app.colorSchemeListener);
  };
  _proto.initAppComponent = function initAppComponent(callback) {
    var app = this;
    app.router.componentLoader(app.params.component, app.params.componentUrl, {
      componentOptions: {
        el: app.$el[0]
      }
    }, function(el) {
      app.$el = dom7_default(el);
      app.$el[0].f7 = app;
      app.$elComponent = el.f7Component;
      app.el = app.$el[0];
      if (callback)
        callback();
    }, function() {
    });
  };
  _proto.init = function init12(rootEl) {
    var app = this;
    app.mount(rootEl);
    var init13 = function init14() {
      if (app.initialized)
        return;
      app.$el.addClass("framework7-initializing");
      if (app.rtl) {
        dom7_default("html").attr("dir", "rtl");
      }
      if (app.params.autoDarkTheme) {
        app.enableAutoDarkTheme();
      }
      var window2 = getWindow();
      window2.addEventListener("offline", function() {
        app.online = false;
        app.emit("offline");
        app.emit("connection", false);
      });
      window2.addEventListener("online", function() {
        app.online = true;
        app.emit("online");
        app.emit("connection", true);
      });
      app.$el.addClass("framework7-root");
      dom7_default("html").removeClass("ios md aurora").addClass(app.theme);
      var device = app.device;
      if (app.params.iosTranslucentBars && app.theme === "ios" && device.ios) {
        dom7_default("html").addClass("ios-translucent-bars");
      }
      if (app.params.iosTranslucentModals && app.theme === "ios" && device.ios) {
        dom7_default("html").addClass("ios-translucent-modals");
      }
      nextFrame(function() {
        app.$el.removeClass("framework7-initializing");
      });
      app.initialized = true;
      app.emit("init");
    };
    if (app.params.component || app.params.componentUrl) {
      app.initAppComponent(function() {
        init13();
      });
    } else {
      init13();
    }
    return app;
  };
  _proto.loadModule = function loadModule2() {
    return Framework72.loadModule.apply(Framework72, arguments);
  };
  _proto.loadModules = function loadModules2() {
    return Framework72.loadModules.apply(Framework72, arguments);
  };
  _proto.getVnodeHooks = function getVnodeHooks(hook, id2) {
    var app = this;
    if (!app.vnodeHooks || !app.vnodeHooks[hook])
      return [];
    return app.vnodeHooks[hook][id2] || [];
  };
  _createClass2(Framework72, [{
    key: "$",
    get: function get2() {
      return dom7_default;
    }
  }], [{
    key: "Dom7",
    get: function get2() {
      return dom7_default;
    }
  }, {
    key: "$",
    get: function get2() {
      return dom7_default;
    }
  }, {
    key: "device",
    get: function get2() {
      return getDevice();
    }
  }, {
    key: "support",
    get: function get2() {
      return getSupport();
    }
  }, {
    key: "Class",
    get: function get2() {
      return class_default;
    }
  }, {
    key: "Events",
    get: function get2() {
      return events_class_default;
    }
  }]);
  return Framework72;
}(class_default);
Framework7.ModalMethods = ModalMethods;
Framework7.ConstructorMethods = ConstructorMethods;
Framework7.loadModule = load_module_default;
Framework7.loadModules = function loadModules(modules) {
  return Promise.all(modules.map(function(module) {
    return Framework7.loadModule(module);
  }));
};
var app_class_default = Framework7;

// node_modules/framework7/esm/modules/device/device.js
var device_default = {
  name: "device",
  static: {
    getDevice
  },
  on: {
    init: function init() {
      var document = getDocument();
      var device = getDevice();
      var classNames = [];
      var html = document.querySelector("html");
      var metaStatusbar = document.querySelector('meta[name="apple-mobile-web-app-status-bar-style"]');
      if (!html)
        return;
      if (device.standalone && device.ios && metaStatusbar && metaStatusbar.content === "black-translucent") {
        classNames.push("device-full-viewport");
      }
      classNames.push("device-pixel-ratio-" + Math.floor(device.pixelRatio));
      if (device.os && !device.desktop) {
        classNames.push("device-" + device.os);
      } else if (device.desktop) {
        classNames.push("device-desktop");
        if (device.os) {
          classNames.push("device-" + device.os);
        }
      }
      if (device.cordova || device.phonegap) {
        classNames.push("device-cordova");
      }
      if (device.capacitor) {
        classNames.push("device-capacitor");
      }
      classNames.forEach(function(className) {
        html.classList.add(className);
      });
    }
  }
};

// node_modules/framework7/esm/modules/support/support.js
var support_default = {
  name: "support",
  static: {
    getSupport
  }
};

// node_modules/framework7/esm/modules/utils/utils.js
var utils_default = {
  name: "utils",
  proto: {
    utils: utils_exports
  },
  static: {
    utils: utils_exports
  }
};

// node_modules/framework7/esm/modules/resize/resize.js
var resize_default = {
  name: "resize",
  create: function create() {
    var app = this;
    app.getSize = function() {
      if (!app.el)
        return {
          width: 0,
          height: 0,
          left: 0,
          top: 0
        };
      var offset = app.$el.offset();
      var _ref = [app.el.offsetWidth, app.el.offsetHeight, offset.left, offset.top], width = _ref[0], height = _ref[1], left = _ref[2], top = _ref[3];
      app.width = width;
      app.height = height;
      app.left = left;
      app.top = top;
      return {
        width,
        height,
        left,
        top
      };
    };
  },
  on: {
    init: function init2() {
      var app = this;
      var window2 = getWindow();
      app.getSize();
      window2.addEventListener("resize", function() {
        app.emit("resize");
      }, false);
      window2.addEventListener("orientationchange", function() {
        app.emit("orientationchange");
      });
    },
    orientationchange: function orientationchange() {
      var document = getDocument();
      var device = getDevice();
      if (device.ipad) {
        document.body.scrollLeft = 0;
        setTimeout(function() {
          document.body.scrollLeft = 0;
        }, 0);
      }
    },
    resize: function resize() {
      var app = this;
      app.getSize();
    }
  }
};

// node_modules/framework7/esm/modules/request/request.js
var request_default2 = {
  name: "request",
  proto: {
    request: request_default
  },
  static: {
    request: request_default
  }
};

// node_modules/framework7/esm/modules/touch/touch.js
function initTouch() {
  var app = this;
  var device = getDevice();
  var support2 = getSupport();
  var window2 = getWindow();
  var document = getDocument();
  var params = app.params.touch;
  var useRipple = params[app.theme + "TouchRipple"];
  if (device.ios && device.webView) {
    window2.addEventListener("touchstart", function() {
    });
  }
  var touchStartX;
  var touchStartY;
  var targetElement;
  var isMoved;
  var tapHoldFired;
  var tapHoldTimeout;
  var preventClick;
  var activableElement;
  var activeTimeout;
  var rippleWave;
  var rippleTarget;
  var rippleTimeout;
  function findActivableElement(el) {
    var target = dom7_default(el);
    var parents = target.parents(params.activeStateElements);
    if (target.closest(".no-active-state").length) {
      return null;
    }
    var activable;
    if (target.is(params.activeStateElements)) {
      activable = target;
    }
    if (parents.length > 0) {
      activable = activable ? activable.add(parents) : parents;
    }
    if (activable && activable.length > 1) {
      var newActivable = [];
      var preventPropagation;
      for (var i = 0; i < activable.length; i += 1) {
        if (!preventPropagation) {
          newActivable.push(activable[i]);
          if (activable.eq(i).hasClass("prevent-active-state-propagation") || activable.eq(i).hasClass("no-active-state-propagation")) {
            preventPropagation = true;
          }
        }
      }
      activable = dom7_default(newActivable);
    }
    return activable || target;
  }
  function isInsideScrollableView(el) {
    var pageContent = el.parents(".page-content");
    return pageContent.length > 0;
  }
  function addActive() {
    if (!activableElement)
      return;
    activableElement.addClass("active-state");
  }
  function removeActive() {
    if (!activableElement)
      return;
    activableElement.removeClass("active-state");
    activableElement = null;
  }
  function findRippleElement(el) {
    var rippleElements = params.touchRippleElements;
    var $el = dom7_default(el);
    if ($el.is(rippleElements)) {
      if ($el.hasClass("no-ripple")) {
        return false;
      }
      return $el;
    }
    if ($el.parents(rippleElements).length > 0) {
      var rippleParent = $el.parents(rippleElements).eq(0);
      if (rippleParent.hasClass("no-ripple")) {
        return false;
      }
      return rippleParent;
    }
    return false;
  }
  function createRipple($el, x, y) {
    if (!$el)
      return;
    rippleWave = app.touchRipple.create(app, $el, x, y);
  }
  function removeRipple() {
    if (!rippleWave)
      return;
    rippleWave.remove();
    rippleWave = void 0;
    rippleTarget = void 0;
  }
  function rippleTouchStart(el) {
    rippleTarget = findRippleElement(el);
    if (!rippleTarget || rippleTarget.length === 0) {
      rippleTarget = void 0;
      return;
    }
    var inScrollable = isInsideScrollableView(rippleTarget);
    if (!inScrollable) {
      removeRipple();
      createRipple(rippleTarget, touchStartX, touchStartY);
    } else {
      clearTimeout(rippleTimeout);
      rippleTimeout = setTimeout(function() {
        removeRipple();
        createRipple(rippleTarget, touchStartX, touchStartY);
      }, 80);
    }
  }
  function rippleTouchMove() {
    clearTimeout(rippleTimeout);
    removeRipple();
  }
  function rippleTouchEnd() {
    if (!rippleWave && rippleTarget && !isMoved) {
      clearTimeout(rippleTimeout);
      createRipple(rippleTarget, touchStartX, touchStartY);
      setTimeout(removeRipple, 0);
    } else {
      removeRipple();
    }
  }
  function handleMouseDown(e) {
    var $activableEl = findActivableElement(e.target);
    if ($activableEl) {
      $activableEl.addClass("active-state");
      if ("which" in e && e.which === 3) {
        setTimeout(function() {
          dom7_default(".active-state").removeClass("active-state");
        }, 0);
      }
    }
    if (useRipple) {
      touchStartX = e.pageX;
      touchStartY = e.pageY;
      rippleTouchStart(e.target, e.pageX, e.pageY);
    }
  }
  function handleMouseMove() {
    if (!params.activeStateOnMouseMove) {
      dom7_default(".active-state").removeClass("active-state");
    }
    if (useRipple) {
      rippleTouchMove();
    }
  }
  function handleMouseUp() {
    dom7_default(".active-state").removeClass("active-state");
    if (useRipple) {
      rippleTouchEnd();
    }
  }
  function handleTouchCancel() {
    targetElement = null;
    clearTimeout(activeTimeout);
    clearTimeout(tapHoldTimeout);
    if (params.activeState) {
      removeActive();
    }
    if (useRipple) {
      rippleTouchEnd();
    }
  }
  var isScrolling;
  var isSegmentedStrong = false;
  var segmentedStrongEl = null;
  var touchMoveActivableIos = ".dialog-button, .actions-button";
  var isTouchMoveActivable = false;
  var touchmoveActivableEl = null;
  function handleTouchStart(e) {
    isMoved = false;
    tapHoldFired = false;
    preventClick = false;
    isScrolling = void 0;
    if (e.targetTouches.length > 1) {
      if (activableElement)
        removeActive();
      return true;
    }
    if (e.touches.length > 1 && activableElement) {
      removeActive();
    }
    if (params.tapHold) {
      if (tapHoldTimeout)
        clearTimeout(tapHoldTimeout);
      tapHoldTimeout = setTimeout(function() {
        if (e && e.touches && e.touches.length > 1)
          return;
        tapHoldFired = true;
        e.preventDefault();
        preventClick = true;
        dom7_default(e.target).trigger("taphold", e);
        app.emit("taphold", e);
      }, params.tapHoldDelay);
    }
    targetElement = e.target;
    touchStartX = e.targetTouches[0].pageX;
    touchStartY = e.targetTouches[0].pageY;
    isSegmentedStrong = e.target.closest(".segmented-strong .button-active, .segmented-strong .tab-link-active");
    isTouchMoveActivable = app.theme === "ios" && e.target.closest(touchMoveActivableIos);
    if (isSegmentedStrong) {
      segmentedStrongEl = isSegmentedStrong.closest(".segmented-strong");
    }
    if (params.activeState) {
      activableElement = findActivableElement(targetElement);
      if (activableElement && !isInsideScrollableView(activableElement)) {
        addActive();
      } else if (activableElement) {
        activeTimeout = setTimeout(addActive, 80);
      }
    }
    if (useRipple) {
      rippleTouchStart(targetElement, touchStartX, touchStartY);
    }
    return true;
  }
  function handleTouchMove(e) {
    var touch;
    var distance;
    var shouldRemoveActive = true;
    if (e.type === "touchmove") {
      touch = e.targetTouches[0];
      distance = params.touchClicksDistanceThreshold;
    }
    var touchCurrentX = e.targetTouches[0].pageX;
    var touchCurrentY = e.targetTouches[0].pageY;
    if (typeof isScrolling === "undefined") {
      isScrolling = !!(isScrolling || Math.abs(touchCurrentY - touchStartY) > Math.abs(touchCurrentX - touchStartX));
    }
    if (isTouchMoveActivable || !isScrolling && isSegmentedStrong && segmentedStrongEl) {
      if (e.cancelable)
        e.preventDefault();
    }
    if (!isScrolling && isSegmentedStrong && segmentedStrongEl) {
      var elementFromPoint = document.elementFromPoint(e.targetTouches[0].clientX, e.targetTouches[0].clientY);
      var buttonEl = elementFromPoint.closest(".segmented-strong .button:not(.button-active):not(.tab-link-active)");
      if (buttonEl && segmentedStrongEl.contains(buttonEl)) {
        dom7_default(buttonEl).trigger("click", "f7Segmented");
        targetElement = buttonEl;
      }
    }
    if (distance && touch) {
      var pageX = touch.pageX;
      var pageY = touch.pageY;
      if (Math.abs(pageX - touchStartX) > distance || Math.abs(pageY - touchStartY) > distance) {
        isMoved = true;
      }
    } else {
      isMoved = true;
    }
    if (isMoved) {
      preventClick = true;
      if (isTouchMoveActivable) {
        var _elementFromPoint = document.elementFromPoint(e.targetTouches[0].clientX, e.targetTouches[0].clientY);
        touchmoveActivableEl = _elementFromPoint.closest(touchMoveActivableIos);
        if (touchmoveActivableEl && activableElement && activableElement[0] === touchmoveActivableEl) {
          shouldRemoveActive = false;
        } else if (touchmoveActivableEl) {
          setTimeout(function() {
            activableElement = findActivableElement(touchmoveActivableEl);
            addActive();
          });
        }
      }
      if (params.tapHold) {
        clearTimeout(tapHoldTimeout);
      }
      if (params.activeState && shouldRemoveActive) {
        clearTimeout(activeTimeout);
        removeActive();
      }
      if (useRipple) {
        rippleTouchMove();
      }
    }
  }
  function handleTouchEnd(e) {
    isScrolling = void 0;
    isSegmentedStrong = false;
    segmentedStrongEl = null;
    isTouchMoveActivable = false;
    clearTimeout(activeTimeout);
    clearTimeout(tapHoldTimeout);
    if (touchmoveActivableEl) {
      dom7_default(touchmoveActivableEl).trigger("click", "f7TouchMoveActivable");
      touchmoveActivableEl = null;
    }
    if (document.activeElement === e.target) {
      if (params.activeState)
        removeActive();
      if (useRipple) {
        rippleTouchEnd();
      }
      return true;
    }
    if (params.activeState) {
      addActive();
      setTimeout(removeActive, 0);
    }
    if (useRipple) {
      rippleTouchEnd();
    }
    if (params.tapHoldPreventClicks && tapHoldFired || preventClick) {
      if (e.cancelable)
        e.preventDefault();
      preventClick = true;
      return false;
    }
    return true;
  }
  function handleClick(e) {
    var isOverswipe = e && e.detail && e.detail === "f7Overswipe";
    var isSegmented = e && e.detail && e.detail === "f7Segmented";
    var isTouchMoveActivable2 = e && e.detail && e.detail === "f7TouchMoveActivable";
    var localPreventClick = preventClick;
    if (targetElement && e.target !== targetElement) {
      if (isOverswipe || isSegmented || isTouchMoveActivable2) {
        localPreventClick = false;
      } else {
        localPreventClick = true;
      }
    } else if (isTouchMoveActivable2) {
      localPreventClick = false;
    }
    if (params.tapHold && params.tapHoldPreventClicks && tapHoldFired) {
      localPreventClick = true;
    }
    if (localPreventClick) {
      e.stopImmediatePropagation();
      e.stopPropagation();
      e.preventDefault();
    }
    if (params.tapHold) {
      tapHoldTimeout = setTimeout(function() {
        tapHoldFired = false;
      }, device.ios || device.androidChrome ? 100 : 400);
    }
    preventClick = false;
    targetElement = null;
    return !localPreventClick;
  }
  function emitAppTouchEvent(name, e) {
    app.emit({
      events: name,
      data: [e]
    });
  }
  function appClick(e) {
    emitAppTouchEvent("click", e);
  }
  function appTouchStartActive(e) {
    emitAppTouchEvent("touchstart touchstart:active", e);
  }
  function appTouchMoveActive(e) {
    emitAppTouchEvent("touchmove touchmove:active", e);
  }
  function appTouchEndActive(e) {
    emitAppTouchEvent("touchend touchend:active", e);
  }
  function appTouchStartPassive(e) {
    emitAppTouchEvent("touchstart:passive", e);
  }
  function appTouchMovePassive(e) {
    emitAppTouchEvent("touchmove:passive", e);
  }
  function appTouchEndPassive(e) {
    emitAppTouchEvent("touchend:passive", e);
  }
  var passiveListener = support2.passiveListener ? {
    passive: true
  } : false;
  var passiveListenerCapture = support2.passiveListener ? {
    passive: true,
    capture: true
  } : true;
  var activeListener = support2.passiveListener ? {
    passive: false
  } : false;
  var activeListenerCapture = support2.passiveListener ? {
    passive: false,
    capture: true
  } : true;
  document.addEventListener("click", appClick, true);
  if (support2.passiveListener) {
    document.addEventListener(app.touchEvents.start, appTouchStartActive, activeListenerCapture);
    document.addEventListener(app.touchEvents.move, appTouchMoveActive, activeListener);
    document.addEventListener(app.touchEvents.end, appTouchEndActive, activeListener);
    document.addEventListener(app.touchEvents.start, appTouchStartPassive, passiveListenerCapture);
    document.addEventListener(app.touchEvents.move, appTouchMovePassive, passiveListener);
    document.addEventListener(app.touchEvents.end, appTouchEndPassive, passiveListener);
  } else {
    document.addEventListener(app.touchEvents.start, function(e) {
      appTouchStartActive(e);
      appTouchStartPassive(e);
    }, true);
    document.addEventListener(app.touchEvents.move, function(e) {
      appTouchMoveActive(e);
      appTouchMovePassive(e);
    }, false);
    document.addEventListener(app.touchEvents.end, function(e) {
      appTouchEndActive(e);
      appTouchEndPassive(e);
    }, false);
  }
  if (support2.touch) {
    app.on("click", handleClick);
    app.on("touchstart", handleTouchStart);
    app.on("touchmove", handleTouchMove);
    app.on("touchend", handleTouchEnd);
    document.addEventListener("touchcancel", handleTouchCancel, {
      passive: true
    });
  } else if (params.activeState) {
    app.on("touchstart", handleMouseDown);
    app.on("touchmove", handleMouseMove);
    app.on("touchend", handleMouseUp);
    document.addEventListener("pointercancel", handleMouseUp, {
      passive: true
    });
  }
  document.addEventListener("contextmenu", function(e) {
    if (params.disableContextMenu && (device.ios || device.android || device.cordova || window2.Capacitor && window2.Capacitor.isNative)) {
      e.preventDefault();
    }
    if (useRipple) {
      if (activableElement)
        removeActive();
      rippleTouchEnd();
    }
  });
}
var touch_default = {
  name: "touch",
  params: {
    touch: {
      touchClicksDistanceThreshold: 5,
      disableContextMenu: false,
      tapHold: false,
      tapHoldDelay: 750,
      tapHoldPreventClicks: true,
      activeState: true,
      activeStateElements: "a, button, label, span, .actions-button, .stepper-button, .stepper-button-plus, .stepper-button-minus, .card-expandable, .menu-item, .link, .item-link, .accordion-item-toggle",
      activeStateOnMouseMove: false,
      mdTouchRipple: true,
      iosTouchRipple: false,
      auroraTouchRipple: false,
      touchRippleElements: ".ripple, .link, .item-link, .list-button, .links-list a, .button, button, .input-clear-button, .dialog-button, .tab-link, .item-radio, .item-checkbox, .actions-button, .searchbar-disable-button, .fab a, .checkbox, .radio, .data-table .sortable-cell:not(.input-cell), .notification-close-button, .stepper-button, .stepper-button-minus, .stepper-button-plus, .menu-item-content, .list.accordion-list .accordion-item-toggle",
      touchRippleInsetElements: ".ripple-inset, .icon-only, .searchbar-disable-button, .input-clear-button, .notification-close-button, .md .navbar .link.back"
    }
  },
  create: function create2() {
    var app = this;
    var support2 = getSupport();
    extend(app, {
      touchEvents: {
        start: support2.touch ? "touchstart" : support2.pointerEvents ? "pointerdown" : "mousedown",
        move: support2.touch ? "touchmove" : support2.pointerEvents ? "pointermove" : "mousemove",
        end: support2.touch ? "touchend" : support2.pointerEvents ? "pointerup" : "mouseup"
      }
    });
  },
  on: {
    init: initTouch
  }
};

// node_modules/path-to-regexp/dist.es2015/index.js
function lexer(str) {
  var tokens = [];
  var i = 0;
  while (i < str.length) {
    var char = str[i];
    if (char === "*" || char === "+" || char === "?") {
      tokens.push({ type: "MODIFIER", index: i, value: str[i++] });
      continue;
    }
    if (char === "\\") {
      tokens.push({ type: "ESCAPED_CHAR", index: i++, value: str[i++] });
      continue;
    }
    if (char === "{") {
      tokens.push({ type: "OPEN", index: i, value: str[i++] });
      continue;
    }
    if (char === "}") {
      tokens.push({ type: "CLOSE", index: i, value: str[i++] });
      continue;
    }
    if (char === ":") {
      var name = "";
      var j = i + 1;
      while (j < str.length) {
        var code = str.charCodeAt(j);
        if (code >= 48 && code <= 57 || code >= 65 && code <= 90 || code >= 97 && code <= 122 || code === 95) {
          name += str[j++];
          continue;
        }
        break;
      }
      if (!name)
        throw new TypeError("Missing parameter name at " + i);
      tokens.push({ type: "NAME", index: i, value: name });
      i = j;
      continue;
    }
    if (char === "(") {
      var count = 1;
      var pattern = "";
      var j = i + 1;
      if (str[j] === "?") {
        throw new TypeError('Pattern cannot start with "?" at ' + j);
      }
      while (j < str.length) {
        if (str[j] === "\\") {
          pattern += str[j++] + str[j++];
          continue;
        }
        if (str[j] === ")") {
          count--;
          if (count === 0) {
            j++;
            break;
          }
        } else if (str[j] === "(") {
          count++;
          if (str[j + 1] !== "?") {
            throw new TypeError("Capturing groups are not allowed at " + j);
          }
        }
        pattern += str[j++];
      }
      if (count)
        throw new TypeError("Unbalanced pattern at " + i);
      if (!pattern)
        throw new TypeError("Missing pattern at " + i);
      tokens.push({ type: "PATTERN", index: i, value: pattern });
      i = j;
      continue;
    }
    tokens.push({ type: "CHAR", index: i, value: str[i++] });
  }
  tokens.push({ type: "END", index: i, value: "" });
  return tokens;
}
function parse(str, options) {
  if (options === void 0) {
    options = {};
  }
  var tokens = lexer(str);
  var _a = options.prefixes, prefixes = _a === void 0 ? "./" : _a;
  var defaultPattern = "[^" + escapeString(options.delimiter || "/#?") + "]+?";
  var result = [];
  var key = 0;
  var i = 0;
  var path = "";
  var tryConsume = function(type) {
    if (i < tokens.length && tokens[i].type === type)
      return tokens[i++].value;
  };
  var mustConsume = function(type) {
    var value2 = tryConsume(type);
    if (value2 !== void 0)
      return value2;
    var _a2 = tokens[i], nextType = _a2.type, index = _a2.index;
    throw new TypeError("Unexpected " + nextType + " at " + index + ", expected " + type);
  };
  var consumeText = function() {
    var result2 = "";
    var value2;
    while (value2 = tryConsume("CHAR") || tryConsume("ESCAPED_CHAR")) {
      result2 += value2;
    }
    return result2;
  };
  while (i < tokens.length) {
    var char = tryConsume("CHAR");
    var name = tryConsume("NAME");
    var pattern = tryConsume("PATTERN");
    if (name || pattern) {
      var prefix = char || "";
      if (prefixes.indexOf(prefix) === -1) {
        path += prefix;
        prefix = "";
      }
      if (path) {
        result.push(path);
        path = "";
      }
      result.push({
        name: name || key++,
        prefix,
        suffix: "",
        pattern: pattern || defaultPattern,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    var value = char || tryConsume("ESCAPED_CHAR");
    if (value) {
      path += value;
      continue;
    }
    if (path) {
      result.push(path);
      path = "";
    }
    var open = tryConsume("OPEN");
    if (open) {
      var prefix = consumeText();
      var name_1 = tryConsume("NAME") || "";
      var pattern_1 = tryConsume("PATTERN") || "";
      var suffix = consumeText();
      mustConsume("CLOSE");
      result.push({
        name: name_1 || (pattern_1 ? key++ : ""),
        pattern: name_1 && !pattern_1 ? defaultPattern : pattern_1,
        prefix,
        suffix,
        modifier: tryConsume("MODIFIER") || ""
      });
      continue;
    }
    mustConsume("END");
  }
  return result;
}
function compile(str, options) {
  return tokensToFunction(parse(str, options), options);
}
function tokensToFunction(tokens, options) {
  if (options === void 0) {
    options = {};
  }
  var reFlags = flags(options);
  var _a = options.encode, encode = _a === void 0 ? function(x) {
    return x;
  } : _a, _b = options.validate, validate = _b === void 0 ? true : _b;
  var matches = tokens.map(function(token) {
    if (typeof token === "object") {
      return new RegExp("^(?:" + token.pattern + ")$", reFlags);
    }
  });
  return function(data) {
    var path = "";
    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];
      if (typeof token === "string") {
        path += token;
        continue;
      }
      var value = data ? data[token.name] : void 0;
      var optional = token.modifier === "?" || token.modifier === "*";
      var repeat = token.modifier === "*" || token.modifier === "+";
      if (Array.isArray(value)) {
        if (!repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but got an array');
        }
        if (value.length === 0) {
          if (optional)
            continue;
          throw new TypeError('Expected "' + token.name + '" to not be empty');
        }
        for (var j = 0; j < value.length; j++) {
          var segment = encode(value[j], token);
          if (validate && !matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"');
          }
          path += token.prefix + segment + token.suffix;
        }
        continue;
      }
      if (typeof value === "string" || typeof value === "number") {
        var segment = encode(String(value), token);
        if (validate && !matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"');
        }
        path += token.prefix + segment + token.suffix;
        continue;
      }
      if (optional)
        continue;
      var typeOfMessage = repeat ? "an array" : "a string";
      throw new TypeError('Expected "' + token.name + '" to be ' + typeOfMessage);
    }
    return path;
  };
}
function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
}
function flags(options) {
  return options && options.sensitive ? "" : "i";
}
function regexpToRegexp(path, keys) {
  if (!keys)
    return path;
  var groupsRegex = /\((?:\?<(.*?)>)?(?!\?)/g;
  var index = 0;
  var execResult = groupsRegex.exec(path.source);
  while (execResult) {
    keys.push({
      name: execResult[1] || index++,
      prefix: "",
      suffix: "",
      modifier: "",
      pattern: ""
    });
    execResult = groupsRegex.exec(path.source);
  }
  return path;
}
function arrayToRegexp(paths, keys, options) {
  var parts = paths.map(function(path) {
    return pathToRegexp(path, keys, options).source;
  });
  return new RegExp("(?:" + parts.join("|") + ")", flags(options));
}
function stringToRegexp(path, keys, options) {
  return tokensToRegexp(parse(path, options), keys, options);
}
function tokensToRegexp(tokens, keys, options) {
  if (options === void 0) {
    options = {};
  }
  var _a = options.strict, strict = _a === void 0 ? false : _a, _b = options.start, start = _b === void 0 ? true : _b, _c = options.end, end = _c === void 0 ? true : _c, _d = options.encode, encode = _d === void 0 ? function(x) {
    return x;
  } : _d;
  var endsWith = "[" + escapeString(options.endsWith || "") + "]|$";
  var delimiter = "[" + escapeString(options.delimiter || "/#?") + "]";
  var route = start ? "^" : "";
  for (var _i = 0, tokens_1 = tokens; _i < tokens_1.length; _i++) {
    var token = tokens_1[_i];
    if (typeof token === "string") {
      route += escapeString(encode(token));
    } else {
      var prefix = escapeString(encode(token.prefix));
      var suffix = escapeString(encode(token.suffix));
      if (token.pattern) {
        if (keys)
          keys.push(token);
        if (prefix || suffix) {
          if (token.modifier === "+" || token.modifier === "*") {
            var mod = token.modifier === "*" ? "?" : "";
            route += "(?:" + prefix + "((?:" + token.pattern + ")(?:" + suffix + prefix + "(?:" + token.pattern + "))*)" + suffix + ")" + mod;
          } else {
            route += "(?:" + prefix + "(" + token.pattern + ")" + suffix + ")" + token.modifier;
          }
        } else {
          route += "(" + token.pattern + ")" + token.modifier;
        }
      } else {
        route += "(?:" + prefix + suffix + ")" + token.modifier;
      }
    }
  }
  if (end) {
    if (!strict)
      route += delimiter + "?";
    route += !options.endsWith ? "$" : "(?=" + endsWith + ")";
  } else {
    var endToken = tokens[tokens.length - 1];
    var isEndDelimited = typeof endToken === "string" ? delimiter.indexOf(endToken[endToken.length - 1]) > -1 : endToken === void 0;
    if (!strict) {
      route += "(?:" + delimiter + "(?=" + endsWith + "))?";
    }
    if (!isEndDelimited) {
      route += "(?=" + delimiter + "|" + endsWith + ")";
    }
  }
  return new RegExp(route, flags(options));
}
function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp)
    return regexpToRegexp(path, keys);
  if (Array.isArray(path))
    return arrayToRegexp(path, keys, options);
  return stringToRegexp(path, keys, options);
}

// node_modules/framework7/esm/shared/history.js
var History = {
  queue: [],
  clearQueue: function clearQueue() {
    if (History.queue.length === 0)
      return;
    var currentQueue = History.queue.shift();
    currentQueue();
  },
  routerQueue: [],
  clearRouterQueue: function clearRouterQueue() {
    if (History.routerQueue.length === 0)
      return;
    var currentQueue = History.routerQueue.pop();
    var router = currentQueue.router, stateUrl = currentQueue.stateUrl, action = currentQueue.action;
    var animate = router.params.animate;
    if (router.params.browserHistoryAnimate === false)
      animate = false;
    if (action === "back") {
      router.back({
        animate,
        browserHistory: false
      });
    }
    if (action === "load") {
      router.navigate(stateUrl, {
        animate,
        browserHistory: false
      });
    }
  },
  handle: function handle(e) {
    if (History.blockPopstate)
      return;
    var app = this;
    var state = e.state;
    History.previousState = History.state;
    History.state = state;
    History.allowChange = true;
    History.clearQueue();
    state = History.state;
    if (!state)
      state = {};
    app.views.forEach(function(view) {
      var router = view.router;
      var viewState = state[view.id];
      if (!viewState && view.params.browserHistory) {
        viewState = {
          url: view.router.history[0]
        };
      }
      if (!viewState)
        return;
      var stateUrl = viewState.url || void 0;
      var animate = router.params.animate;
      if (router.params.browserHistoryAnimate === false)
        animate = false;
      if (stateUrl !== router.url) {
        if (router.history.indexOf(stateUrl) >= 0) {
          if (router.allowPageChange) {
            router.back({
              animate,
              browserHistory: false
            });
          } else {
            History.routerQueue.push({
              action: "back",
              router
            });
          }
        } else if (router.allowPageChange) {
          router.navigate(stateUrl, {
            animate,
            browserHistory: false
          });
        } else {
          History.routerQueue.unshift({
            action: "load",
            stateUrl,
            router
          });
        }
      }
    });
  },
  initViewState: function initViewState(viewId, viewState) {
    var _extend;
    var window2 = getWindow();
    var newState = extend({}, History.state || {}, (_extend = {}, _extend[viewId] = viewState, _extend));
    History.state = newState;
    window2.history.replaceState(newState, "");
  },
  push: function push(viewId, viewState, url) {
    var _extend2;
    var window2 = getWindow();
    if (url.substr(-3) === "#!/") {
      url = url.replace("#!/", "");
    }
    if (!History.allowChange) {
      History.queue.push(function() {
        History.push(viewId, viewState, url);
      });
      return;
    }
    History.previousState = History.state;
    var newState = extend({}, History.previousState || {}, (_extend2 = {}, _extend2[viewId] = viewState, _extend2));
    History.state = newState;
    window2.history.pushState(newState, "", url);
  },
  replace: function replace(viewId, viewState, url) {
    var _extend3;
    var window2 = getWindow();
    if (url.substr(-3) === "#!/") {
      url = url.replace("#!/", "");
    }
    if (!History.allowChange) {
      History.queue.push(function() {
        History.replace(viewId, viewState, url);
      });
      return;
    }
    History.previousState = History.state;
    var newState = extend({}, History.previousState || {}, (_extend3 = {}, _extend3[viewId] = viewState, _extend3));
    History.state = newState;
    window2.history.replaceState(newState, "", url);
  },
  go: function go(index) {
    var window2 = getWindow();
    History.allowChange = false;
    window2.history.go(index);
  },
  back: function back() {
    var window2 = getWindow();
    History.allowChange = false;
    window2.history.back();
  },
  allowChange: true,
  previousState: {},
  state: {},
  blockPopstate: true,
  init: function init3(app) {
    var window2 = getWindow();
    var document = getDocument();
    History.state = window2.history.state;
    dom7_default(window2).on("load", function() {
      setTimeout(function() {
        History.blockPopstate = false;
      }, 0);
    });
    if (document.readyState && document.readyState === "complete") {
      History.blockPopstate = false;
    }
    dom7_default(window2).on("popstate", History.handle.bind(app));
  }
};
var history_default = History;

// node_modules/framework7/esm/modules/router/swipe-back.js
function SwipeBack(r) {
  var router = r;
  var $el = router.$el, $navbarsEl = router.$navbarsEl, app = router.app, params = router.params;
  var support2 = getSupport();
  var device = getDevice();
  var isTouched = false;
  var isMoved = false;
  var touchesStart = {};
  var isScrolling;
  var $currentPageEl = [];
  var $previousPageEl = [];
  var viewContainerWidth;
  var touchesDiff;
  var allowViewTouchMove = true;
  var touchStartTime;
  var $currentNavbarEl = [];
  var $previousNavbarEl = [];
  var dynamicNavbar;
  var $pageShadowEl;
  var $pageOpacityEl;
  var animatableNavEls;
  var paramsSwipeBackAnimateShadow = params[app.theme + "SwipeBackAnimateShadow"];
  var paramsSwipeBackAnimateOpacity = params[app.theme + "SwipeBackAnimateOpacity"];
  var paramsSwipeBackActiveArea = params[app.theme + "SwipeBackActiveArea"];
  var paramsSwipeBackThreshold = params[app.theme + "SwipeBackThreshold"];
  var transformOrigin = app.rtl ? "right center" : "left center";
  var transformOriginTitleLarge = app.rtl ? "calc(100% - var(--f7-navbar-large-title-padding-left) - var(--f7-safe-area-left)) center" : "calc(var(--f7-navbar-large-title-padding-left) + var(--f7-safe-area-left)) center";
  function animatableNavElements() {
    var els = [];
    var inverter = app.rtl ? -1 : 1;
    var currentNavIsTransparent = $currentNavbarEl.hasClass("navbar-transparent") && !$currentNavbarEl.hasClass("navbar-large") && !$currentNavbarEl.hasClass("navbar-transparent-visible");
    var currentNavIsLarge = $currentNavbarEl.hasClass("navbar-large");
    var currentNavIsCollapsed = $currentNavbarEl.hasClass("navbar-large-collapsed");
    var currentNavIsLargeTransparent = $currentNavbarEl.hasClass("navbar-large-transparent") || $currentNavbarEl.hasClass("navbar-large") && $currentNavbarEl.hasClass("navbar-transparent");
    var previousNavIsTransparent = $previousNavbarEl.hasClass("navbar-transparent") && !$previousNavbarEl.hasClass("navbar-large") && !$previousNavbarEl.hasClass("navbar-transparent-visible");
    var previousNavIsLarge = $previousNavbarEl.hasClass("navbar-large");
    var previousNavIsCollapsed = $previousNavbarEl.hasClass("navbar-large-collapsed");
    var previousNavIsLargeTransparent = $previousNavbarEl.hasClass("navbar-large-transparent") || $previousNavbarEl.hasClass("navbar-large") && $previousNavbarEl.hasClass("navbar-transparent");
    var fromLarge = currentNavIsLarge && !currentNavIsCollapsed;
    var toLarge = previousNavIsLarge && !previousNavIsCollapsed;
    var $currentNavElements = $currentNavbarEl.find(".left, .title, .right, .subnavbar, .fading, .title-large, .navbar-bg");
    var $previousNavElements = $previousNavbarEl.find(".left, .title, .right, .subnavbar, .fading, .title-large, .navbar-bg");
    var activeNavBackIconText;
    var previousNavBackIconText;
    if (params.iosAnimateNavbarBackIcon) {
      if ($currentNavbarEl.hasClass("sliding") || $currentNavbarEl.find(".navbar-inner.sliding").length) {
        activeNavBackIconText = $currentNavbarEl.find(".left").find(".back .icon + span").eq(0);
      } else {
        activeNavBackIconText = $currentNavbarEl.find(".left.sliding").find(".back .icon + span").eq(0);
      }
      if ($previousNavbarEl.hasClass("sliding") || $previousNavbarEl.find(".navbar-inner.sliding").length) {
        previousNavBackIconText = $previousNavbarEl.find(".left").find(".back .icon + span").eq(0);
      } else {
        previousNavBackIconText = $previousNavbarEl.find(".left.sliding").find(".back .icon + span").eq(0);
      }
      if (activeNavBackIconText.length) {
        $previousNavElements.each(function(el) {
          if (!dom7_default(el).hasClass("title"))
            return;
          el.f7NavbarLeftOffset += activeNavBackIconText.prev(".icon")[0].offsetWidth;
        });
      }
    }
    $currentNavElements.each(function(navEl) {
      var $navEl = dom7_default(navEl);
      var isSubnavbar = $navEl.hasClass("subnavbar");
      var isLeft = $navEl.hasClass("left");
      var isTitle = $navEl.hasClass("title");
      var isBg = $navEl.hasClass("navbar-bg");
      if ((isTitle || isBg) && currentNavIsTransparent)
        return;
      if (!fromLarge && $navEl.hasClass(".title-large"))
        return;
      var el = {
        el: navEl
      };
      if (fromLarge) {
        if (isTitle)
          return;
        if ($navEl.hasClass("title-large")) {
          if (els.indexOf(el) < 0)
            els.push(el);
          el.overflow = "visible";
          $navEl.find(".title-large-text").each(function(subNavEl) {
            els.push({
              el: subNavEl,
              transform: function transform(progress) {
                return "translateX(" + progress * 100 * inverter + "%)";
              }
            });
          });
          return;
        }
      }
      if (toLarge) {
        if (!fromLarge) {
          if ($navEl.hasClass("title-large")) {
            if (els.indexOf(el) < 0)
              els.push(el);
            el.opacity = 0;
          }
        }
        if (isLeft) {
          if (els.indexOf(el) < 0)
            els.push(el);
          el.opacity = function(progress) {
            return 1 - Math.pow(progress, 0.33);
          };
          $navEl.find(".back span").each(function(subNavEl) {
            els.push({
              el: subNavEl,
              "transform-origin": transformOrigin,
              transform: function transform(progress) {
                return "translateX(calc(" + progress + " * (var(--f7-navbarTitleLargeOffset) - var(--f7-navbarLeftTextOffset)))) translateY(calc(" + progress + " * (var(--f7-navbar-large-title-height) - var(--f7-navbar-large-title-padding-vertical) / 2))) scale(" + (1 + 1 * progress) + ")";
              }
            });
          });
          return;
        }
      }
      if (isBg) {
        if (els.indexOf(el) < 0)
          els.push(el);
        if (!fromLarge && !toLarge) {
          if (currentNavIsCollapsed) {
            if (currentNavIsLargeTransparent) {
              el.className = "ios-swipeback-navbar-bg-large";
            }
            el.transform = function(progress) {
              return "translateX(" + 100 * progress * inverter + "%) translateY(calc(-1 * var(--f7-navbar-large-title-height)))";
            };
          } else {
            el.transform = function(progress) {
              return "translateX(" + 100 * progress * inverter + "%)";
            };
          }
        }
        if (!fromLarge && toLarge) {
          el.className = "ios-swipeback-navbar-bg-large";
          el.transform = function(progress) {
            return "translateX(" + 100 * progress * inverter + "%) translateY(calc(-1 * " + (1 - progress) + " * var(--f7-navbar-large-title-height)))";
          };
        }
        if (fromLarge && toLarge) {
          el.transform = function(progress) {
            return "translateX(" + 100 * progress * inverter + "%)";
          };
        }
        if (fromLarge && !toLarge) {
          el.transform = function(progress) {
            return "translateX(" + 100 * progress * inverter + "%) translateY(calc(-" + progress + " * var(--f7-navbar-large-title-height)))";
          };
        }
        return;
      }
      if ($navEl.hasClass("title-large"))
        return;
      var isSliding = $navEl.hasClass("sliding") || $navEl.parents(".navbar-inner.sliding").length;
      if (els.indexOf(el) < 0)
        els.push(el);
      if (!isSubnavbar || isSubnavbar && !isSliding) {
        el.opacity = function(progress) {
          return 1 - Math.pow(progress, 0.33);
        };
      }
      if (isSliding) {
        var transformTarget = el;
        if (isLeft && activeNavBackIconText.length && params.iosAnimateNavbarBackIcon) {
          var textEl = {
            el: activeNavBackIconText[0]
          };
          transformTarget = textEl;
          els.push(textEl);
        }
        transformTarget.transform = function(progress) {
          var activeNavTranslate = progress * transformTarget.el.f7NavbarRightOffset;
          if (device.pixelRatio === 1)
            activeNavTranslate = Math.round(activeNavTranslate);
          if (isSubnavbar && currentNavIsLarge) {
            return "translate3d(" + activeNavTranslate + "px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)";
          }
          return "translate3d(" + activeNavTranslate + "px,0,0)";
        };
      }
    });
    $previousNavElements.each(function(navEl) {
      var $navEl = dom7_default(navEl);
      var isSubnavbar = $navEl.hasClass("subnavbar");
      var isLeft = $navEl.hasClass("left");
      var isTitle = $navEl.hasClass("title");
      var isBg = $navEl.hasClass("navbar-bg");
      if ((isTitle || isBg) && previousNavIsTransparent)
        return;
      var el = {
        el: navEl
      };
      if (toLarge) {
        if (isTitle)
          return;
        if (els.indexOf(el) < 0)
          els.push(el);
        if ($navEl.hasClass("title-large")) {
          el.opacity = 1;
          el.overflow = "visible";
          $navEl.find(".title-large-text").each(function(subNavEl) {
            els.push({
              el: subNavEl,
              "transform-origin": transformOriginTitleLarge,
              opacity: function opacity(progress) {
                return Math.pow(progress, 3);
              },
              transform: function transform(progress) {
                return "translateX(calc(" + (1 - progress) + " * (var(--f7-navbarLeftTextOffset) - var(--f7-navbarTitleLargeOffset)))) translateY(calc(" + (progress - 1) + " * var(--f7-navbar-large-title-height) + " + (1 - progress) + " * var(--f7-navbar-large-title-padding-vertical))) scale(" + (0.5 + progress * 0.5) + ")";
              }
            });
          });
          return;
        }
      }
      if (isBg) {
        if (els.indexOf(el) < 0)
          els.push(el);
        if (!fromLarge && !toLarge) {
          if (previousNavIsCollapsed) {
            if (previousNavIsLargeTransparent) {
              el.className = "ios-swipeback-navbar-bg-large";
            }
            el.transform = function(progress) {
              return "translateX(" + (-100 + 100 * progress) * inverter + "%) translateY(calc(-1 * var(--f7-navbar-large-title-height)))";
            };
          } else {
            el.transform = function(progress) {
              return "translateX(" + (-100 + 100 * progress) * inverter + "%)";
            };
          }
        }
        if (!fromLarge && toLarge) {
          el.transform = function(progress) {
            return "translateX(" + (-100 + 100 * progress) * inverter + "%) translateY(calc(-1 * " + (1 - progress) + " * var(--f7-navbar-large-title-height)))";
          };
        }
        if (fromLarge && !toLarge) {
          el.className = "ios-swipeback-navbar-bg-large";
          el.transform = function(progress) {
            return "translateX(" + (-100 + 100 * progress) * inverter + "%) translateY(calc(-" + progress + " * var(--f7-navbar-large-title-height)))";
          };
        }
        if (fromLarge && toLarge) {
          el.transform = function(progress) {
            return "translateX(" + (-100 + 100 * progress) * inverter + "%)";
          };
        }
        return;
      }
      if ($navEl.hasClass("title-large"))
        return;
      var isSliding = $navEl.hasClass("sliding") || $previousNavbarEl.children(".navbar-inner.sliding").length;
      if (els.indexOf(el) < 0)
        els.push(el);
      if (!isSubnavbar || isSubnavbar && !isSliding) {
        el.opacity = function(progress) {
          return Math.pow(progress, 3);
        };
      }
      if (isSliding) {
        var transformTarget = el;
        if (isLeft && previousNavBackIconText.length && params.iosAnimateNavbarBackIcon) {
          var textEl = {
            el: previousNavBackIconText[0]
          };
          transformTarget = textEl;
          els.push(textEl);
        }
        transformTarget.transform = function(progress) {
          var previousNavTranslate = transformTarget.el.f7NavbarLeftOffset * (1 - progress);
          if (device.pixelRatio === 1)
            previousNavTranslate = Math.round(previousNavTranslate);
          if (isSubnavbar && previousNavIsLarge) {
            return "translate3d(" + previousNavTranslate + "px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)";
          }
          return "translate3d(" + previousNavTranslate + "px,0,0)";
        };
      }
    });
    return els;
  }
  function setAnimatableNavElements(_temp) {
    var _ref = _temp === void 0 ? {} : _temp, progress = _ref.progress, reset = _ref.reset, transition = _ref.transition, reflow = _ref.reflow;
    var styles = ["overflow", "transform", "transform-origin", "opacity"];
    if (transition === true || transition === false) {
      for (var i = 0; i < animatableNavEls.length; i += 1) {
        var el = animatableNavEls[i];
        if (el && el.el) {
          if (transition === true)
            el.el.classList.add("navbar-page-transitioning");
          if (transition === false)
            el.el.classList.remove("navbar-page-transitioning");
        }
      }
    }
    if (reflow && animatableNavEls.length && animatableNavEls[0] && animatableNavEls[0].el) {
      animatableNavEls[0].el._clientLeft = animatableNavEls[0].el.clientLeft;
    }
    for (var _i = 0; _i < animatableNavEls.length; _i += 1) {
      var _el = animatableNavEls[_i];
      if (_el && _el.el) {
        if (_el.className && !_el.classNameSet && !reset) {
          _el.el.classList.add(_el.className);
          _el.classNameSet = true;
        }
        if (_el.className && reset) {
          _el.el.classList.remove(_el.className);
        }
        for (var j = 0; j < styles.length; j += 1) {
          var styleProp = styles[j];
          if (_el[styleProp]) {
            if (reset) {
              _el.el.style[styleProp] = "";
            } else if (typeof _el[styleProp] === "function") {
              _el.el.style[styleProp] = _el[styleProp](progress);
            } else {
              _el.el.style[styleProp] = _el[styleProp];
            }
          }
        }
      }
    }
  }
  function handleTouchStart(e) {
    var swipeBackEnabled = params[app.theme + "SwipeBack"];
    if (!allowViewTouchMove || !swipeBackEnabled || isTouched || app.swipeout && app.swipeout.el || !router.allowPageChange)
      return;
    if (dom7_default(e.target).closest(".range-slider, .calendar-months").length > 0)
      return;
    if (dom7_default(e.target).closest(".page-master, .page-master-detail").length > 0 && params.masterDetailBreakpoint > 0 && app.width >= params.masterDetailBreakpoint)
      return;
    isMoved = false;
    isTouched = true;
    isScrolling = void 0;
    touchesStart.x = e.type === "touchstart" ? e.targetTouches[0].pageX : e.pageX;
    touchesStart.y = e.type === "touchstart" ? e.targetTouches[0].pageY : e.pageY;
    touchStartTime = now();
    dynamicNavbar = router.dynamicNavbar;
  }
  function handleTouchMove(e) {
    if (!isTouched)
      return;
    var pageX = e.type === "touchmove" ? e.targetTouches[0].pageX : e.pageX;
    var pageY = e.type === "touchmove" ? e.targetTouches[0].pageY : e.pageY;
    if (typeof isScrolling === "undefined") {
      isScrolling = !!(isScrolling || Math.abs(pageY - touchesStart.y) > Math.abs(pageX - touchesStart.x)) || pageX < touchesStart.x && !app.rtl || pageX > touchesStart.x && app.rtl;
    }
    if (isScrolling || e.f7PreventSwipeBack || app.preventSwipeBack) {
      isTouched = false;
      return;
    }
    if (!isMoved) {
      var cancel = false;
      var target = dom7_default(e.target);
      var swipeout = target.closest(".swipeout");
      if (swipeout.length > 0) {
        if (!app.rtl && swipeout.find(".swipeout-actions-left").length > 0)
          cancel = true;
        if (app.rtl && swipeout.find(".swipeout-actions-right").length > 0)
          cancel = true;
      }
      $currentPageEl = target.closest(".page");
      if ($currentPageEl.hasClass("no-swipeback") || target.closest(".no-swipeback, .card-opened").length > 0)
        cancel = true;
      $previousPageEl = $el.find(".page-previous:not(.stacked)");
      if ($previousPageEl.length > 1) {
        $previousPageEl = $previousPageEl.eq($previousPageEl.length - 1);
      }
      var notFromBorder = touchesStart.x - $el.offset().left > paramsSwipeBackActiveArea;
      viewContainerWidth = $el.width();
      if (app.rtl) {
        notFromBorder = touchesStart.x < $el.offset().left - $el[0].scrollLeft + (viewContainerWidth - paramsSwipeBackActiveArea);
      } else {
        notFromBorder = touchesStart.x - $el.offset().left > paramsSwipeBackActiveArea;
      }
      if (notFromBorder)
        cancel = true;
      if ($previousPageEl.length === 0 || $currentPageEl.length === 0)
        cancel = true;
      if (cancel) {
        isTouched = false;
        return;
      }
      if (paramsSwipeBackAnimateShadow) {
        $pageShadowEl = $currentPageEl.find(".page-shadow-effect");
        if ($pageShadowEl.length === 0) {
          $pageShadowEl = dom7_default('<div class="page-shadow-effect"></div>');
          $currentPageEl.append($pageShadowEl);
        }
      }
      if (paramsSwipeBackAnimateOpacity) {
        $pageOpacityEl = $previousPageEl.find(".page-opacity-effect");
        if ($pageOpacityEl.length === 0) {
          $pageOpacityEl = dom7_default('<div class="page-opacity-effect"></div>');
          $previousPageEl.append($pageOpacityEl);
        }
      }
      if (dynamicNavbar) {
        $currentNavbarEl = $navbarsEl.find(".navbar-current:not(.stacked)");
        $previousNavbarEl = $navbarsEl.find(".navbar-previous:not(.stacked)");
        if ($previousNavbarEl.length > 1) {
          $previousNavbarEl = $previousNavbarEl.eq($previousNavbarEl.length - 1);
        }
        animatableNavEls = animatableNavElements($previousNavbarEl, $currentNavbarEl);
      }
      if (dom7_default(".sheet.modal-in").length > 0 && app.sheet) {
        app.sheet.close(dom7_default(".sheet.modal-in"));
      }
    }
    e.f7PreventSwipePanel = true;
    isMoved = true;
    app.preventSwipePanelBySwipeBack = true;
    e.preventDefault();
    var inverter = app.rtl ? -1 : 1;
    touchesDiff = (pageX - touchesStart.x - paramsSwipeBackThreshold) * inverter;
    if (touchesDiff < 0)
      touchesDiff = 0;
    var percentage = Math.min(Math.max(touchesDiff / viewContainerWidth, 0), 1);
    var callbackData = {
      percentage,
      progress: percentage,
      currentPageEl: $currentPageEl[0],
      previousPageEl: $previousPageEl[0],
      currentNavbarEl: $currentNavbarEl[0],
      previousNavbarEl: $previousNavbarEl[0]
    };
    $el.trigger("swipeback:move", callbackData);
    router.emit("swipebackMove", callbackData);
    var currentPageTranslate = touchesDiff * inverter;
    var previousPageTranslate = (touchesDiff / 5 - viewContainerWidth / 5) * inverter;
    if (!app.rtl) {
      currentPageTranslate = Math.min(currentPageTranslate, viewContainerWidth);
      previousPageTranslate = Math.min(previousPageTranslate, 0);
    } else {
      currentPageTranslate = Math.max(currentPageTranslate, -viewContainerWidth);
      previousPageTranslate = Math.max(previousPageTranslate, 0);
    }
    if (device.pixelRatio === 1) {
      currentPageTranslate = Math.round(currentPageTranslate);
      previousPageTranslate = Math.round(previousPageTranslate);
    }
    router.swipeBackActive = true;
    dom7_default([$currentPageEl[0], $previousPageEl[0]]).addClass("page-swipeback-active");
    $currentPageEl.transform("translate3d(" + currentPageTranslate + "px,0,0)");
    if (paramsSwipeBackAnimateShadow)
      $pageShadowEl[0].style.opacity = 1 - 1 * percentage;
    if (app.theme === "ios") {
      $previousPageEl.transform("translate3d(" + previousPageTranslate + "px,0,0)");
    }
    if (paramsSwipeBackAnimateOpacity)
      $pageOpacityEl[0].style.opacity = 1 - 1 * percentage;
    if (!dynamicNavbar)
      return;
    setAnimatableNavElements({
      progress: percentage
    });
  }
  function handleTouchEnd() {
    app.preventSwipePanelBySwipeBack = false;
    if (!isTouched || !isMoved) {
      isTouched = false;
      isMoved = false;
      return;
    }
    isTouched = false;
    isMoved = false;
    router.swipeBackActive = false;
    var $pages = dom7_default([$currentPageEl[0], $previousPageEl[0]]);
    $pages.removeClass("page-swipeback-active");
    if (touchesDiff === 0) {
      $pages.transform("");
      if ($pageShadowEl && $pageShadowEl.length > 0)
        $pageShadowEl.remove();
      if ($pageOpacityEl && $pageOpacityEl.length > 0)
        $pageOpacityEl.remove();
      if (dynamicNavbar) {
        setAnimatableNavElements({
          reset: true
        });
      }
      return;
    }
    var timeDiff = now() - touchStartTime;
    var pageChanged = false;
    if (timeDiff < 300 && touchesDiff > 10 || timeDiff >= 300 && touchesDiff > viewContainerWidth / 2) {
      $currentPageEl.removeClass("page-current").addClass("page-next" + (app.theme !== "ios" ? " page-next-on-right" : ""));
      $previousPageEl.removeClass("page-previous").addClass("page-current").removeAttr("aria-hidden");
      if ($pageShadowEl)
        $pageShadowEl[0].style.opacity = "";
      if ($pageOpacityEl)
        $pageOpacityEl[0].style.opacity = "";
      if (dynamicNavbar) {
        router.setNavbarPosition($currentNavbarEl, "next");
        router.setNavbarPosition($previousNavbarEl, "current", false);
      }
      pageChanged = true;
    }
    $pages.addClass("page-transitioning page-transitioning-swipeback");
    if (device.ios) {
      $currentPageEl[0]._clientLeft = $currentPageEl[0].clientLeft;
    }
    $pages.transform("");
    if (dynamicNavbar) {
      setAnimatableNavElements({
        progress: pageChanged ? 1 : 0,
        transition: true,
        reflow: !!device.ios
      });
    }
    allowViewTouchMove = false;
    router.allowPageChange = false;
    var callbackData = {
      currentPageEl: $currentPageEl[0],
      previousPageEl: $previousPageEl[0],
      currentNavbarEl: $currentNavbarEl[0],
      previousNavbarEl: $previousNavbarEl[0]
    };
    if (pageChanged) {
      router.currentRoute = $previousPageEl[0].f7Page.route;
      router.currentPage = $previousPageEl[0];
      router.pageCallback("beforeOut", $currentPageEl, $currentNavbarEl, "current", "next", {
        route: $currentPageEl[0].f7Page.route,
        swipeBack: true
      });
      router.pageCallback("beforeIn", $previousPageEl, $previousNavbarEl, "previous", "current", {
        route: $previousPageEl[0].f7Page.route,
        swipeBack: true
      }, $currentPageEl[0]);
      $el.trigger("swipeback:beforechange", callbackData);
      router.emit("swipebackBeforeChange", callbackData);
    } else {
      $el.trigger("swipeback:beforereset", callbackData);
      router.emit("swipebackBeforeReset", callbackData);
    }
    $currentPageEl.transitionEnd(function() {
      $pages.removeClass("page-transitioning page-transitioning-swipeback");
      if (dynamicNavbar) {
        setAnimatableNavElements({
          reset: true,
          transition: false
        });
      }
      allowViewTouchMove = true;
      router.allowPageChange = true;
      if (pageChanged) {
        if (router.history.length === 1) {
          router.history.unshift(router.url);
        }
        router.history.pop();
        router.saveHistory();
        if (params.browserHistory) {
          history_default.back();
        }
        router.pageCallback("afterOut", $currentPageEl, $currentNavbarEl, "current", "next", {
          route: $currentPageEl[0].f7Page.route,
          swipeBack: true
        });
        router.pageCallback("afterIn", $previousPageEl, $previousNavbarEl, "previous", "current", {
          route: $previousPageEl[0].f7Page.route,
          swipeBack: true
        });
        if (params.stackPages && router.initialPages.indexOf($currentPageEl[0]) >= 0) {
          $currentPageEl.addClass("stacked");
          if (dynamicNavbar) {
            $currentNavbarEl.addClass("stacked");
          }
        } else {
          router.pageCallback("beforeRemove", $currentPageEl, $currentNavbarEl, "next", {
            swipeBack: true
          });
          router.removePage($currentPageEl);
          if (dynamicNavbar) {
            router.removeNavbar($currentNavbarEl);
          }
        }
        $el.trigger("swipeback:afterchange", callbackData);
        router.emit("swipebackAfterChange", callbackData);
        router.emit("routeChanged", router.currentRoute, router.previousRoute, router);
        if (params.preloadPreviousPage) {
          router.back(router.history[router.history.length - 2], {
            preload: true
          });
        }
      } else {
        $el.trigger("swipeback:afterreset", callbackData);
        router.emit("swipebackAfterReset", callbackData);
      }
      if ($pageShadowEl && $pageShadowEl.length > 0)
        $pageShadowEl.remove();
      if ($pageOpacityEl && $pageOpacityEl.length > 0)
        $pageOpacityEl.remove();
    });
  }
  function attachEvents() {
    var passiveListener = app.touchEvents.start === "touchstart" && support2.passiveListener ? {
      passive: true,
      capture: false
    } : false;
    $el.on(app.touchEvents.start, handleTouchStart, passiveListener);
    app.on("touchmove:active", handleTouchMove);
    app.on("touchend:passive", handleTouchEnd);
  }
  function detachEvents() {
    var passiveListener = app.touchEvents.start === "touchstart" && support2.passiveListener ? {
      passive: true,
      capture: false
    } : false;
    $el.off(app.touchEvents.start, handleTouchStart, passiveListener);
    app.off("touchmove:active", handleTouchMove);
    app.off("touchend:passive", handleTouchEnd);
  }
  attachEvents();
  router.on("routerDestroy", detachEvents);
}
var swipe_back_default = SwipeBack;

// node_modules/framework7/esm/modules/router/redirect.js
function redirect(direction, route, options) {
  var router = this;
  var r = route.route.redirect;
  var method = direction === "forward" ? "navigate" : "back";
  if (options.initial && router.params.browserHistory) {
    options.replaceState = true;
    options.history = true;
  }
  function redirectResolve(redirectUrl2, redirectOptions) {
    if (redirectOptions === void 0) {
      redirectOptions = {};
    }
    router.allowPageChange = true;
    router[method](redirectUrl2, extend({}, options, redirectOptions));
  }
  function redirectReject() {
    router.allowPageChange = true;
  }
  if (typeof r === "function") {
    router.allowPageChange = false;
    var redirectUrl = r.call(router, {
      router,
      to: route,
      resolve: redirectResolve,
      reject: redirectReject,
      direction,
      app: router.app
    });
    if (redirectUrl && typeof redirectUrl === "string") {
      router.allowPageChange = true;
      return router[method](redirectUrl, options);
    }
    return router;
  }
  return router[method](r, options);
}

// node_modules/framework7/esm/modules/router/process-route-queue.js
function processQueue(router, routerQueue, routeQueue, to, from, resolve, _reject, direction) {
  var queue = [];
  if (Array.isArray(routeQueue)) {
    queue.push.apply(queue, routeQueue);
  } else if (routeQueue && typeof routeQueue === "function") {
    queue.push(routeQueue);
  }
  if (routerQueue) {
    if (Array.isArray(routerQueue)) {
      queue.push.apply(queue, routerQueue);
    } else {
      queue.push(routerQueue);
    }
  }
  function next() {
    if (queue.length === 0) {
      resolve();
      return;
    }
    var queueItem = queue.shift();
    queueItem.call(router, {
      router,
      to,
      from,
      resolve: function resolve2() {
        next();
      },
      reject: function reject() {
        _reject();
      },
      direction,
      app: router.app
    });
  }
  next();
}
function processRouteQueue(to, from, resolve, reject, direction) {
  var router = this;
  function enterNextRoute() {
    if (to && to.route && (router.params.routesBeforeEnter || to.route.beforeEnter)) {
      router.allowPageChange = false;
      processQueue(router, router.params.routesBeforeEnter, to.route.beforeEnter, to, from, function() {
        router.allowPageChange = true;
        resolve();
      }, function() {
        reject();
      }, direction);
    } else {
      resolve();
    }
  }
  function leaveCurrentRoute() {
    if (from && from.route && (router.params.routesBeforeLeave || from.route.beforeLeave)) {
      router.allowPageChange = false;
      processQueue(router, router.params.routesBeforeLeave, from.route.beforeLeave, to, from, function() {
        router.allowPageChange = true;
        enterNextRoute();
      }, function() {
        reject();
      }, direction);
    } else {
      enterNextRoute();
    }
  }
  leaveCurrentRoute();
}

// node_modules/framework7/esm/modules/router/app-router-check.js
function appRouterCheck(router, method) {
  if (!router.view) {
    throw new Error("Framework7: it is not allowed to use router methods on global app router. Use router methods only on related View, e.g. app.views.main.router." + method + "(...)");
  }
}

// node_modules/framework7/esm/modules/router/async-component.js
function asyncComponent(router, component, resolve, reject) {
  function resolvePromise(componentPromise) {
    componentPromise.then(function(c) {
      resolve({
        component: c.default || c._default || c
      });
    }).catch(function(err) {
      reject();
      throw new Error(err);
    });
  }
  if (component instanceof Promise) {
    resolvePromise(component);
    return;
  }
  var asyncComponentResult = component.call(router);
  if (asyncComponentResult instanceof Promise) {
    resolvePromise(asyncComponentResult);
  } else {
    resolve({
      component: asyncComponentResult
    });
  }
}

// node_modules/framework7/esm/modules/router/navigate.js
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function refreshPage() {
  var router = this;
  appRouterCheck(router, "refreshPage");
  return router.navigate(router.currentRoute.url, {
    ignoreCache: true,
    reloadCurrent: true
  });
}
function forward(router, el, forwardOptions) {
  if (forwardOptions === void 0) {
    forwardOptions = {};
  }
  var document = getDocument();
  var $el = dom7_default(el);
  var app = router.app;
  var view = router.view;
  var options = extend(false, {
    animate: router.params.animate,
    browserHistory: true,
    replaceState: false,
    history: true,
    reloadCurrent: router.params.reloadPages,
    reloadPrevious: false,
    reloadAll: false,
    clearPreviousHistory: false,
    reloadDetail: router.params.reloadDetail,
    on: {}
  }, forwardOptions);
  var masterDetailEnabled = router.params.masterDetailBreakpoint > 0;
  var isMaster = masterDetailEnabled && options.route && options.route.route && (options.route.route.master === true || typeof options.route.route.master === "function" && options.route.route.master(app, router));
  var masterPageEl;
  var otherDetailPageEl;
  var detailsInBetweenRemoved = 0;
  var currentRouteIsModal = router.currentRoute.modal;
  var modalType;
  if (!currentRouteIsModal) {
    "popup popover sheet loginScreen actions customModal panel".split(" ").forEach(function(modalLoadProp) {
      if (router.currentRoute && router.currentRoute.route && router.currentRoute.route[modalLoadProp]) {
        currentRouteIsModal = true;
        modalType = modalLoadProp;
      }
    });
  }
  if (currentRouteIsModal) {
    var modalToClose = router.currentRoute.modal || router.currentRoute.route.modalInstance || app[modalType].get();
    var previousUrl = router.history[router.history.length - 2];
    var previousRoute = router.findMatchingRoute(previousUrl);
    if (!previousRoute && previousUrl) {
      previousRoute = {
        url: previousUrl,
        path: previousUrl.split("?")[0],
        query: parseUrlQuery(previousUrl),
        route: {
          path: previousUrl.split("?")[0],
          url: previousUrl
        }
      };
    }
    router.modalRemove(modalToClose);
  }
  var dynamicNavbar = router.dynamicNavbar;
  var $viewEl = router.$el;
  var $newPage = $el;
  var reload = options.reloadPrevious || options.reloadCurrent || options.reloadAll;
  var $oldPage;
  var $navbarsEl;
  var $newNavbarEl;
  var $oldNavbarEl;
  router.allowPageChange = false;
  if ($newPage.length === 0) {
    router.allowPageChange = true;
    return router;
  }
  if ($newPage.length) {
    router.removeThemeElements($newPage);
  }
  if (dynamicNavbar) {
    $newNavbarEl = $newPage.children(".navbar");
    $navbarsEl = router.$navbarsEl;
    if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {
      $newNavbarEl = $newPage[0].f7Page.$navbarEl;
    }
  }
  if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {
    options.route.route.keepAliveData = {
      pageEl: $el[0]
    };
  }
  var $pagesInView = $viewEl.children(".page:not(.stacked)").filter(function(pageInView) {
    return pageInView !== $newPage[0];
  });
  var $navbarsInView;
  if (dynamicNavbar) {
    $navbarsInView = $navbarsEl.children(".navbar:not(.stacked)").filter(function(navbarInView) {
      return navbarInView !== $newNavbarEl[0];
    });
  }
  if (options.reloadPrevious && $pagesInView.length < 2) {
    router.allowPageChange = true;
    return router;
  }
  var isDetail;
  var reloadDetail;
  var isDetailRoot;
  if (masterDetailEnabled && !options.reloadAll) {
    for (var i = 0; i < $pagesInView.length; i += 1) {
      if (!masterPageEl && $pagesInView[i].classList.contains("page-master")) {
        masterPageEl = $pagesInView[i];
        continue;
      }
    }
    isDetail = !isMaster && masterPageEl;
    if (isDetail) {
      if (masterPageEl) {
        for (var _i = 0; _i < $pagesInView.length; _i += 1) {
          if ($pagesInView[_i].classList.contains("page-master-detail")) {
            otherDetailPageEl = $pagesInView[_i];
            continue;
          }
        }
      }
    }
    reloadDetail = isDetail && options.reloadDetail && app.width >= router.params.masterDetailBreakpoint && masterPageEl;
  }
  if (isDetail) {
    isDetailRoot = !otherDetailPageEl || reloadDetail || options.reloadAll || options.reloadCurrent;
  }
  var newPagePosition = "next";
  if (options.reloadCurrent || options.reloadAll || reloadDetail) {
    newPagePosition = "current";
  } else if (options.reloadPrevious) {
    newPagePosition = "previous";
  }
  $newPage.removeClass("page-previous page-current page-next").addClass("page-" + newPagePosition + (isMaster ? " page-master" : "") + (isDetail ? " page-master-detail" : "") + (isDetailRoot ? " page-master-detail-root" : "")).removeClass("stacked").trigger("page:unstack").trigger("page:position", {
    position: newPagePosition
  });
  router.emit("pageUnstack", $newPage[0]);
  router.emit("pagePosition", $newPage[0], newPagePosition);
  if (isMaster || isDetail) {
    $newPage.trigger("page:role", {
      role: isMaster ? "master" : "detail",
      root: !!isDetailRoot
    });
    router.emit("pageRole", $newPage[0], {
      role: isMaster ? "master" : "detail",
      detailRoot: !!isDetailRoot
    });
  }
  if (dynamicNavbar && $newNavbarEl.length) {
    $newNavbarEl.removeClass("navbar-previous navbar-current navbar-next").addClass("navbar-" + newPagePosition + (isMaster ? " navbar-master" : "") + (isDetail ? " navbar-master-detail" : "") + (isDetailRoot ? " navbar-master-detail-root" : "")).removeClass("stacked");
    $newNavbarEl.trigger("navbar:position", {
      position: newPagePosition
    });
    router.emit("navbarPosition", $newNavbarEl[0], newPagePosition);
    if (isMaster || isDetail) {
      router.emit("navbarRole", $newNavbarEl[0], {
        role: isMaster ? "master" : "detail",
        detailRoot: !!isDetailRoot
      });
    }
  }
  if (options.reloadCurrent || reloadDetail) {
    if (reloadDetail) {
      $oldPage = $pagesInView.filter(function(pageEl) {
        return !pageEl.classList.contains("page-master");
      });
      if (dynamicNavbar) {
        $oldNavbarEl = dom7_default($oldPage.map(function(pageEl) {
          return app.navbar.getElByPage(pageEl);
        }));
      }
      if ($oldPage.length > 1 && masterPageEl) {
        detailsInBetweenRemoved = $oldPage.length - 1;
        dom7_default(masterPageEl).removeClass("page-master-stacked").trigger("page:masterunstack");
        router.emit("pageMasterUnstack", masterPageEl);
        if (dynamicNavbar) {
          dom7_default(app.navbar.getElByPage(masterPageEl)).removeClass("navbar-master-stacked");
          router.emit("navbarMasterUnstack", app.navbar.getElByPage(masterPageEl));
        }
      }
    } else {
      $oldPage = $pagesInView.eq($pagesInView.length - 1);
      if (dynamicNavbar) {
        $oldNavbarEl = dom7_default(app.navbar.getElByPage($oldPage));
      }
    }
  } else if (options.reloadPrevious) {
    $oldPage = $pagesInView.eq($pagesInView.length - 2);
    if (dynamicNavbar) {
      $oldNavbarEl = dom7_default(app.navbar.getElByPage($oldPage));
    }
  } else if (options.reloadAll) {
    $oldPage = $pagesInView.filter(function(pageEl) {
      return pageEl !== $newPage[0];
    });
    if (dynamicNavbar) {
      $oldNavbarEl = $navbarsInView.filter(function(navbarEl) {
        return navbarEl !== $newNavbarEl[0];
      });
    }
  } else {
    var removedPageEls = [];
    var removedNavbarEls = [];
    if ($pagesInView.length > 1) {
      var _i2 = 0;
      for (_i2 = 0; _i2 < $pagesInView.length - 1; _i2 += 1) {
        if (masterPageEl && $pagesInView[_i2] === masterPageEl) {
          $pagesInView.eq(_i2).addClass("page-master-stacked");
          $pagesInView.eq(_i2).trigger("page:masterstack");
          router.emit("pageMasterStack", $pagesInView[_i2]);
          if (dynamicNavbar) {
            dom7_default(app.navbar.getElByPage(masterPageEl)).addClass("navbar-master-stacked");
            router.emit("navbarMasterStack", app.navbar.getElByPage(masterPageEl));
          }
          continue;
        }
        var oldNavbarEl = app.navbar.getElByPage($pagesInView.eq(_i2));
        if (router.params.stackPages) {
          $pagesInView.eq(_i2).addClass("stacked");
          $pagesInView.eq(_i2).trigger("page:stack");
          router.emit("pageStack", $pagesInView[_i2]);
          if (dynamicNavbar) {
            dom7_default(oldNavbarEl).addClass("stacked");
          }
        } else {
          removedPageEls.push($pagesInView[_i2]);
          router.pageCallback("beforeRemove", $pagesInView[_i2], $navbarsInView && $navbarsInView[_i2], "previous", void 0, options);
          router.removePage($pagesInView[_i2]);
          if (dynamicNavbar && oldNavbarEl) {
            removedNavbarEls.push(oldNavbarEl);
            router.removeNavbar(oldNavbarEl);
          }
        }
      }
    }
    $oldPage = $viewEl.children(".page:not(.stacked)").filter(function(pageEl) {
      return pageEl !== $newPage[0] && removedPageEls.indexOf(pageEl) < 0;
    });
    if (dynamicNavbar) {
      $oldNavbarEl = $navbarsEl.children(".navbar:not(.stacked)").filter(function(navbarEl) {
        return navbarEl !== $newNavbarEl[0] && removedNavbarEls.indexOf(removedNavbarEls) < 0;
      });
    }
    removedPageEls = [];
    removedNavbarEls = [];
  }
  if (isDetail && !options.reloadAll) {
    if ($oldPage.length > 1 || reloadDetail) {
      $oldPage = $oldPage.filter(function(pageEl) {
        return !pageEl.classList.contains("page-master");
      });
    }
    if ($oldNavbarEl && ($oldNavbarEl.length > 1 || reloadDetail)) {
      $oldNavbarEl = $oldNavbarEl.filter(function(navbarEl) {
        return !navbarEl.classList.contains("navbar-master");
      });
    }
  }
  if (router.params.browserHistory && (options.browserHistory || options.replaceState) && !options.reloadPrevious) {
    var browserHistoryRoot = router.params.browserHistoryRoot || "";
    history_default[options.reloadCurrent || reloadDetail && otherDetailPageEl || options.reloadAll || options.replaceState ? "replace" : "push"](view.id, {
      url: options.route.url
    }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);
  }
  if (!options.reloadPrevious) {
    router.currentPageEl = $newPage[0];
    if (dynamicNavbar && $newNavbarEl.length) {
      router.currentNavbarEl = $newNavbarEl[0];
    } else {
      delete router.currentNavbarEl;
    }
    router.currentRoute = options.route;
  }
  var url = options.route.url;
  if (options.history) {
    if (((options.reloadCurrent || reloadDetail && otherDetailPageEl) && router.history.length) > 0 || options.replaceState) {
      if (reloadDetail && detailsInBetweenRemoved > 0) {
        router.history = router.history.slice(0, router.history.length - detailsInBetweenRemoved);
      }
      router.history[router.history.length - (options.reloadPrevious ? 2 : 1)] = url;
    } else if (options.reloadPrevious) {
      router.history[router.history.length - 2] = url;
    } else if (options.reloadAll) {
      router.history = [url];
    } else {
      router.history.push(url);
    }
  }
  router.saveHistory();
  var newPageInDom = $newPage.parents(document).length > 0;
  var f7Component = $newPage[0].f7Component;
  if (options.reloadPrevious) {
    if (f7Component && !newPageInDom) {
      f7Component.mount(function(componentEl) {
        dom7_default(componentEl).insertBefore($oldPage);
      });
    } else {
      $newPage.insertBefore($oldPage);
    }
    if (dynamicNavbar && $newNavbarEl.length) {
      if ($newNavbarEl.find(".title-large").length) {
        $newNavbarEl.addClass("navbar-large");
      }
      if ($oldNavbarEl.length) {
        $newNavbarEl.insertBefore($oldNavbarEl);
      } else {
        if (!router.$navbarsEl.parents(document).length) {
          router.$el.prepend(router.$navbarsEl);
        }
        $navbarsEl.append($newNavbarEl);
      }
    }
  } else {
    if ($oldPage.next(".page")[0] !== $newPage[0]) {
      if (f7Component && !newPageInDom) {
        f7Component.mount(function(componentEl) {
          $viewEl.append(componentEl);
        });
      } else {
        $viewEl.append($newPage[0]);
      }
    }
    if (dynamicNavbar && $newNavbarEl.length) {
      if ($newNavbarEl.find(".title-large").length) {
        $newNavbarEl.addClass("navbar-large");
      }
      if (!router.$navbarsEl.parents(document).length) {
        router.$el.prepend(router.$navbarsEl);
      }
      $navbarsEl.append($newNavbarEl[0]);
    }
  }
  if (!newPageInDom) {
    router.pageCallback("mounted", $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : "current", options, $oldPage);
  } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {
    $newPage[0].f7PageMounted = true;
    router.pageCallback("mounted", $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : "current", options, $oldPage);
  }
  if ((options.reloadCurrent || reloadDetail) && $oldPage.length > 0) {
    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {
      $oldPage.addClass("stacked");
      $oldPage.trigger("page:stack");
      router.emit("pageStack", $oldPage[0]);
      if (dynamicNavbar) {
        $oldNavbarEl.addClass("stacked");
      }
    } else {
      router.pageCallback("beforeOut", $oldPage, $oldNavbarEl, "current", void 0, options);
      router.pageCallback("afterOut", $oldPage, $oldNavbarEl, "current", void 0, options);
      router.pageCallback("beforeRemove", $oldPage, $oldNavbarEl, "current", void 0, options);
      router.removePage($oldPage);
      if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {
        router.removeNavbar($oldNavbarEl);
      }
    }
  } else if (options.reloadAll) {
    $oldPage.each(function(pageEl, index) {
      var $oldPageEl = dom7_default(pageEl);
      var $oldNavbarElEl = dom7_default(app.navbar.getElByPage($oldPageEl));
      if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {
        $oldPageEl.addClass("stacked");
        $oldPageEl.trigger("page:stack");
        router.emit("pageStack", $oldPageEl[0]);
        if (dynamicNavbar) {
          $oldNavbarElEl.addClass("stacked");
        }
      } else {
        if ($oldPageEl.hasClass("page-current")) {
          router.pageCallback("beforeOut", $oldPage, $oldNavbarEl, "current", void 0, options);
          router.pageCallback("afterOut", $oldPage, $oldNavbarEl, "current", void 0, options);
        }
        router.pageCallback("beforeRemove", $oldPageEl, $oldNavbarEl && $oldNavbarEl.eq(index), "previous", void 0, options);
        router.removePage($oldPageEl);
        if (dynamicNavbar && $oldNavbarElEl.length) {
          router.removeNavbar($oldNavbarElEl);
        }
      }
    });
  } else if (options.reloadPrevious) {
    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {
      $oldPage.addClass("stacked");
      $oldPage.trigger("page:stack");
      router.emit("pageStack", $oldPage[0]);
      if (dynamicNavbar) {
        $oldNavbarEl.addClass("stacked");
      }
    } else {
      router.pageCallback("beforeRemove", $oldPage, $oldNavbarEl, "previous", void 0, options);
      router.removePage($oldPage);
      if (dynamicNavbar && $oldNavbarEl && $oldNavbarEl.length) {
        router.removeNavbar($oldNavbarEl);
      }
    }
  }
  if (options.route.route.tab) {
    router.tabLoad(options.route.route.tab, extend({}, options, {
      history: false,
      browserHistory: false
    }));
  }
  if (masterDetailEnabled) {
    view.checkMasterDetailBreakpoint();
  }
  router.pageCallback("init", $newPage, $newNavbarEl, newPagePosition, reload ? newPagePosition : "current", options, $oldPage);
  if (options.reloadCurrent || options.reloadAll || reloadDetail) {
    router.allowPageChange = true;
    router.pageCallback("beforeIn", $newPage, $newNavbarEl, newPagePosition, "current", options);
    $newPage.removeAttr("aria-hidden");
    if (dynamicNavbar && $newNavbarEl) {
      $newNavbarEl.removeAttr("aria-hidden");
    }
    router.pageCallback("afterIn", $newPage, $newNavbarEl, newPagePosition, "current", options);
    if (options.reloadCurrent && options.clearPreviousHistory)
      router.clearPreviousHistory();
    if (reloadDetail) {
      router.setPagePosition(dom7_default(masterPageEl), "previous");
      if (masterPageEl.f7Page && masterPageEl.f7Page.navbarEl) {
        router.setNavbarPosition(dom7_default(masterPageEl.f7Page.navbarEl), "previous");
      }
    }
    return router;
  }
  if (options.reloadPrevious) {
    router.allowPageChange = true;
    return router;
  }
  router.pageCallback("beforeOut", $oldPage, $oldNavbarEl, "current", "previous", options);
  router.pageCallback("beforeIn", $newPage, $newNavbarEl, "next", "current", options);
  function afterAnimation() {
    router.setPagePosition($newPage, "current", false);
    router.setPagePosition($oldPage, "previous", !$oldPage.hasClass("page-master"));
    if (dynamicNavbar) {
      router.setNavbarPosition($newNavbarEl, "current", false);
      router.setNavbarPosition($oldNavbarEl, "previous", !$oldNavbarEl.hasClass("navbar-master"));
    }
    router.allowPageChange = true;
    router.pageCallback("afterOut", $oldPage, $oldNavbarEl, "current", "previous", options);
    router.pageCallback("afterIn", $newPage, $newNavbarEl, "next", "current", options);
    var keepOldPage = (router.params.preloadPreviousPage || router.params[app.theme + "SwipeBack"]) && !isMaster;
    if (!keepOldPage) {
      if ($newPage.hasClass("smart-select-page") || $newPage.hasClass("photo-browser-page") || $newPage.hasClass("autocomplete-page") || $newPage.hasClass("color-picker-page")) {
        keepOldPage = true;
      }
    }
    if (!keepOldPage) {
      if (router.params.stackPages) {
        $oldPage.addClass("stacked");
        $oldPage.trigger("page:stack");
        router.emit("pageStack", $oldPage[0]);
        if (dynamicNavbar) {
          $oldNavbarEl.addClass("stacked");
        }
      } else if (!($newPage.attr("data-name") && $newPage.attr("data-name") === "smart-select-page")) {
        router.pageCallback("beforeRemove", $oldPage, $oldNavbarEl, "previous", void 0, options);
        router.removePage($oldPage);
        if (dynamicNavbar && $oldNavbarEl.length) {
          router.removeNavbar($oldNavbarEl);
        }
      }
    }
    if (options.clearPreviousHistory)
      router.clearPreviousHistory();
    router.emit("routeChanged", router.currentRoute, router.previousRoute, router);
    if (router.params.browserHistory) {
      history_default.clearRouterQueue();
    }
  }
  function setPositionClasses() {
    router.setPagePosition($oldPage, "current", false);
    router.setPagePosition($newPage, "next", false);
    if (dynamicNavbar) {
      router.setNavbarPosition($oldNavbarEl, "current", false);
      router.setNavbarPosition($newNavbarEl, "next", false);
    }
  }
  if (options.animate && !(isMaster && app.width >= router.params.masterDetailBreakpoint)) {
    var delay = router.params[router.app.theme + "PageLoadDelay"];
    var transition = router.params.transition;
    if (options.transition)
      transition = options.transition;
    if (!transition && router.currentRoute && router.currentRoute.route) {
      transition = router.currentRoute.route.transition;
    }
    if (!transition && router.currentRoute && router.currentRoute.route.options) {
      transition = router.currentRoute.route.options.transition;
    }
    if (transition) {
      $newPage[0].f7PageTransition = transition;
    }
    if (delay) {
      setTimeout(function() {
        setPositionClasses();
        router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, "forward", transition, function() {
          afterAnimation();
        });
      }, delay);
    } else {
      setPositionClasses();
      router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, "forward", transition, function() {
        afterAnimation();
      });
    }
  } else {
    afterAnimation();
  }
  return router;
}
function load(router, loadParams, loadOptions, ignorePageChange) {
  if (loadParams === void 0) {
    loadParams = {};
  }
  if (loadOptions === void 0) {
    loadOptions = {};
  }
  if (!router.allowPageChange && !ignorePageChange)
    return router;
  var params = loadParams;
  var options = loadOptions;
  var url = params.url, content = params.content, el = params.el, pageName = params.pageName, component = params.component, componentUrl = params.componentUrl;
  if (!options.reloadCurrent && options.route && options.route.route && options.route.route.parentPath && router.currentRoute.route && router.currentRoute.route.parentPath === options.route.route.parentPath) {
    if (options.route.url === router.url) {
      router.allowPageChange = true;
      return false;
    }
    var sameParams = Object.keys(options.route.params).length === Object.keys(router.currentRoute.params).length;
    if (sameParams) {
      Object.keys(options.route.params).forEach(function(paramName) {
        if (!(paramName in router.currentRoute.params) || router.currentRoute.params[paramName] !== options.route.params[paramName]) {
          sameParams = false;
        }
      });
    }
    if (sameParams) {
      if (options.route.route.tab) {
        return router.tabLoad(options.route.route.tab, options);
      }
      return false;
    }
    if (!sameParams && options.route.route.tab && router.currentRoute.route.tab && router.currentRoute.parentPath === options.route.parentPath) {
      return router.tabLoad(options.route.route.tab, options);
    }
  }
  if (options.route && options.route.url && router.url === options.route.url && !(options.reloadCurrent || options.reloadPrevious) && !router.params.allowDuplicateUrls) {
    router.allowPageChange = true;
    return false;
  }
  if (!options.route && url) {
    options.route = router.parseRouteUrl(url);
    extend(options.route, {
      route: {
        url,
        path: url
      }
    });
  }
  function resolve(pageEl, newOptions) {
    return forward(router, pageEl, extend(options, newOptions));
  }
  function reject() {
    router.allowPageChange = true;
    return router;
  }
  if (url || componentUrl || component) {
    router.allowPageChange = false;
  }
  if (content) {
    forward(router, router.getPageEl(content), options);
  } else if (el) {
    forward(router, router.getPageEl(el), options);
  } else if (pageName) {
    forward(router, router.$el.children('.page[data-name="' + pageName + '"]').eq(0), options);
  } else if (component || componentUrl) {
    try {
      router.pageComponentLoader({
        routerEl: router.el,
        component,
        componentUrl,
        options,
        resolve,
        reject
      });
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (url) {
    if (router.xhrAbortController) {
      router.xhrAbortController.abort();
      router.xhrAbortController = false;
    }
    router.xhrRequest(url, options).then(function(pageContent) {
      forward(router, router.getPageEl(pageContent), options);
    }).catch(function() {
      router.allowPageChange = true;
    });
  }
  return router;
}
function openIn(router, url, options) {
  var navigateOptions = {
    url,
    route: {
      path: url,
      options: _extends3({}, options, {
        openIn: void 0
      })
    }
  };
  var params = _extends3({}, options);
  if (options.openIn === "popup") {
    params.content = '<div class="popup popup-router-open-in" data-url="' + url + '"><div class="view view-init" data-links-view="' + router.view.selector + '" data-url="' + url + '" data-ignore-open-in="true"></div></div>';
    navigateOptions.route.popup = params;
  }
  if (options.openIn === "loginScreen") {
    params.content = '<div class="login-screen login-screen-router-open-in" data-url="' + url + '"><div class="view view-init" data-links-view="' + router.view.selector + '" data-url="' + url + '" data-ignore-open-in="true"></div></div>';
    navigateOptions.route.loginScreen = params;
  }
  if (options.openIn === "sheet") {
    params.content = '<div class="sheet-modal sheet-modal-router-open-in" data-url="' + url + '"><div class="sheet-modal-inner"><div class="view view-init" data-links-view="' + router.view.selector + '" data-url="' + url + '" data-ignore-open-in="true"></div></div></div>';
    navigateOptions.route.sheet = params;
  }
  if (options.openIn === "popover") {
    params.targetEl = options.clickedEl || options.targetEl;
    params.content = '<div class="popover popover-router-open-in" data-url="' + url + '"><div class="popover-inner"><div class="view view-init" data-links-view="' + router.view.selector + '" data-url="' + url + '" data-ignore-open-in="true"></div></div></div>';
    navigateOptions.route.popover = params;
  }
  if (options.openIn.indexOf("panel") >= 0) {
    var parts = options.openIn.split(":");
    var side = parts[1] || "left";
    var effect = parts[2] || "cover";
    params.targetEl = options.clickedEl || options.targetEl;
    params.content = '<div class="panel panel-router-open-in panel-' + side + " panel-" + effect + '" data-url="' + url + '"><div class="view view-init" data-links-view="' + router.view.selector + '" data-url="' + url + '" data-ignore-open-in="true"></div></div>';
    navigateOptions.route.panel = params;
  }
  return router.navigate(navigateOptions);
}
function navigate(navigateParams, navigateOptions) {
  if (navigateOptions === void 0) {
    navigateOptions = {};
  }
  var router = this;
  if (router.swipeBackActive)
    return router;
  var url;
  var createRoute;
  var name;
  var path;
  var query;
  var params;
  var route;
  if (typeof navigateParams === "string") {
    url = navigateParams;
  } else {
    url = navigateParams.url;
    createRoute = navigateParams.route;
    name = navigateParams.name;
    path = navigateParams.path;
    query = navigateParams.query;
    params = navigateParams.params;
  }
  if (name || path) {
    url = router.generateUrl({
      path,
      name,
      params,
      query
    });
    if (url) {
      return router.navigate(url, navigateOptions);
    }
    return router;
  }
  var app = router.app;
  appRouterCheck(router, "navigate");
  if (url === "#" || url === "") {
    return router;
  }
  var navigateUrl = url.replace("./", "");
  if (navigateUrl[0] !== "/" && navigateUrl.indexOf("#") !== 0) {
    var currentPath = router.currentRoute.parentPath || router.currentRoute.path;
    navigateUrl = ((currentPath ? currentPath + "/" : "/") + navigateUrl).replace("///", "/").replace("//", "/");
  }
  if (createRoute) {
    route = extend(router.parseRouteUrl(navigateUrl), {
      route: extend({}, createRoute)
    });
  } else {
    route = router.findMatchingRoute(navigateUrl);
  }
  if (!route) {
    return router;
  }
  if (route.route && route.route.viewName) {
    var anotherViewName = route.route.viewName;
    var anotherView = app.views[anotherViewName];
    if (!anotherView) {
      throw new Error('Framework7: There is no View with "' + anotherViewName + '" name that was specified in this route');
    }
    if (anotherView !== router.view) {
      return anotherView.router.navigate(navigateParams, navigateOptions);
    }
  }
  if (route.route.redirect) {
    return redirect.call(router, "forward", route, navigateOptions);
  }
  var options = {};
  if (route.route.options) {
    extend(options, route.route.options, navigateOptions);
  } else {
    extend(options, navigateOptions);
  }
  if (options.openIn && (!router.params.ignoreOpenIn || router.params.ignoreOpenIn && router.history.length > 0)) {
    return openIn(router, navigateUrl, options);
  }
  options.route = route;
  function resolve() {
    var routerLoaded = false;
    "popup popover sheet loginScreen actions customModal panel".split(" ").forEach(function(modalLoadProp) {
      if (route.route[modalLoadProp] && !routerLoaded) {
        routerLoaded = true;
        router.modalLoad(modalLoadProp, route, options, "forward");
      }
    });
    if (route.route.keepAlive && route.route.keepAliveData) {
      load(router, {
        el: route.route.keepAliveData.pageEl
      }, options, false);
      routerLoaded = true;
    }
    "url content component pageName el componentUrl".split(" ").forEach(function(pageLoadProp) {
      if (route.route[pageLoadProp] && !routerLoaded) {
        var _load;
        routerLoaded = true;
        load(router, (_load = {}, _load[pageLoadProp] = route.route[pageLoadProp], _load), options, false);
      }
    });
    if (routerLoaded)
      return;
    function asyncResolve(resolveParams, resolveOptions) {
      router.allowPageChange = false;
      var resolvedAsModal = false;
      "popup popover sheet loginScreen actions customModal panel".split(" ").forEach(function(modalLoadProp) {
        if (resolveParams[modalLoadProp]) {
          resolvedAsModal = true;
          var modalRoute = extend({}, route, {
            route: resolveParams
          });
          router.allowPageChange = true;
          router.modalLoad(modalLoadProp, modalRoute, extend(options, resolveOptions), "forward");
        }
      });
      if (resolvedAsModal)
        return;
      load(router, resolveParams, extend(options, resolveOptions), true);
    }
    function asyncReject() {
      router.allowPageChange = true;
    }
    if (route.route.async) {
      router.allowPageChange = false;
      route.route.async.call(router, {
        router,
        to: options.route,
        from: router.currentRoute,
        resolve: asyncResolve,
        reject: asyncReject,
        direction: "forward",
        app
      });
    }
    if (route.route.asyncComponent) {
      asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);
    }
  }
  function reject() {
    router.allowPageChange = true;
  }
  if (router.params.masterDetailBreakpoint > 0 && route.route.masterRoute) {
    var preloadMaster = true;
    var masterLoaded = false;
    if (router.currentRoute && router.currentRoute.route) {
      if ((router.currentRoute.route.master === true || typeof router.currentRoute.route.master === "function" && router.currentRoute.route.master(app, router)) && (router.currentRoute.route === route.route.masterRoute || router.currentRoute.route.path === route.route.masterRoute.path)) {
        preloadMaster = false;
      }
      if (router.currentRoute.route.masterRoute && (router.currentRoute.route.masterRoute === route.route.masterRoute || router.currentRoute.route.masterRoute.path === route.route.masterRoute.path)) {
        preloadMaster = false;
        masterLoaded = true;
      }
    }
    if (preloadMaster || masterLoaded && navigateOptions.reloadAll) {
      router.navigate({
        path: route.route.masterRoute.path,
        params: route.params || {}
      }, {
        animate: false,
        reloadAll: navigateOptions.reloadAll,
        reloadCurrent: navigateOptions.reloadCurrent,
        reloadPrevious: navigateOptions.reloadPrevious,
        browserHistory: !navigateOptions.initial,
        history: !navigateOptions.initial,
        once: {
          pageAfterIn: function pageAfterIn() {
            router.navigate(navigateParams, extend({}, navigateOptions, {
              animate: false,
              reloadAll: false,
              reloadCurrent: false,
              reloadPrevious: false,
              history: !navigateOptions.initial,
              browserHistory: !navigateOptions.initial
            }));
          }
        }
      });
      return router;
    }
  }
  processRouteQueue.call(router, route, router.currentRoute, function() {
    if (route.route.modules) {
      app.loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules]).then(function() {
        resolve();
      }).catch(function() {
        reject();
      });
    } else {
      resolve();
    }
  }, function() {
    reject();
  }, "forward");
  return router;
}

// node_modules/framework7/esm/modules/router/tab.js
function tabLoad(tabRoute, loadOptions) {
  if (loadOptions === void 0) {
    loadOptions = {};
  }
  var router = this;
  var options = extend({
    animate: router.params.animate,
    browserHistory: true,
    history: true,
    parentPageEl: null,
    preload: false,
    on: {}
  }, loadOptions);
  var currentRoute;
  var previousRoute;
  if (options.route) {
    if (!options.preload && options.route !== router.currentRoute) {
      previousRoute = router.previousRoute;
      router.currentRoute = options.route;
    }
    if (options.preload) {
      currentRoute = options.route;
      previousRoute = router.currentRoute;
    } else {
      currentRoute = router.currentRoute;
      if (!previousRoute)
        previousRoute = router.previousRoute;
    }
    if (router.params.browserHistory && options.browserHistory && !options.reloadPrevious) {
      history_default.replace(router.view.id, {
        url: options.route.url
      }, (router.params.browserHistoryRoot || "") + router.params.browserHistorySeparator + options.route.url);
    }
    if (options.history) {
      router.history[Math.max(router.history.length - 1, 0)] = options.route.url;
      router.saveHistory();
    }
  }
  var $parentPageEl = dom7_default(options.parentPageEl || router.currentPageEl);
  var tabEl;
  if ($parentPageEl.length && $parentPageEl.find("#" + tabRoute.id).length) {
    tabEl = $parentPageEl.find("#" + tabRoute.id).eq(0);
  } else if (router.view.selector) {
    tabEl = router.view.selector + " #" + tabRoute.id;
  } else {
    tabEl = "#" + tabRoute.id;
  }
  var tabShowResult = router.app.tab.show({
    tabEl,
    animate: options.animate,
    tabRoute: options.route
  });
  var $newTabEl = tabShowResult.$newTabEl, $oldTabEl = tabShowResult.$oldTabEl, animated = tabShowResult.animated, onTabsChanged = tabShowResult.onTabsChanged;
  if ($newTabEl && $newTabEl.parents(".page").length > 0 && options.route) {
    var tabParentPageData = $newTabEl.parents(".page")[0].f7Page;
    if (tabParentPageData && options.route) {
      tabParentPageData.route = options.route;
    }
  }
  function onTabLoaded(contentEl) {
    router.removeThemeElements($newTabEl);
    var tabEventTarget = $newTabEl;
    if (typeof contentEl !== "string")
      tabEventTarget = dom7_default(contentEl);
    tabEventTarget.trigger("tab:init tab:mounted", tabRoute);
    router.emit("tabInit tabMounted", $newTabEl[0], tabRoute);
    if ($oldTabEl && $oldTabEl.length) {
      if (animated) {
        onTabsChanged(function() {
          router.emit("routeChanged", router.currentRoute, router.previousRoute, router);
          if (router.params.unloadTabContent) {
            router.tabRemove($oldTabEl, $newTabEl, tabRoute);
          }
        });
      } else {
        router.emit("routeChanged", router.currentRoute, router.previousRoute, router);
        if (router.params.unloadTabContent) {
          router.tabRemove($oldTabEl, $newTabEl, tabRoute);
        }
      }
    }
  }
  if ($newTabEl[0].f7RouterTabLoaded) {
    if (!$oldTabEl || !$oldTabEl.length)
      return router;
    if (animated) {
      onTabsChanged(function() {
        router.emit("routeChanged", router.currentRoute, router.previousRoute, router);
      });
    } else {
      router.emit("routeChanged", router.currentRoute, router.previousRoute, router);
    }
    return router;
  }
  function loadTab(loadTabParams, loadTabOptions) {
    var url = loadTabParams.url, content = loadTabParams.content, el = loadTabParams.el, component = loadTabParams.component, componentUrl = loadTabParams.componentUrl;
    function resolve(contentEl) {
      router.allowPageChange = true;
      if (!contentEl)
        return;
      if (typeof contentEl === "string") {
        $newTabEl.html(contentEl);
      } else {
        $newTabEl.html("");
        if (contentEl.f7Component) {
          contentEl.f7Component.mount(function(componentEl) {
            $newTabEl.append(componentEl);
          });
        } else {
          $newTabEl.append(contentEl);
        }
      }
      $newTabEl[0].f7RouterTabLoaded = true;
      onTabLoaded(contentEl);
    }
    function reject() {
      router.allowPageChange = true;
      return router;
    }
    if (content) {
      resolve(content);
    } else if (el) {
      resolve(el);
    } else if (component || componentUrl) {
      try {
        router.tabComponentLoader({
          tabEl: $newTabEl[0],
          component,
          componentUrl,
          options: loadTabOptions,
          resolve,
          reject
        });
      } catch (err) {
        router.allowPageChange = true;
        throw err;
      }
    } else if (url) {
      if (router.xhrAbortController) {
        router.xhrAbortController.abort();
        router.xhrAbortController = false;
      }
      router.xhrRequest(url, loadTabOptions).then(function(tabContent) {
        resolve(tabContent);
      }).catch(function() {
        router.allowPageChange = true;
      });
    }
  }
  var hasContentLoadProp;
  "url content component el componentUrl".split(" ").forEach(function(tabLoadProp) {
    if (tabRoute[tabLoadProp]) {
      var _loadTab;
      hasContentLoadProp = true;
      loadTab((_loadTab = {}, _loadTab[tabLoadProp] = tabRoute[tabLoadProp], _loadTab), options);
    }
  });
  function asyncResolve(resolveParams, resolveOptions) {
    loadTab(resolveParams, extend(options, resolveOptions));
  }
  function asyncReject() {
    router.allowPageChange = true;
  }
  if (tabRoute.async) {
    tabRoute.async.call(router, {
      router,
      to: currentRoute,
      from: previousRoute,
      resolve: asyncResolve,
      reject: asyncReject,
      app: router.app
    });
  } else if (tabRoute.asyncComponent) {
    asyncComponent(router, tabRoute.asyncComponent, asyncResolve, asyncReject);
  } else if (!hasContentLoadProp) {
    router.allowPageChange = true;
  }
  return router;
}
function tabRemove($oldTabEl, $newTabEl, tabRoute) {
  var router = this;
  var hasTabComponentChild;
  if ($oldTabEl[0]) {
    $oldTabEl[0].f7RouterTabLoaded = false;
    delete $oldTabEl[0].f7RouterTabLoaded;
  }
  $oldTabEl.children().each(function(tabChild) {
    if (tabChild.f7Component) {
      hasTabComponentChild = true;
      dom7_default(tabChild).trigger("tab:beforeremove", tabRoute);
      tabChild.f7Component.destroy();
    }
  });
  if (!hasTabComponentChild) {
    $oldTabEl.trigger("tab:beforeremove", tabRoute);
  }
  router.emit("tabBeforeRemove", $oldTabEl[0], $newTabEl[0], tabRoute);
  router.removeTabContent($oldTabEl[0], tabRoute);
}

// node_modules/framework7/esm/modules/router/modal.js
function modalLoad(modalType, route, loadOptions, direction) {
  if (loadOptions === void 0) {
    loadOptions = {};
  }
  var router = this;
  var app = router.app;
  var isPanel = modalType === "panel";
  var modalOrPanel = isPanel ? "panel" : "modal";
  var options = extend({
    animate: router.params.animate,
    browserHistory: true,
    history: true,
    on: {},
    once: {}
  }, loadOptions);
  var modalParams = extend({}, route.route[modalType]);
  var modalRoute = route.route;
  var routeCallback = function routeCallback2(modal, name) {
    var on = options.on, once = options.once;
    var callback;
    if (name === "open") {
      callback = on.modalOpen || once.modalOpen || on.panelOpen || once.panelOpen;
    }
    if (name === "close") {
      callback = on.modalClose || once.modalClose || on.panelClose || once.panelClose;
    }
    if (name === "closed") {
      callback = on.modalClosed || once.modalClosed || on.panelClosed || once.panelClosed;
    }
    if (callback)
      callback(modal);
  };
  function onModalLoaded() {
    var modal = app[modalType].create(modalParams);
    modalRoute.modalInstance = modal;
    var hasEl = modal.el;
    function closeOnSwipeBack() {
      modal.close();
    }
    modal.on(modalOrPanel + "Open", function() {
      if (!hasEl) {
        router.removeThemeElements(modal.el);
        modal.$el.trigger(modalType.toLowerCase() + ":init " + modalType.toLowerCase() + ":mounted", route, modal);
        router.emit((!isPanel ? "modalInit" : "") + " " + modalType + "Init " + modalType + "Mounted", modal.el, route, modal);
      }
      router.once("swipeBackMove", closeOnSwipeBack);
      routeCallback(modal, "open");
    });
    modal.on(modalOrPanel + "Close", function() {
      router.off("swipeBackMove", closeOnSwipeBack);
      if (!modal.closeByRouter) {
        router.back();
      }
      routeCallback(modal, "close");
    });
    modal.on(modalOrPanel + "Closed", function() {
      modal.$el.trigger(modalType.toLowerCase() + ":beforeremove", route, modal);
      modal.emit("" + (!isPanel ? "modalBeforeRemove " : "") + modalType + "BeforeRemove", modal.el, route, modal);
      var modalComponent = modal.el.f7Component;
      routeCallback(modal, "closed");
      if (modalComponent) {
        modalComponent.destroy();
      }
      nextTick(function() {
        if (modalComponent || modalParams.component || modalParams.asyncComponent) {
          router.removeModal(modal.el);
        }
        modal.destroy();
        delete modal.route;
        delete modalRoute.modalInstance;
      });
    });
    if (options.route) {
      if (router.params.browserHistory && options.browserHistory) {
        history_default.push(router.view.id, {
          url: options.route.url,
          modal: modalType
        }, (router.params.browserHistoryRoot || "") + router.params.browserHistorySeparator + options.route.url);
      }
      if (options.route !== router.currentRoute) {
        modal.route = extend(options.route, {
          modal
        });
        router.currentRoute = modal.route;
      }
      if (options.history && !options.reloadCurrent) {
        router.history.push(options.route.url);
        router.saveHistory();
      }
    }
    if (hasEl) {
      router.removeThemeElements(modal.el);
      modal.$el.trigger(modalType.toLowerCase() + ":init " + modalType.toLowerCase() + ":mounted", route, modal);
      router.emit(modalOrPanel + "Init " + modalType + "Init " + modalType + "Mounted", modal.el, route, modal);
    }
    modal.open(options.animate === false || options.animate === true ? options.animate : void 0);
  }
  function loadModal(loadModalParams, loadModalOptions) {
    var url = loadModalParams.url, content = loadModalParams.content, component = loadModalParams.component, componentUrl = loadModalParams.componentUrl;
    function resolve(contentEl) {
      if (contentEl) {
        if (typeof contentEl === "string") {
          modalParams.content = contentEl;
        } else if (contentEl.f7Component) {
          contentEl.f7Component.mount(function(componentEl) {
            modalParams.el = componentEl;
            app.$el.append(componentEl);
          });
        } else {
          modalParams.el = contentEl;
        }
        onModalLoaded();
      }
    }
    function reject() {
      router.allowPageChange = true;
      return router;
    }
    if (content) {
      resolve(content);
    } else if (component || componentUrl) {
      try {
        router.modalComponentLoader({
          rootEl: app.el,
          component,
          componentUrl,
          options: loadModalOptions,
          resolve,
          reject
        });
      } catch (err) {
        router.allowPageChange = true;
        throw err;
      }
    } else if (url) {
      if (router.xhrAbortController) {
        router.xhrAbortController.abort();
        router.xhrAbortController = false;
      }
      router.xhrRequest(url, loadModalOptions).then(function(modalContent) {
        modalParams.content = modalContent;
        onModalLoaded();
      }).catch(function() {
        router.allowPageChange = true;
      });
    } else {
      onModalLoaded();
    }
  }
  var foundLoadProp;
  "url content component el componentUrl template".split(" ").forEach(function(modalLoadProp) {
    if (modalParams[modalLoadProp] && !foundLoadProp) {
      var _loadModal;
      foundLoadProp = true;
      loadModal((_loadModal = {}, _loadModal[modalLoadProp] = modalParams[modalLoadProp], _loadModal), options);
    }
  });
  if (!foundLoadProp && modalType === "actions") {
    onModalLoaded();
  }
  function asyncResolve(resolveParams, resolveOptions) {
    loadModal(resolveParams, extend(options, resolveOptions));
  }
  function asyncReject() {
    router.allowPageChange = true;
  }
  if (modalParams.async) {
    modalParams.async.call(router, {
      router,
      to: options.route,
      from: router.currentRoute,
      resolve: asyncResolve,
      reject: asyncReject,
      direction,
      app
    });
  }
  if (modalParams.asyncComponent) {
    asyncComponent(router, modalParams.asyncComponent, asyncResolve, asyncReject);
  }
  return router;
}
function modalRemove(modal) {
  extend(modal, {
    closeByRouter: true
  });
  modal.close();
}

// node_modules/framework7/esm/modules/router/back.js
function backward(router, el, backwardOptions) {
  var device = getDevice();
  var document = getDocument();
  var $el = dom7_default(el);
  var app = router.app;
  var view = router.view;
  var options = extend({
    animate: router.params.animate,
    browserHistory: true,
    replaceState: false
  }, backwardOptions);
  var masterDetailEnabled = router.params.masterDetailBreakpoint > 0;
  var isMaster = masterDetailEnabled && options.route && options.route.route && (options.route.route.master === true || typeof options.route.route.master === "function" && options.route.route.master(app, router));
  var masterPageEl;
  var masterPageRemoved;
  var dynamicNavbar = router.dynamicNavbar;
  var $newPage = $el;
  var $oldPage = router.$el.children(".page-current");
  var initialPreload = $oldPage.length === 0 && options.preload;
  var currentIsMaster = masterDetailEnabled && $oldPage.hasClass("page-master");
  if ($newPage.length) {
    router.removeThemeElements($newPage);
  }
  var $navbarsEl;
  var $newNavbarEl;
  var $oldNavbarEl;
  if (dynamicNavbar) {
    $newNavbarEl = $newPage.children(".navbar");
    $navbarsEl = router.$navbarsEl;
    if ($newNavbarEl.length === 0 && $newPage[0] && $newPage[0].f7Page) {
      $newNavbarEl = $newPage[0].f7Page.$navbarEl;
    }
    $oldNavbarEl = $navbarsEl.find(".navbar-current");
  }
  router.allowPageChange = false;
  if ($newPage.length === 0 || $oldPage.length === 0 && !options.preload) {
    router.allowPageChange = true;
    return router;
  }
  router.removeThemeElements($newPage);
  if (options.route && options.route.route && options.route.route.keepAlive && !options.route.route.keepAliveData) {
    options.route.route.keepAliveData = {
      pageEl: $el[0]
    };
  }
  var isDetail;
  var isDetailRoot;
  if (masterDetailEnabled) {
    var $pagesInView = router.$el.children(".page:not(.stacked)").filter(function(pageInView) {
      return pageInView !== $newPage[0];
    });
    for (var i = 0; i < $pagesInView.length; i += 1) {
      if (!masterPageEl && $pagesInView[i].classList.contains("page-master")) {
        masterPageEl = $pagesInView[i];
        continue;
      }
    }
    isDetail = !isMaster && masterPageEl && router.history.indexOf(options.route.url) > router.history.indexOf(masterPageEl.f7Page.route.url);
    if (!isDetail && !isMaster && masterPageEl && masterPageEl.f7Page && options.route.route.masterRoute) {
      isDetail = options.route.route.masterRoute.path === masterPageEl.f7Page.route.route.path;
    }
  }
  if (isDetail && masterPageEl && masterPageEl.f7Page) {
    isDetailRoot = router.history.indexOf(options.route.url) - router.history.indexOf(masterPageEl.f7Page.route.url) === 1;
  }
  $newPage.addClass("page-" + (initialPreload ? "current" : "previous") + (isMaster ? " page-master" : "") + (isDetail ? " page-master-detail" : "") + (isDetailRoot ? " page-master-detail-root" : "")).removeClass("stacked").removeAttr("aria-hidden").trigger("page:unstack").trigger("page:position", {
    position: initialPreload ? "current" : "previous"
  });
  router.emit("pageUnstack", $newPage[0]);
  router.emit("pagePosition", $newPage[0], initialPreload ? "current" : "previous");
  if (isMaster || isDetail) {
    $newPage.trigger("page:role", {
      role: isMaster ? "master" : "detail",
      root: !!isDetailRoot
    });
    router.emit("pageRole", $newPage[0], {
      role: isMaster ? "master" : "detail",
      detailRoot: !!isDetailRoot
    });
  }
  if (dynamicNavbar && $newNavbarEl.length > 0) {
    $newNavbarEl.addClass("navbar-" + (initialPreload ? "current" : "previous") + (isMaster ? " navbar-master" : "") + (isDetail ? " navbar-master-detail" : "") + (isDetailRoot ? " navbar-master-detail-root" : "")).removeClass("stacked").removeAttr("aria-hidden");
    $newNavbarEl.trigger("navbar:position", {
      position: initialPreload ? "current" : "previous"
    });
    router.emit("navbarPosition", $newNavbarEl[0], initialPreload ? "current" : "previous");
    if (isMaster || isDetailRoot) {
      router.emit("navbarRole", $newNavbarEl[0], {
        role: isMaster ? "master" : "detail",
        detailRoot: !!isDetailRoot
      });
    }
  }
  var backIndex;
  if (options.force) {
    if ($oldPage.prev(".page-previous:not(.stacked)").length > 0 || $oldPage.prev(".page-previous").length === 0) {
      if (router.history.indexOf(options.route.url) >= 0) {
        backIndex = router.history.length - router.history.indexOf(options.route.url) - 1;
        router.history = router.history.slice(0, router.history.indexOf(options.route.url) + 2);
        view.history = router.history;
      } else if (router.history[[router.history.length - 2]]) {
        router.history[router.history.length - 2] = options.route.url;
      } else {
        router.history.unshift(router.url);
      }
      if (backIndex && router.params.stackPages) {
        $oldPage.prevAll(".page-previous").each(function(pageToRemove) {
          var $pageToRemove2 = dom7_default(pageToRemove);
          var $navbarToRemove2;
          if (dynamicNavbar) {
            $navbarToRemove2 = dom7_default(app.navbar.getElByPage($pageToRemove2));
          }
          if ($pageToRemove2[0] !== $newPage[0] && $pageToRemove2.index() > $newPage.index()) {
            if (router.initialPages.indexOf($pageToRemove2[0]) >= 0) {
              $pageToRemove2.addClass("stacked");
              $pageToRemove2.trigger("page:stack");
              router.emit("pageStack", $pageToRemove2[0]);
              if (dynamicNavbar) {
                $navbarToRemove2.addClass("stacked");
              }
            } else {
              router.pageCallback("beforeRemove", $pageToRemove2, $navbarToRemove2, "previous", void 0, options);
              if ($pageToRemove2[0] === masterPageEl) {
                masterPageRemoved = true;
              }
              router.removePage($pageToRemove2);
              if (dynamicNavbar && $navbarToRemove2.length > 0) {
                router.removeNavbar($navbarToRemove2);
              }
            }
          }
        });
      } else {
        var $pageToRemove = $oldPage.prev(".page-previous:not(.stacked)");
        var $navbarToRemove;
        if (dynamicNavbar) {
          $navbarToRemove = dom7_default(app.navbar.getElByPage($pageToRemove));
        }
        if (router.params.stackPages && router.initialPages.indexOf($pageToRemove[0]) >= 0) {
          $pageToRemove.addClass("stacked");
          $pageToRemove.trigger("page:stack");
          router.emit("pageStack", $pageToRemove[0]);
          $navbarToRemove.addClass("stacked");
        } else if ($pageToRemove.length > 0) {
          router.pageCallback("beforeRemove", $pageToRemove, $navbarToRemove, "previous", void 0, options);
          if ($pageToRemove[0] === masterPageEl) {
            masterPageRemoved = true;
          }
          router.removePage($pageToRemove);
          if (dynamicNavbar && $navbarToRemove.length) {
            router.removeNavbar($navbarToRemove);
          }
        }
      }
    }
  }
  var newPageInDom = $newPage.parents(document).length > 0;
  var f7Component = $newPage[0].f7Component;
  function insertPage() {
    if (initialPreload) {
      if (!newPageInDom && f7Component) {
        f7Component.mount(function(componentEl) {
          router.$el.append(componentEl);
        });
      } else {
        router.$el.append($newPage);
      }
    }
    if ($newPage.next($oldPage).length === 0) {
      if (!newPageInDom && f7Component) {
        f7Component.mount(function(componentEl) {
          dom7_default(componentEl).insertBefore($oldPage);
        });
      } else {
        $newPage.insertBefore($oldPage);
      }
    }
    if (dynamicNavbar && $newNavbarEl.length) {
      if ($newNavbarEl.find(".title-large").length) {
        $newNavbarEl.addClass("navbar-large");
      }
      $newNavbarEl.insertBefore($oldNavbarEl);
      if ($oldNavbarEl.length > 0) {
        $newNavbarEl.insertBefore($oldNavbarEl);
      } else {
        if (!router.$navbarsEl.parents(document).length) {
          router.$el.prepend(router.$navbarsEl);
        }
        $navbarsEl.append($newNavbarEl);
      }
    }
    if (!newPageInDom) {
      router.pageCallback("mounted", $newPage, $newNavbarEl, "previous", "current", options, $oldPage);
    } else if (options.route && options.route.route && options.route.route.keepAlive && !$newPage[0].f7PageMounted) {
      $newPage[0].f7PageMounted = true;
      router.pageCallback("mounted", $newPage, $newNavbarEl, "previous", "current", options, $oldPage);
    }
  }
  if (options.preload) {
    insertPage();
    if (options.route.route.tab) {
      router.tabLoad(options.route.route.tab, extend({}, options, {
        history: false,
        browserHistory: false,
        preload: true
      }));
    }
    if (isMaster) {
      $newPage.removeClass("page-master-stacked").trigger("page:masterunstack");
      router.emit("pageMasterUnstack", $newPage[0]);
      if (dynamicNavbar) {
        dom7_default(app.navbar.getElByPage($newPage)).removeClass("navbar-master-stacked");
        router.emit("navbarMasterUnstack", app.navbar.getElByPage($newPage));
      }
    }
    router.pageCallback("init", $newPage, $newNavbarEl, "previous", "current", options, $oldPage);
    if (initialPreload) {
      router.pageCallback("beforeIn", $newPage, $newNavbarEl, "current", void 0, options);
      router.pageCallback("afterIn", $newPage, $newNavbarEl, "current", void 0, options);
    }
    var $previousPages = $newPage.prevAll(".page-previous:not(.stacked):not(.page-master)");
    if ($previousPages.length > 0) {
      $previousPages.each(function(pageToRemove) {
        var $pageToRemove2 = dom7_default(pageToRemove);
        var $navbarToRemove2;
        if (dynamicNavbar) {
          $navbarToRemove2 = dom7_default(app.navbar.getElByPage($pageToRemove2));
        }
        if (router.params.stackPages && router.initialPages.indexOf(pageToRemove) >= 0) {
          $pageToRemove2.addClass("stacked");
          $pageToRemove2.trigger("page:stack");
          router.emit("pageStack", $pageToRemove2[0]);
          if (dynamicNavbar) {
            $navbarToRemove2.addClass("stacked");
          }
        } else {
          router.pageCallback("beforeRemove", $pageToRemove2, $navbarToRemove2, "previous", void 0);
          router.removePage($pageToRemove2);
          if (dynamicNavbar && $navbarToRemove2.length) {
            router.removeNavbar($navbarToRemove2);
          }
        }
      });
    }
    router.allowPageChange = true;
    return router;
  }
  if (!(device.ie || device.edge || device.firefox && !device.ios)) {
    if (router.params.browserHistory && options.browserHistory) {
      if (options.replaceState) {
        var browserHistoryRoot = router.params.browserHistoryRoot || "";
        history_default.replace(view.id, {
          url: options.route.url
        }, browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);
      } else if (backIndex) {
        history_default.go(-backIndex);
      } else {
        history_default.back();
      }
    }
  }
  if (options.replaceState) {
    router.history[router.history.length - 1] = options.route.url;
  } else {
    if (router.history.length === 1) {
      router.history.unshift(router.url);
    }
    router.history.pop();
  }
  router.saveHistory();
  router.currentPageEl = $newPage[0];
  if (dynamicNavbar && $newNavbarEl.length) {
    router.currentNavbarEl = $newNavbarEl[0];
  } else {
    delete router.currentNavbarEl;
  }
  router.currentRoute = options.route;
  if (device.ie || device.edge || device.firefox && !device.ios) {
    if (router.params.browserHistory && options.browserHistory) {
      if (options.replaceState) {
        var _browserHistoryRoot = router.params.browserHistoryRoot || "";
        history_default.replace(view.id, {
          url: options.route.url
        }, _browserHistoryRoot + router.params.browserHistorySeparator + options.route.url);
      } else if (backIndex) {
        history_default.go(-backIndex);
      } else {
        history_default.back();
      }
    }
  }
  insertPage();
  if (options.route.route.tab) {
    router.tabLoad(options.route.route.tab, extend({}, options, {
      history: false,
      browserHistory: false
    }));
  }
  if (masterDetailEnabled && (currentIsMaster || masterPageRemoved)) {
    view.checkMasterDetailBreakpoint(false);
  }
  router.pageCallback("init", $newPage, $newNavbarEl, "previous", "current", options, $oldPage);
  router.pageCallback("beforeOut", $oldPage, $oldNavbarEl, "current", "next", options);
  router.pageCallback("beforeIn", $newPage, $newNavbarEl, "previous", "current", options);
  function afterAnimation() {
    router.setPagePosition($newPage, "current", false);
    router.setPagePosition($oldPage, "next", true);
    if (dynamicNavbar) {
      router.setNavbarPosition($newNavbarEl, "current", false);
      router.setNavbarPosition($oldNavbarEl, "next", true);
    }
    router.pageCallback("afterOut", $oldPage, $oldNavbarEl, "current", "next", options);
    router.pageCallback("afterIn", $newPage, $newNavbarEl, "previous", "current", options);
    if (router.params.stackPages && router.initialPages.indexOf($oldPage[0]) >= 0) {
      $oldPage.addClass("stacked");
      $oldPage.trigger("page:stack");
      router.emit("pageStack", $oldPage[0]);
      if (dynamicNavbar) {
        $oldNavbarEl.addClass("stacked");
      }
    } else {
      router.pageCallback("beforeRemove", $oldPage, $oldNavbarEl, "next", void 0, options);
      router.removePage($oldPage);
      if (dynamicNavbar && $oldNavbarEl.length) {
        router.removeNavbar($oldNavbarEl);
      }
    }
    router.allowPageChange = true;
    router.emit("routeChanged", router.currentRoute, router.previousRoute, router);
    var preloadPreviousPage = router.params.preloadPreviousPage || router.params[app.theme + "SwipeBack"];
    if (preloadPreviousPage && router.history[router.history.length - 2] && !isMaster) {
      router.back(router.history[router.history.length - 2], {
        preload: true
      });
    }
    if (router.params.browserHistory) {
      history_default.clearRouterQueue();
    }
  }
  function setPositionClasses() {
    router.setPagePosition($oldPage, "current");
    router.setPagePosition($newPage, "previous", false);
    if (dynamicNavbar) {
      router.setNavbarPosition($oldNavbarEl, "current");
      router.setNavbarPosition($newNavbarEl, "previous", false);
    }
  }
  if (options.animate && !(currentIsMaster && app.width >= router.params.masterDetailBreakpoint)) {
    var transition = router.params.transition;
    if ($oldPage[0] && $oldPage[0].f7PageTransition) {
      transition = $oldPage[0].f7PageTransition;
      delete $oldPage[0].f7PageTransition;
    }
    if (options.transition)
      transition = options.transition;
    if (!transition && router.previousRoute && router.previousRoute.route) {
      transition = router.previousRoute.route.transition;
    }
    if (!transition && router.previousRoute && router.previousRoute.route && router.previousRoute.route.options) {
      transition = router.previousRoute.route.options.transition;
    }
    setPositionClasses();
    router.animate($oldPage, $newPage, $oldNavbarEl, $newNavbarEl, "backward", transition, function() {
      afterAnimation();
    });
  } else {
    afterAnimation();
  }
  return router;
}
function loadBack(router, backParams, backOptions, ignorePageChange) {
  if (!router.allowPageChange && !ignorePageChange)
    return router;
  var params = backParams;
  var options = backOptions;
  var url = params.url, content = params.content, el = params.el, pageName = params.pageName, component = params.component, componentUrl = params.componentUrl;
  if (options.route.url && router.url === options.route.url && !(options.reloadCurrent || options.reloadPrevious) && !router.params.allowDuplicateUrls) {
    return false;
  }
  if (!options.route && url) {
    options.route = router.parseRouteUrl(url);
  }
  function resolve(pageEl, newOptions) {
    return backward(router, pageEl, extend(options, newOptions));
  }
  function reject() {
    router.allowPageChange = true;
    return router;
  }
  if (url || componentUrl || component) {
    router.allowPageChange = false;
  }
  if (content) {
    backward(router, router.getPageEl(content), options);
  } else if (el) {
    backward(router, router.getPageEl(el), options);
  } else if (pageName) {
    backward(router, router.$el.children('.page[data-name="' + pageName + '"]').eq(0), options);
  } else if (component || componentUrl) {
    try {
      router.pageComponentLoader({
        routerEl: router.el,
        component,
        componentUrl,
        options,
        resolve,
        reject
      });
    } catch (err) {
      router.allowPageChange = true;
      throw err;
    }
  } else if (url) {
    if (router.xhrAbortController) {
      router.xhrAbortController.abort();
      router.xhrAbortController = false;
    }
    router.xhrRequest(url, options).then(function(pageContent) {
      backward(router, router.getPageEl(pageContent), options);
    }).catch(function() {
      router.allowPageChange = true;
    });
  }
  return router;
}
function back2() {
  var router = this;
  var device = getDevice();
  if (router.swipeBackActive)
    return router;
  var navigateUrl;
  var navigateOptions;
  var route;
  if (typeof (arguments.length <= 0 ? void 0 : arguments[0]) === "object") {
    navigateOptions = (arguments.length <= 0 ? void 0 : arguments[0]) || {};
  } else {
    navigateUrl = arguments.length <= 0 ? void 0 : arguments[0];
    navigateOptions = (arguments.length <= 1 ? void 0 : arguments[1]) || {};
  }
  var _navigateOptions = navigateOptions, name = _navigateOptions.name, params = _navigateOptions.params, query = _navigateOptions.query;
  if (name) {
    navigateUrl = router.generateUrl({
      name,
      params,
      query
    });
    if (navigateUrl) {
      return router.back(navigateUrl, extend({}, navigateOptions, {
        name: null,
        params: null,
        query: null
      }));
    }
    return router;
  }
  var app = router.app;
  appRouterCheck(router, "back");
  var currentRouteIsModal = router.currentRoute.modal;
  var modalType;
  if (!currentRouteIsModal) {
    "popup popover sheet loginScreen actions customModal panel".split(" ").forEach(function(modalLoadProp) {
      if (router.currentRoute.route[modalLoadProp]) {
        currentRouteIsModal = true;
        modalType = modalLoadProp;
      }
    });
  }
  if (currentRouteIsModal && !navigateOptions.preload) {
    var modalToClose = router.currentRoute.modal || router.currentRoute.route.modalInstance || app[modalType].get();
    var previousUrl = router.history[router.history.length - 2];
    var previousRoute;
    if (modalToClose && modalToClose.$el) {
      var prevOpenedModals = modalToClose.$el.prevAll(".modal-in");
      if (prevOpenedModals.length && prevOpenedModals[0].f7Modal) {
        var modalEl = prevOpenedModals[0];
        if (!router.$el.parents(modalEl).length) {
          previousRoute = modalEl.f7Modal.route;
        }
      }
    }
    if (!previousRoute) {
      previousRoute = router.findMatchingRoute(previousUrl);
    }
    if (!previousRoute && previousUrl) {
      previousRoute = {
        url: previousUrl,
        path: previousUrl.split("?")[0],
        query: parseUrlQuery(previousUrl),
        route: {
          path: previousUrl.split("?")[0],
          url: previousUrl
        }
      };
    }
    if (!navigateUrl || navigateUrl.replace(/[# ]/g, "").trim().length === 0) {
      if (!previousRoute || !modalToClose) {
        return router;
      }
    }
    var forceOtherUrl = navigateOptions.force && previousRoute && navigateUrl;
    if (previousRoute && modalToClose) {
      var isBrokenBrowserHistory = device.ie || device.edge || device.firefox && !device.ios;
      var needHistoryBack = router.params.browserHistory && navigateOptions.browserHistory !== false;
      var currentRouteWithoutBrowserHistory = router.currentRoute && router.currentRoute.route && router.currentRoute.route.options && router.currentRoute.route.options.browserHistory === false;
      if (needHistoryBack && !isBrokenBrowserHistory && !currentRouteWithoutBrowserHistory) {
        history_default.back();
      }
      router.currentRoute = previousRoute;
      router.history.pop();
      router.saveHistory();
      if (needHistoryBack && isBrokenBrowserHistory && !currentRouteWithoutBrowserHistory) {
        history_default.back();
      }
      router.modalRemove(modalToClose);
      if (forceOtherUrl) {
        router.navigate(navigateUrl, {
          reloadCurrent: true
        });
      }
    } else if (modalToClose) {
      router.modalRemove(modalToClose);
      if (navigateUrl) {
        router.navigate(navigateUrl, {
          reloadCurrent: true
        });
      }
    }
    return router;
  }
  var $previousPage = router.$el.children(".page-current").prevAll(".page-previous:not(.page-master)").eq(0);
  var skipMaster;
  if (router.params.masterDetailBreakpoint > 0) {
    var classes = [];
    router.$el.children(".page").each(function(pageEl) {
      classes.push(pageEl.className);
    });
    var $previousMaster = router.$el.children(".page-current").prevAll(".page-master").eq(0);
    if ($previousMaster.length) {
      var expectedPreviousPageUrl = router.history[router.history.length - 2];
      var expectedPreviousPageRoute = router.findMatchingRoute(expectedPreviousPageUrl);
      if (expectedPreviousPageRoute && $previousMaster[0].f7Page && expectedPreviousPageRoute.route === $previousMaster[0].f7Page.route.route) {
        $previousPage = $previousMaster;
        if (!navigateOptions.preload) {
          skipMaster = app.width >= router.params.masterDetailBreakpoint;
        }
      }
    }
  }
  if (!navigateOptions.force && $previousPage.length && !skipMaster) {
    if (router.params.browserHistory && $previousPage[0].f7Page && router.history[router.history.length - 2] !== $previousPage[0].f7Page.route.url) {
      router.back(router.history[router.history.length - 2], extend(navigateOptions, {
        force: true
      }));
      return router;
    }
    var previousPageRoute = $previousPage[0].f7Page.route;
    processRouteQueue.call(router, previousPageRoute, router.currentRoute, function() {
      loadBack(router, {
        el: $previousPage
      }, extend(navigateOptions, {
        route: previousPageRoute
      }));
    }, function() {
    }, "backward");
    return router;
  }
  if (navigateUrl === "#") {
    navigateUrl = void 0;
  }
  if (navigateUrl && navigateUrl[0] !== "/" && navigateUrl.indexOf("#") !== 0) {
    navigateUrl = ((router.path || "/") + navigateUrl).replace("//", "/");
  }
  if (!navigateUrl && router.history.length > 1) {
    navigateUrl = router.history[router.history.length - 2];
  }
  if (skipMaster && !navigateOptions.force && router.history[router.history.length - 3]) {
    return router.back(router.history[router.history.length - 3], extend({}, navigateOptions || {}, {
      force: true,
      animate: false
    }));
  }
  if (skipMaster && !navigateOptions.force) {
    return router;
  }
  route = router.findMatchingRoute(navigateUrl);
  if (!route) {
    if (navigateUrl) {
      route = {
        url: navigateUrl,
        path: navigateUrl.split("?")[0],
        query: parseUrlQuery(navigateUrl),
        route: {
          path: navigateUrl.split("?")[0],
          url: navigateUrl
        }
      };
    }
  }
  if (!route) {
    return router;
  }
  if (route.route.redirect) {
    return redirect.call(router, "backward", route, navigateOptions);
  }
  var options = {};
  if (route.route.options) {
    extend(options, route.route.options, navigateOptions);
  } else {
    extend(options, navigateOptions);
  }
  options.route = route;
  var backForceLoaded;
  if (options.force && router.params.stackPages) {
    router.$el.children(".page-previous.stacked").each(function(pageEl) {
      if (pageEl.f7Page && pageEl.f7Page.route && pageEl.f7Page.route.url === route.url) {
        backForceLoaded = true;
        loadBack(router, {
          el: pageEl
        }, options);
      }
    });
    if (backForceLoaded) {
      return router;
    }
  }
  function resolve() {
    var routerLoaded = false;
    if (route.route.keepAlive && route.route.keepAliveData) {
      loadBack(router, {
        el: route.route.keepAliveData.pageEl
      }, options);
      routerLoaded = true;
    }
    "url content component pageName el componentUrl".split(" ").forEach(function(pageLoadProp) {
      if (route.route[pageLoadProp] && !routerLoaded) {
        var _loadBack;
        routerLoaded = true;
        loadBack(router, (_loadBack = {}, _loadBack[pageLoadProp] = route.route[pageLoadProp], _loadBack), options);
      }
    });
    if (routerLoaded)
      return;
    function asyncResolve(resolveParams, resolveOptions) {
      router.allowPageChange = false;
      loadBack(router, resolveParams, extend(options, resolveOptions), true);
    }
    function asyncReject() {
      router.allowPageChange = true;
    }
    if (route.route.async) {
      router.allowPageChange = false;
      route.route.async.call(router, {
        router,
        to: route,
        from: router.currentRoute,
        resolve: asyncResolve,
        reject: asyncReject,
        direction: "backward",
        app
      });
    }
    if (route.route.asyncComponent) {
      asyncComponent(router, route.route.asyncComponent, asyncResolve, asyncReject);
    }
  }
  function reject() {
    router.allowPageChange = true;
  }
  if (options.preload) {
    resolve();
  } else {
    processRouteQueue.call(router, route, router.currentRoute, function() {
      if (route.route.modules) {
        app.loadModules(Array.isArray(route.route.modules) ? route.route.modules : [route.route.modules]).then(function() {
          resolve();
        }).catch(function() {
          reject();
        });
      } else {
        resolve();
      }
    }, function() {
      reject();
    }, "backward");
  }
  return router;
}

// node_modules/framework7/esm/modules/router/clear-previous-history.js
function clearPreviousPages(router) {
  appRouterCheck(router, "clearPreviousPages");
  var app = router.app;
  var dynamicNavbar = router.dynamicNavbar;
  var $pagesToRemove = router.$el.children(".page").filter(function(pageInView) {
    if (router.currentRoute && (router.currentRoute.modal || router.currentRoute.panel))
      return true;
    return pageInView !== router.currentPageEl;
  });
  $pagesToRemove.each(function(pageEl) {
    var $oldPageEl = dom7_default(pageEl);
    var $oldNavbarEl = dom7_default(app.navbar.getElByPage($oldPageEl));
    if (router.params.stackPages && router.initialPages.indexOf($oldPageEl[0]) >= 0) {
      $oldPageEl.addClass("stacked");
      if (dynamicNavbar) {
        $oldNavbarEl.addClass("stacked");
      }
    } else {
      router.pageCallback("beforeRemove", $oldPageEl, $oldNavbarEl, "previous", void 0, {});
      router.removePage($oldPageEl);
      if (dynamicNavbar && $oldNavbarEl.length) {
        router.removeNavbar($oldNavbarEl);
      }
    }
  });
}
function clearPreviousHistory() {
  var router = this;
  appRouterCheck(router, "clearPreviousHistory");
  var url = router.history[router.history.length - 1];
  clearPreviousPages(router);
  router.history = [url];
  router.view.history = [url];
  router.saveHistory();
}

// node_modules/framework7/esm/modules/router/router-class.js
function _assertThisInitialized4(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose4(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf5(subClass, superClass);
}
function _setPrototypeOf5(o, p) {
  _setPrototypeOf5 = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf5(o, p);
}
var Router = function(_Framework7Class) {
  _inheritsLoose4(Router2, _Framework7Class);
  function Router2(app, view) {
    var _this;
    _this = _Framework7Class.call(this, {}, [typeof view === "undefined" ? app : view]) || this;
    var router = _assertThisInitialized4(_this);
    router.isAppRouter = typeof view === "undefined";
    if (router.isAppRouter) {
      extend(false, router, {
        app,
        params: app.params.view,
        routes: app.routes || [],
        cache: app.cache
      });
    } else {
      extend(false, router, {
        app,
        view,
        viewId: view.id,
        id: view.params.routerId,
        params: view.params,
        routes: view.routes,
        history: view.history,
        scrollHistory: view.scrollHistory,
        cache: app.cache,
        dynamicNavbar: app.theme === "ios" && view.params.iosDynamicNavbar,
        initialPages: [],
        initialNavbars: []
      });
    }
    router.useModules();
    router.allowPageChange = true;
    var currentRoute = {};
    var previousRoute = {};
    Object.defineProperty(router, "currentRoute", {
      enumerable: true,
      configurable: true,
      set: function set(newRoute) {
        if (newRoute === void 0) {
          newRoute = {};
        }
        previousRoute = extend({}, currentRoute);
        currentRoute = newRoute;
        if (!currentRoute)
          return;
        router.url = currentRoute.url;
        router.emit("routeChange", newRoute, previousRoute, router);
      },
      get: function get2() {
        return currentRoute;
      }
    });
    Object.defineProperty(router, "previousRoute", {
      enumerable: true,
      configurable: true,
      get: function get2() {
        return previousRoute;
      },
      set: function set(newRoute) {
        previousRoute = newRoute;
      }
    });
    return router || _assertThisInitialized4(_this);
  }
  var _proto = Router2.prototype;
  _proto.mount = function mount() {
    var router = this;
    var view = router.view;
    var document = getDocument();
    extend(false, router, {
      tempDom: document.createElement("div"),
      $el: view.$el,
      el: view.el,
      $navbarsEl: view.$navbarsEl,
      navbarsEl: view.navbarsEl
    });
    router.emit("local::mount routerMount", router);
  };
  _proto.animatableNavElements = function animatableNavElements($newNavbarEl, $oldNavbarEl, toLarge, fromLarge, direction) {
    var router = this;
    var dynamicNavbar = router.dynamicNavbar;
    var animateIcon = router.params.iosAnimateNavbarBackIcon;
    var newNavEls;
    var oldNavEls;
    function animatableNavEl($el, $navbarInner) {
      var isSliding = $el.hasClass("sliding") || $navbarInner.hasClass("sliding");
      var isSubnavbar = $el.hasClass("subnavbar");
      var needsOpacityTransition = isSliding ? !isSubnavbar : true;
      var $iconEl = $el.find(".back .icon");
      var isIconLabel;
      if (isSliding && animateIcon && $el.hasClass("left") && $iconEl.length > 0 && $iconEl.next("span").length) {
        $el = $iconEl.next("span");
        isIconLabel = true;
      }
      return {
        $el,
        isIconLabel,
        leftOffset: $el[0].f7NavbarLeftOffset,
        rightOffset: $el[0].f7NavbarRightOffset,
        isSliding,
        isSubnavbar,
        needsOpacityTransition
      };
    }
    if (dynamicNavbar) {
      newNavEls = [];
      oldNavEls = [];
      $newNavbarEl.children(".navbar-inner").children(".left, .right, .title, .subnavbar").each(function(navEl) {
        var $navEl = dom7_default(navEl);
        if ($navEl.hasClass("left") && fromLarge && direction === "forward")
          return;
        if ($navEl.hasClass("title") && toLarge)
          return;
        newNavEls.push(animatableNavEl($navEl, $newNavbarEl.children(".navbar-inner")));
      });
      if (!($oldNavbarEl.hasClass("navbar-master") && router.params.masterDetailBreakpoint > 0 && router.app.width >= router.params.masterDetailBreakpoint)) {
        $oldNavbarEl.children(".navbar-inner").children(".left, .right, .title, .subnavbar").each(function(navEl) {
          var $navEl = dom7_default(navEl);
          if ($navEl.hasClass("left") && toLarge && !fromLarge && direction === "forward")
            return;
          if ($navEl.hasClass("left") && toLarge && direction === "backward")
            return;
          if ($navEl.hasClass("title") && fromLarge) {
            return;
          }
          oldNavEls.push(animatableNavEl($navEl, $oldNavbarEl.children(".navbar-inner")));
        });
      }
      [oldNavEls, newNavEls].forEach(function(navEls) {
        navEls.forEach(function(navEl) {
          var n = navEl;
          var isSliding = navEl.isSliding, $el = navEl.$el;
          var otherEls = navEls === oldNavEls ? newNavEls : oldNavEls;
          if (!(isSliding && $el.hasClass("title") && otherEls))
            return;
          otherEls.forEach(function(otherNavEl) {
            if (otherNavEl.isIconLabel) {
              var iconTextEl = otherNavEl.$el[0];
              n.leftOffset += iconTextEl ? iconTextEl.offsetLeft || 0 : 0;
            }
          });
        });
      });
    }
    return {
      newNavEls,
      oldNavEls
    };
  };
  _proto.animate = function animate($oldPageEl, $newPageEl, $oldNavbarEl, $newNavbarEl, direction, transition, callback) {
    var router = this;
    if (router.params.animateCustom) {
      router.params.animateCustom.apply(router, [$oldPageEl, $newPageEl, $oldNavbarEl, $newNavbarEl, direction, callback]);
      return;
    }
    var dynamicNavbar = router.dynamicNavbar;
    var ios = router.app.theme === "ios";
    if (transition) {
      var routerCustomTransitionClass = "router-transition-custom router-transition-" + transition + "-" + direction;
      var onCustomTransitionDone = function onCustomTransitionDone2() {
        router.$el.removeClass(routerCustomTransitionClass);
        if (dynamicNavbar && router.$navbarsEl.length) {
          if ($newNavbarEl) {
            router.$navbarsEl.prepend($newNavbarEl);
          }
          if ($oldNavbarEl) {
            router.$navbarsEl.prepend($oldNavbarEl);
          }
        }
        if (callback)
          callback();
      };
      (direction === "forward" ? $newPageEl : $oldPageEl).animationEnd(onCustomTransitionDone);
      if (dynamicNavbar) {
        if ($newNavbarEl && $newPageEl) {
          router.setNavbarPosition($newNavbarEl, "");
          $newNavbarEl.removeClass("navbar-next navbar-previous navbar-current");
          $newPageEl.prepend($newNavbarEl);
        }
        if ($oldNavbarEl && $oldPageEl) {
          router.setNavbarPosition($oldNavbarEl, "");
          $oldNavbarEl.removeClass("navbar-next navbar-previous navbar-current");
          $oldPageEl.prepend($oldNavbarEl);
        }
      }
      router.$el.addClass(routerCustomTransitionClass);
      return;
    }
    var routerTransitionClass = "router-transition-" + direction + " router-transition";
    var newNavEls;
    var oldNavEls;
    var fromLarge;
    var toLarge;
    var toDifferent;
    var oldIsLarge;
    var newIsLarge;
    if (ios && dynamicNavbar) {
      var betweenMasterAndDetail = router.params.masterDetailBreakpoint > 0 && router.app.width >= router.params.masterDetailBreakpoint && ($oldNavbarEl.hasClass("navbar-master") && $newNavbarEl.hasClass("navbar-master-detail") || $oldNavbarEl.hasClass("navbar-master-detail") && $newNavbarEl.hasClass("navbar-master"));
      if (!betweenMasterAndDetail) {
        oldIsLarge = $oldNavbarEl && $oldNavbarEl.hasClass("navbar-large");
        newIsLarge = $newNavbarEl && $newNavbarEl.hasClass("navbar-large");
        fromLarge = oldIsLarge && !$oldNavbarEl.hasClass("navbar-large-collapsed");
        toLarge = newIsLarge && !$newNavbarEl.hasClass("navbar-large-collapsed");
        toDifferent = fromLarge && !toLarge || toLarge && !fromLarge;
      }
      var navEls = router.animatableNavElements($newNavbarEl, $oldNavbarEl, toLarge, fromLarge, direction);
      newNavEls = navEls.newNavEls;
      oldNavEls = navEls.oldNavEls;
    }
    function animateNavbars(progress) {
      if (!(ios && dynamicNavbar))
        return;
      if (progress === 1) {
        if (toLarge) {
          $newNavbarEl.addClass("router-navbar-transition-to-large");
          $oldNavbarEl.addClass("router-navbar-transition-to-large");
        }
        if (fromLarge) {
          $newNavbarEl.addClass("router-navbar-transition-from-large");
          $oldNavbarEl.addClass("router-navbar-transition-from-large");
        }
      }
      newNavEls.forEach(function(navEl) {
        var $el = navEl.$el;
        var offset = direction === "forward" ? navEl.rightOffset : navEl.leftOffset;
        if (navEl.isSliding) {
          if (navEl.isSubnavbar && newIsLarge) {
            $el[0].style.setProperty("transform", "translate3d(" + offset * (1 - progress) + "px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)", "important");
          } else {
            $el.transform("translate3d(" + offset * (1 - progress) + "px,0,0)");
          }
        }
      });
      oldNavEls.forEach(function(navEl) {
        var $el = navEl.$el;
        var offset = direction === "forward" ? navEl.leftOffset : navEl.rightOffset;
        if (navEl.isSliding) {
          if (navEl.isSubnavbar && oldIsLarge) {
            $el.transform("translate3d(" + offset * progress + "px, calc(-1 * var(--f7-navbar-large-collapse-progress) * var(--f7-navbar-large-title-height)), 0)");
          } else {
            $el.transform("translate3d(" + offset * progress + "px,0,0)");
          }
        }
      });
    }
    function onDone() {
      if (router.dynamicNavbar) {
        if ($newNavbarEl) {
          $newNavbarEl.removeClass("router-navbar-transition-to-large router-navbar-transition-from-large");
          $newNavbarEl.addClass("navbar-no-title-large-transition");
          nextFrame(function() {
            $newNavbarEl.removeClass("navbar-no-title-large-transition");
          });
        }
        if ($oldNavbarEl) {
          $oldNavbarEl.removeClass("router-navbar-transition-to-large router-navbar-transition-from-large");
        }
        if ($newNavbarEl.hasClass("sliding") || $newNavbarEl.children(".navbar-inner.sliding").length) {
          $newNavbarEl.find(".title, .left, .right, .left .icon, .subnavbar").transform("");
        } else {
          $newNavbarEl.find(".sliding").transform("");
        }
        if ($oldNavbarEl.hasClass("sliding") || $oldNavbarEl.children(".navbar-inner.sliding").length) {
          $oldNavbarEl.find(".title, .left, .right, .left .icon, .subnavbar").transform("");
        } else {
          $oldNavbarEl.find(".sliding").transform("");
        }
      }
      router.$el.removeClass(routerTransitionClass);
      if (callback)
        callback();
    }
    (direction === "forward" ? $newPageEl : $oldPageEl).animationEnd(function() {
      onDone();
    });
    if (dynamicNavbar) {
      animateNavbars(0);
      nextFrame(function() {
        router.$el.addClass(routerTransitionClass);
        if (toDifferent) {
          router.el._clientLeft = router.el.clientLeft;
        }
        animateNavbars(1);
      });
    } else {
      router.$el.addClass(routerTransitionClass);
    }
  };
  _proto.removeModal = function removeModal(modalEl) {
    var router = this;
    router.removeEl(modalEl);
  };
  _proto.removeTabContent = function removeTabContent(tabEl) {
    var $tabEl = dom7_default(tabEl);
    $tabEl.html("");
  };
  _proto.removeNavbar = function removeNavbar(el) {
    var router = this;
    router.removeEl(el);
  };
  _proto.removePage = function removePage(el) {
    var $el = dom7_default(el);
    var f7Page = $el && $el[0] && $el[0].f7Page;
    var router = this;
    if (f7Page && f7Page.route && f7Page.route.route && f7Page.route.route.keepAlive) {
      $el.remove();
      return;
    }
    router.removeEl(el);
  };
  _proto.removeEl = function removeEl(el) {
    if (!el)
      return;
    var router = this;
    var $el = dom7_default(el);
    if ($el.length === 0)
      return;
    $el.find(".tab").each(function(tabEl) {
      dom7_default(tabEl).children().each(function(tabChild) {
        if (tabChild.f7Component) {
          dom7_default(tabChild).trigger("tab:beforeremove");
          tabChild.f7Component.destroy();
        }
      });
    });
    if ($el[0].f7Component && $el[0].f7Component.destroy) {
      $el[0].f7Component.destroy();
    }
    if (!router.params.removeElements) {
      return;
    }
    if (router.params.removeElementsWithTimeout) {
      setTimeout(function() {
        $el.remove();
      }, router.params.removeElementsTimeout);
    } else {
      $el.remove();
    }
  };
  _proto.getPageEl = function getPageEl(content) {
    var router = this;
    if (typeof content === "string") {
      router.tempDom.innerHTML = content;
    } else {
      if (dom7_default(content).hasClass("page")) {
        return content;
      }
      router.tempDom.innerHTML = "";
      dom7_default(router.tempDom).append(content);
    }
    return router.findElement(".page", router.tempDom);
  };
  _proto.findElement = function findElement(stringSelector, container, notStacked) {
    var router = this;
    var view = router.view;
    var app = router.app;
    var modalsSelector = ".popup, .dialog, .popover, .actions-modal, .sheet-modal, .login-screen, .page";
    var $container = dom7_default(container);
    var selector = stringSelector;
    if (notStacked)
      selector += ":not(.stacked)";
    var found = $container.find(selector).filter(function(el) {
      return dom7_default(el).parents(modalsSelector).length === 0;
    });
    if (found.length > 1) {
      if (typeof view.selector === "string") {
        found = $container.find(view.selector + " " + selector);
      }
      if (found.length > 1) {
        found = $container.find("." + app.params.viewMainClass + " " + selector);
      }
    }
    if (found.length === 1)
      return found;
    if (!notStacked)
      found = router.findElement(selector, $container, true);
    if (found && found.length === 1)
      return found;
    if (found && found.length > 1)
      return dom7_default(found[0]);
    return void 0;
  };
  _proto.flattenRoutes = function flattenRoutes(routes) {
    if (routes === void 0) {
      routes = this.routes;
    }
    var router = this;
    var flattenedRoutes = [];
    routes.forEach(function(route) {
      var hasTabRoutes = false;
      if ("tabs" in route && route.tabs) {
        var mergedPathsRoutes = route.tabs.map(function(tabRoute) {
          var tRoute = extend({}, route, {
            path: (route.path + "/" + tabRoute.path).replace("///", "/").replace("//", "/"),
            parentPath: route.path,
            tab: tabRoute
          });
          delete tRoute.tabs;
          delete tRoute.routes;
          return tRoute;
        });
        hasTabRoutes = true;
        flattenedRoutes = flattenedRoutes.concat(router.flattenRoutes(mergedPathsRoutes));
      }
      if ("detailRoutes" in route) {
        var _mergedPathsRoutes = route.detailRoutes.map(function(detailRoute) {
          var dRoute = extend({}, detailRoute);
          dRoute.masterRoute = route;
          dRoute.masterRoutePath = route.path;
          return dRoute;
        });
        flattenedRoutes = flattenedRoutes.concat(route, router.flattenRoutes(_mergedPathsRoutes));
      }
      if ("routes" in route) {
        var _mergedPathsRoutes2 = route.routes.map(function(childRoute) {
          var cRoute = extend({}, childRoute);
          cRoute.path = (route.path + "/" + cRoute.path).replace("///", "/").replace("//", "/");
          return cRoute;
        });
        if (hasTabRoutes) {
          flattenedRoutes = flattenedRoutes.concat(router.flattenRoutes(_mergedPathsRoutes2));
        } else {
          flattenedRoutes = flattenedRoutes.concat(route, router.flattenRoutes(_mergedPathsRoutes2));
        }
      }
      if (!("routes" in route) && !("tabs" in route && route.tabs) && !("detailRoutes" in route)) {
        flattenedRoutes.push(route);
      }
    });
    return flattenedRoutes;
  };
  _proto.parseRouteUrl = function parseRouteUrl(url) {
    if (!url)
      return {};
    var query = parseUrlQuery(url);
    var hash = url.split("#")[1];
    var params = {};
    var path = url.split("#")[0].split("?")[0];
    return {
      query,
      hash,
      params,
      url,
      path
    };
  };
  _proto.generateUrl = function generateUrl(parameters) {
    if (parameters === void 0) {
      parameters = {};
    }
    if (typeof parameters === "string") {
      return parameters;
    }
    var _parameters = parameters, name = _parameters.name, path = _parameters.path, params = _parameters.params, query = _parameters.query;
    if (!name && !path) {
      throw new Error('Framework7: "name" or "path" parameter is required');
    }
    var router = this;
    var route = name ? router.findRouteByKey("name", name) : router.findRouteByKey("path", path);
    if (!route) {
      if (name) {
        throw new Error('Framework7: route with name "' + name + '" not found');
      } else {
        throw new Error('Framework7: route with path "' + path + '" not found');
      }
    }
    var url = router.constructRouteUrl(route, {
      params,
      query
    });
    if (!url) {
      throw new Error(`Framework7: can't construct URL for route with name "` + name + '"');
    }
    return url;
  };
  _proto.constructRouteUrl = function constructRouteUrl(route, _temp) {
    var _ref = _temp === void 0 ? {} : _temp, params = _ref.params, query = _ref.query;
    var path = route.path;
    var toUrl = compile(path);
    var url;
    try {
      url = toUrl(params || {});
    } catch (error) {
      throw new Error("Framework7: error constructing route URL from passed params:\nRoute: " + path + "\n" + error.toString());
    }
    if (query) {
      if (typeof query === "string")
        url += "?" + query;
      else if (Object.keys(query).length)
        url += "?" + serializeObject(query);
    }
    return url;
  };
  _proto.findTabRouteUrl = function findTabRouteUrl(tabEl) {
    var router = this;
    var $tabEl = dom7_default(tabEl);
    var parentPath = router.currentRoute.route.parentPath;
    var tabId = $tabEl.attr("id");
    var flattenedRoutes = router.flattenRoutes(router.routes);
    var foundTabRouteUrl;
    flattenedRoutes.forEach(function(route) {
      if (route.parentPath === parentPath && route.tab && route.tab.id === tabId) {
        if (router.currentRoute.params && Object.keys(router.currentRoute.params).length > 0) {
          foundTabRouteUrl = router.constructRouteUrl(route, {
            params: router.currentRoute.params,
            query: router.currentRoute.query
          });
        } else {
          foundTabRouteUrl = route.path;
        }
      }
    });
    return foundTabRouteUrl;
  };
  _proto.findRouteByKey = function findRouteByKey(key, value) {
    var router = this;
    var routes = router.routes;
    var flattenedRoutes = router.flattenRoutes(routes);
    var matchingRoute;
    flattenedRoutes.forEach(function(route) {
      if (matchingRoute)
        return;
      if (route[key] === value) {
        matchingRoute = route;
      }
    });
    return matchingRoute;
  };
  _proto.findMatchingRoute = function findMatchingRoute(url) {
    if (!url)
      return void 0;
    var router = this;
    var routes = router.routes;
    var flattenedRoutes = router.flattenRoutes(routes);
    var _router$parseRouteUrl = router.parseRouteUrl(url), path = _router$parseRouteUrl.path, query = _router$parseRouteUrl.query, hash = _router$parseRouteUrl.hash, params = _router$parseRouteUrl.params;
    var matchingRoute;
    flattenedRoutes.forEach(function(route) {
      if (matchingRoute)
        return;
      var keys = [];
      var pathsToMatch = [route.path];
      if (route.alias) {
        if (typeof route.alias === "string")
          pathsToMatch.push(route.alias);
        else if (Array.isArray(route.alias)) {
          route.alias.forEach(function(aliasPath) {
            pathsToMatch.push(aliasPath);
          });
        }
      }
      var matched;
      pathsToMatch.forEach(function(pathToMatch) {
        if (matched)
          return;
        matched = pathToRegexp(pathToMatch, keys).exec(path);
      });
      if (matched) {
        keys.forEach(function(keyObj, index) {
          if (typeof keyObj.name === "number")
            return;
          var paramValue = matched[index + 1];
          if (typeof paramValue === "undefined" || paramValue === null) {
            params[keyObj.name] = paramValue;
          } else {
            params[keyObj.name] = decodeURIComponent(paramValue);
          }
        });
        var parentPath;
        if (route.parentPath) {
          parentPath = path.split("/").slice(0, route.parentPath.split("/").length - 1).join("/");
        }
        matchingRoute = {
          query,
          hash,
          params,
          url,
          path,
          parentPath,
          route,
          name: route.name
        };
      }
    });
    return matchingRoute;
  };
  _proto.replaceRequestUrlParams = function replaceRequestUrlParams(url, options) {
    if (url === void 0) {
      url = "";
    }
    if (options === void 0) {
      options = {};
    }
    var compiledUrl = url;
    if (typeof compiledUrl === "string" && compiledUrl.indexOf("{{") >= 0 && options && options.route && options.route.params && Object.keys(options.route.params).length) {
      Object.keys(options.route.params).forEach(function(paramName) {
        var regExp = new RegExp("{{" + paramName + "}}", "g");
        compiledUrl = compiledUrl.replace(regExp, options.route.params[paramName] || "");
      });
    }
    return compiledUrl;
  };
  _proto.removeFromXhrCache = function removeFromXhrCache(url) {
    var router = this;
    var xhrCache = router.cache.xhr;
    var index = false;
    for (var i = 0; i < xhrCache.length; i += 1) {
      if (xhrCache[i].url === url)
        index = i;
    }
    if (index !== false)
      xhrCache.splice(index, 1);
  };
  _proto.xhrRequest = function xhrRequest(requestUrl, options) {
    var router = this;
    var params = router.params;
    var ignoreCache = options.ignoreCache;
    var url = requestUrl;
    var hasQuery = url.indexOf("?") >= 0;
    if (params.passRouteQueryToRequest && options && options.route && options.route.query && Object.keys(options.route.query).length) {
      url += "" + (hasQuery ? "&" : "?") + serializeObject(options.route.query);
      hasQuery = true;
    }
    if (params.passRouteParamsToRequest && options && options.route && options.route.params && Object.keys(options.route.params).length) {
      url += "" + (hasQuery ? "&" : "?") + serializeObject(options.route.params);
      hasQuery = true;
    }
    if (url.indexOf("{{") >= 0) {
      url = router.replaceRequestUrlParams(url, options);
    }
    if (params.xhrCacheIgnoreGetParameters && url.indexOf("?") >= 0) {
      url = url.split("?")[0];
    }
    return new Promise(function(resolve, reject) {
      if (params.xhrCache && !ignoreCache && url.indexOf("nocache") < 0 && params.xhrCacheIgnore.indexOf(url) < 0) {
        for (var i = 0; i < router.cache.xhr.length; i += 1) {
          var cachedUrl = router.cache.xhr[i];
          if (cachedUrl.url === url) {
            if (now() - cachedUrl.time < params.xhrCacheDuration) {
              resolve(cachedUrl.content);
              return;
            }
          }
        }
      }
      router.xhrAbortController = router.app.request.abortController();
      router.app.request({
        abortController: router.xhrAbortController,
        url,
        method: "GET",
        beforeSend: function beforeSend(xhr) {
          router.emit("routerAjaxStart", xhr, options);
        },
        complete: function complete(xhr, status) {
          router.emit("routerAjaxComplete", xhr);
          if (status !== "error" && status !== "timeout" && xhr.status >= 200 && xhr.status < 300 || xhr.status === 0) {
            if (params.xhrCache && xhr.responseText !== "") {
              router.removeFromXhrCache(url);
              router.cache.xhr.push({
                url,
                time: now(),
                content: xhr.responseText
              });
            }
            router.emit("routerAjaxSuccess", xhr, options);
            resolve(xhr.responseText);
          } else {
            router.emit("routerAjaxError", xhr, options);
            reject(xhr);
          }
        },
        error: function error(xhr) {
          router.emit("routerAjaxError", xhr, options);
          reject(xhr);
        }
      });
    });
  };
  _proto.setNavbarPosition = function setNavbarPosition($el, position, ariaHidden) {
    var router = this;
    $el.removeClass("navbar-previous navbar-current navbar-next");
    if (position) {
      $el.addClass("navbar-" + position);
    }
    if (ariaHidden === false) {
      $el.removeAttr("aria-hidden");
    } else if (ariaHidden === true) {
      $el.attr("aria-hidden", "true");
    }
    $el.trigger("navbar:position", {
      position
    });
    router.emit("navbarPosition", $el[0], position);
  };
  _proto.setPagePosition = function setPagePosition($el, position, ariaHidden) {
    var router = this;
    $el.removeClass("page-previous page-current page-next");
    $el.addClass("page-" + position);
    if (ariaHidden === false) {
      $el.removeAttr("aria-hidden");
    } else if (ariaHidden === true) {
      $el.attr("aria-hidden", "true");
    }
    $el.trigger("page:position", {
      position
    });
    router.emit("pagePosition", $el[0], position);
  };
  _proto.removeThemeElements = function removeThemeElements(el) {
    var router = this;
    var theme = router.app.theme;
    var toRemove;
    if (theme === "ios") {
      toRemove = ".md-only, .aurora-only, .if-md, .if-aurora, .if-not-ios, .not-ios";
    } else if (theme === "md") {
      toRemove = ".ios-only, .aurora-only, .if-ios, .if-aurora, .if-not-md, .not-md";
    } else if (theme === "aurora") {
      toRemove = ".ios-only, .md-only, .if-ios, .if-md, .if-not-aurora, .not-aurora";
    }
    dom7_default(el).find(toRemove).remove();
  };
  _proto.getPageData = function getPageData(pageEl, navbarEl, from, to, route, pageFromEl) {
    if (route === void 0) {
      route = {};
    }
    var router = this;
    var $pageEl = dom7_default(pageEl).eq(0);
    var $navbarEl = dom7_default(navbarEl).eq(0);
    var currentPage = $pageEl[0].f7Page || {};
    var direction;
    var pageFrom;
    if (from === "next" && to === "current" || from === "current" && to === "previous")
      direction = "forward";
    if (from === "current" && to === "next" || from === "previous" && to === "current")
      direction = "backward";
    if (currentPage && !currentPage.fromPage) {
      var $pageFromEl = dom7_default(pageFromEl);
      if ($pageFromEl.length) {
        pageFrom = $pageFromEl[0].f7Page;
      }
    }
    pageFrom = currentPage.pageFrom || pageFrom;
    if (pageFrom && pageFrom.pageFrom) {
      pageFrom.pageFrom = null;
    }
    var page = {
      app: router.app,
      view: router.view,
      router,
      $el: $pageEl,
      el: $pageEl[0],
      $pageEl,
      pageEl: $pageEl[0],
      $navbarEl,
      navbarEl: $navbarEl[0],
      name: $pageEl.attr("data-name"),
      position: from,
      from,
      to,
      direction,
      route: currentPage.route ? currentPage.route : route,
      pageFrom
    };
    $pageEl[0].f7Page = page;
    return page;
  };
  _proto.pageCallback = function pageCallback(callback, pageEl, navbarEl, from, to, options, pageFromEl) {
    if (options === void 0) {
      options = {};
    }
    if (!pageEl)
      return;
    var router = this;
    var $pageEl = dom7_default(pageEl);
    if (!$pageEl.length)
      return;
    var $navbarEl = dom7_default(navbarEl);
    var _options = options, route = _options.route;
    var restoreScrollTopOnBack = router.params.restoreScrollTopOnBack && !(router.params.masterDetailBreakpoint > 0 && $pageEl.hasClass("page-master") && router.app.width >= router.params.masterDetailBreakpoint);
    var keepAlive = $pageEl[0].f7Page && $pageEl[0].f7Page.route && $pageEl[0].f7Page.route.route && $pageEl[0].f7Page.route.route.keepAlive;
    if (callback === "beforeRemove" && keepAlive) {
      callback = "beforeUnmount";
    }
    var camelName = "page" + (callback[0].toUpperCase() + callback.slice(1, callback.length));
    var colonName = "page:" + callback.toLowerCase();
    var page = {};
    if (callback === "beforeRemove" && $pageEl[0].f7Page) {
      page = extend($pageEl[0].f7Page, {
        from,
        to,
        position: from
      });
    } else {
      page = router.getPageData($pageEl[0], $navbarEl[0], from, to, route, pageFromEl);
    }
    page.swipeBack = !!options.swipeBack;
    var _ref2 = options.route ? options.route.route : {}, _ref2$on = _ref2.on, on = _ref2$on === void 0 ? {} : _ref2$on, _ref2$once = _ref2.once, once = _ref2$once === void 0 ? {} : _ref2$once;
    if (options.on) {
      extend(on, options.on);
    }
    if (options.once) {
      extend(once, options.once);
    }
    function attachEvents() {
      if ($pageEl[0].f7RouteEventsAttached)
        return;
      $pageEl[0].f7RouteEventsAttached = true;
      if (on && Object.keys(on).length > 0) {
        $pageEl[0].f7RouteEventsOn = on;
        Object.keys(on).forEach(function(eventName) {
          on[eventName] = on[eventName].bind(router);
          $pageEl.on(eventNameToColonCase(eventName), on[eventName]);
        });
      }
      if (once && Object.keys(once).length > 0) {
        $pageEl[0].f7RouteEventsOnce = once;
        Object.keys(once).forEach(function(eventName) {
          once[eventName] = once[eventName].bind(router);
          $pageEl.once(eventNameToColonCase(eventName), once[eventName]);
        });
      }
    }
    function detachEvents() {
      if (!$pageEl[0].f7RouteEventsAttached)
        return;
      if ($pageEl[0].f7RouteEventsOn) {
        Object.keys($pageEl[0].f7RouteEventsOn).forEach(function(eventName) {
          $pageEl.off(eventNameToColonCase(eventName), $pageEl[0].f7RouteEventsOn[eventName]);
        });
      }
      if ($pageEl[0].f7RouteEventsOnce) {
        Object.keys($pageEl[0].f7RouteEventsOnce).forEach(function(eventName) {
          $pageEl.off(eventNameToColonCase(eventName), $pageEl[0].f7RouteEventsOnce[eventName]);
        });
      }
      $pageEl[0].f7RouteEventsAttached = null;
      $pageEl[0].f7RouteEventsOn = null;
      $pageEl[0].f7RouteEventsOnce = null;
      delete $pageEl[0].f7RouteEventsAttached;
      delete $pageEl[0].f7RouteEventsOn;
      delete $pageEl[0].f7RouteEventsOnce;
    }
    if (callback === "mounted") {
      attachEvents();
    }
    if (callback === "init") {
      if (restoreScrollTopOnBack && (from === "previous" || !from) && to === "current" && router.scrollHistory[page.route.url] && !$pageEl.hasClass("no-restore-scroll")) {
        var $pageContent = $pageEl.find(".page-content");
        if ($pageContent.length > 0) {
          $pageContent = $pageContent.filter(function(pageContentEl) {
            return dom7_default(pageContentEl).parents(".tab:not(.tab-active)").length === 0 && !dom7_default(pageContentEl).is(".tab:not(.tab-active)");
          });
        }
        $pageContent.scrollTop(router.scrollHistory[page.route.url]);
      }
      attachEvents();
      if ($pageEl[0].f7PageInitialized) {
        $pageEl.trigger("page:reinit", page);
        router.emit("pageReinit", page);
        return;
      }
      $pageEl[0].f7PageInitialized = true;
    }
    if (restoreScrollTopOnBack && callback === "beforeOut" && from === "current" && to === "previous") {
      var _$pageContent = $pageEl.find(".page-content");
      if (_$pageContent.length > 0) {
        _$pageContent = _$pageContent.filter(function(pageContentEl) {
          return dom7_default(pageContentEl).parents(".tab:not(.tab-active)").length === 0 && !dom7_default(pageContentEl).is(".tab:not(.tab-active)");
        });
      }
      router.scrollHistory[page.route.url] = _$pageContent.scrollTop();
    }
    if (restoreScrollTopOnBack && callback === "beforeOut" && from === "current" && to === "next") {
      delete router.scrollHistory[page.route.url];
    }
    $pageEl.trigger(colonName, page);
    router.emit(camelName, page);
    if (callback === "beforeRemove" || callback === "beforeUnmount") {
      detachEvents();
      if (!keepAlive) {
        if ($pageEl[0].f7Page && $pageEl[0].f7Page.navbarEl) {
          delete $pageEl[0].f7Page.navbarEl.f7Page;
        }
        $pageEl[0].f7Page = null;
      }
    }
  };
  _proto.saveHistory = function saveHistory() {
    var router = this;
    var window2 = getWindow();
    router.view.history = router.history;
    if (router.params.browserHistory && router.params.browserHistoryStoreHistory && window2.localStorage) {
      window2.localStorage["f7router-" + router.view.id + "-history"] = JSON.stringify(router.history);
    }
  };
  _proto.restoreHistory = function restoreHistory() {
    var router = this;
    var window2 = getWindow();
    if (router.params.browserHistory && router.params.browserHistoryStoreHistory && window2.localStorage && window2.localStorage["f7router-" + router.view.id + "-history"]) {
      router.history = JSON.parse(window2.localStorage["f7router-" + router.view.id + "-history"]);
      router.view.history = router.history;
    }
  };
  _proto.clearHistory = function clearHistory() {
    var router = this;
    router.history = [];
    if (router.view)
      router.view.history = [];
    router.saveHistory();
  };
  _proto.updateCurrentUrl = function updateCurrentUrl(newUrl) {
    var router = this;
    appRouterCheck(router, "updateCurrentUrl");
    if (router.history.length) {
      router.history[router.history.length - 1] = newUrl;
    } else {
      router.history.push(newUrl);
    }
    var _router$parseRouteUrl2 = router.parseRouteUrl(newUrl), query = _router$parseRouteUrl2.query, hash = _router$parseRouteUrl2.hash, params = _router$parseRouteUrl2.params, url = _router$parseRouteUrl2.url, path = _router$parseRouteUrl2.path;
    if (router.currentRoute) {
      extend(router.currentRoute, {
        query,
        hash,
        params,
        url,
        path
      });
    }
    if (router.params.browserHistory) {
      var browserHistoryRoot = router.params.browserHistoryRoot || "";
      history_default.replace(router.view.id, {
        url: newUrl
      }, browserHistoryRoot + router.params.browserHistorySeparator + newUrl);
    }
    router.saveHistory();
    router.emit("routeUrlUpdate", router.currentRoute, router);
  };
  _proto.getInitialUrl = function getInitialUrl() {
    var router = this;
    if (router.initialUrl) {
      return {
        initialUrl: router.initialUrl,
        historyRestored: router.historyRestored
      };
    }
    var app = router.app, view = router.view;
    var document = getDocument();
    var window2 = getWindow();
    var location = app.params.url && typeof app.params.url === "string" && typeof URL !== "undefined" ? new URL(app.params.url) : document.location;
    var initialUrl = router.params.url;
    var documentUrl = location.href.split(location.origin)[1];
    var historyRestored;
    var _router$params = router.params, browserHistory = _router$params.browserHistory, browserHistoryOnLoad = _router$params.browserHistoryOnLoad, browserHistorySeparator = _router$params.browserHistorySeparator;
    var browserHistoryRoot = router.params.browserHistoryRoot;
    if ((window2.cordova || window2.Capacitor && window2.Capacitor.isNative) && browserHistory && !browserHistorySeparator && !browserHistoryRoot && location.pathname.indexOf("index.html")) {
      console.warn("Framework7: wrong or not complete browserHistory configuration, trying to guess browserHistoryRoot");
      browserHistoryRoot = location.pathname.split("index.html")[0];
    }
    if (!browserHistory || !browserHistoryOnLoad) {
      if (!initialUrl) {
        initialUrl = documentUrl;
      }
      if (location.search && initialUrl.indexOf("?") < 0) {
        initialUrl += location.search;
      }
      if (location.hash && initialUrl.indexOf("#") < 0) {
        initialUrl += location.hash;
      }
    } else {
      if (browserHistoryRoot && documentUrl.indexOf(browserHistoryRoot) >= 0) {
        documentUrl = documentUrl.split(browserHistoryRoot)[1];
        if (documentUrl === "")
          documentUrl = "/";
      }
      if (browserHistorySeparator.length > 0 && documentUrl.indexOf(browserHistorySeparator) >= 0) {
        initialUrl = documentUrl.split(browserHistorySeparator)[1];
      } else {
        initialUrl = documentUrl;
      }
      router.restoreHistory();
      if (router.history.indexOf(initialUrl) >= 0) {
        router.history = router.history.slice(0, router.history.indexOf(initialUrl) + 1);
      } else if (router.params.url === initialUrl) {
        router.history = [initialUrl];
      } else if (history_default.state && history_default.state[view.id] && history_default.state[view.id].url === router.history[router.history.length - 1]) {
        initialUrl = router.history[router.history.length - 1];
      } else {
        router.history = [documentUrl.split(browserHistorySeparator)[0] || "/", initialUrl];
      }
      if (router.history.length > 1) {
        historyRestored = true;
      } else {
        router.history = [];
      }
      router.saveHistory();
    }
    router.initialUrl = initialUrl;
    router.historyRestored = historyRestored;
    return {
      initialUrl,
      historyRestored
    };
  };
  _proto.init = function init12() {
    var router = this;
    var app = router.app, view = router.view;
    var document = getDocument();
    router.mount();
    var _router$getInitialUrl = router.getInitialUrl(), initialUrl = _router$getInitialUrl.initialUrl, historyRestored = _router$getInitialUrl.historyRestored;
    if (view && router.params.iosSwipeBack && app.theme === "ios" || view && router.params.mdSwipeBack && app.theme === "md" || view && router.params.auroraSwipeBack && app.theme === "aurora") {
      swipe_back_default(router);
    }
    var _router$params2 = router.params, browserHistory = _router$params2.browserHistory, browserHistoryOnLoad = _router$params2.browserHistoryOnLoad, browserHistoryAnimateOnLoad = _router$params2.browserHistoryAnimateOnLoad, browserHistoryInitialMatch = _router$params2.browserHistoryInitialMatch;
    var currentRoute;
    if (router.history.length > 1) {
      var initUrl = browserHistoryInitialMatch ? initialUrl : router.history[0];
      currentRoute = router.findMatchingRoute(initUrl);
      if (!currentRoute) {
        currentRoute = extend(router.parseRouteUrl(initUrl), {
          route: {
            url: initUrl,
            path: initUrl.split("?")[0]
          }
        });
      }
    } else {
      currentRoute = router.findMatchingRoute(initialUrl);
      if (!currentRoute) {
        currentRoute = extend(router.parseRouteUrl(initialUrl), {
          route: {
            url: initialUrl,
            path: initialUrl.split("?")[0]
          }
        });
      }
    }
    if (router.params.stackPages) {
      router.$el.children(".page").each(function(pageEl) {
        var $pageEl = dom7_default(pageEl);
        router.initialPages.push($pageEl[0]);
        if (router.dynamicNavbar && $pageEl.children(".navbar").length > 0) {
          router.initialNavbars.push($pageEl.children(".navbar")[0]);
        }
      });
    }
    if (router.$el.children(".page:not(.stacked)").length === 0 && initialUrl && router.params.loadInitialPage) {
      router.navigate(initialUrl, {
        initial: true,
        reloadCurrent: true,
        browserHistory: false,
        animate: false,
        once: {
          modalOpen: function modalOpen() {
            if (!historyRestored)
              return;
            var preloadPreviousPage2 = router.params.preloadPreviousPage || router.params[app.theme + "SwipeBack"];
            if (preloadPreviousPage2 && router.history.length > 1) {
              router.back({
                preload: true
              });
            }
          },
          pageAfterIn: function pageAfterIn() {
            if (!historyRestored)
              return;
            var preloadPreviousPage2 = router.params.preloadPreviousPage || router.params[app.theme + "SwipeBack"];
            if (preloadPreviousPage2 && router.history.length > 1) {
              router.back({
                preload: true
              });
            }
          }
        }
      });
    } else if (router.$el.children(".page:not(.stacked)").length) {
      var hasTabRoute;
      router.currentRoute = currentRoute;
      router.$el.children(".page:not(.stacked)").each(function(pageEl) {
        var $pageEl = dom7_default(pageEl);
        var $navbarEl;
        router.setPagePosition($pageEl, "current");
        if (router.dynamicNavbar) {
          $navbarEl = $pageEl.children(".navbar");
          if ($navbarEl.length > 0) {
            if (!router.$navbarsEl.parents(document).length) {
              router.$el.prepend(router.$navbarsEl);
            }
            router.setNavbarPosition($navbarEl, "current");
            router.$navbarsEl.append($navbarEl);
            if ($navbarEl.children(".title-large").length) {
              $navbarEl.addClass("navbar-large");
            }
            $pageEl.children(".navbar").remove();
          } else {
            router.$navbarsEl.addClass("navbar-hidden");
            if ($navbarEl.children(".title-large").length) {
              router.$navbarsEl.addClass("navbar-hidden navbar-large-hidden");
            }
          }
        }
        if (router.currentRoute && router.currentRoute.route && (router.currentRoute.route.master === true || typeof router.currentRoute.route.master === "function" && router.currentRoute.route.master(app, router)) && router.params.masterDetailBreakpoint > 0) {
          $pageEl.addClass("page-master");
          $pageEl.trigger("page:role", {
            role: "master"
          });
          if ($navbarEl && $navbarEl.length) {
            $navbarEl.addClass("navbar-master");
          }
          view.checkMasterDetailBreakpoint();
        }
        var initOptions = {
          route: router.currentRoute
        };
        if (router.currentRoute && router.currentRoute.route && router.currentRoute.route.options) {
          extend(initOptions, router.currentRoute.route.options);
        }
        router.currentPageEl = $pageEl[0];
        if (router.dynamicNavbar && $navbarEl.length) {
          router.currentNavbarEl = $navbarEl[0];
        }
        router.removeThemeElements($pageEl);
        if (router.dynamicNavbar && $navbarEl.length) {
          router.removeThemeElements($navbarEl);
        }
        if (initOptions.route.route.tab) {
          hasTabRoute = true;
          router.tabLoad(initOptions.route.route.tab, extend({}, initOptions));
        }
        router.pageCallback("init", $pageEl, $navbarEl, "current", void 0, initOptions);
        router.pageCallback("beforeIn", $pageEl, $navbarEl, "current", void 0, initOptions);
        router.pageCallback("afterIn", $pageEl, $navbarEl, "current", void 0, initOptions);
      });
      if (historyRestored) {
        if (browserHistoryInitialMatch) {
          var preloadPreviousPage = router.params.preloadPreviousPage || router.params[app.theme + "SwipeBack"];
          if (preloadPreviousPage && router.history.length > 1) {
            router.back({
              preload: true
            });
          }
        } else {
          router.navigate(initialUrl, {
            initial: true,
            browserHistory: false,
            history: false,
            animate: browserHistoryAnimateOnLoad,
            once: {
              pageAfterIn: function pageAfterIn() {
                var preloadPreviousPage2 = router.params.preloadPreviousPage || router.params[app.theme + "SwipeBack"];
                if (preloadPreviousPage2 && router.history.length > 2) {
                  router.back({
                    preload: true
                  });
                }
              }
            }
          });
        }
      }
      if (!historyRestored && !hasTabRoute) {
        router.history.push(initialUrl);
        router.saveHistory();
      }
    }
    if (initialUrl && browserHistory && browserHistoryOnLoad && (!history_default.state || !history_default.state[view.id])) {
      history_default.initViewState(view.id, {
        url: initialUrl
      });
    }
    router.emit("local::init routerInit", router);
  };
  _proto.destroy = function destroy2() {
    var router = this;
    router.emit("local::destroy routerDestroy", router);
    Object.keys(router).forEach(function(routerProp) {
      router[routerProp] = null;
      delete router[routerProp];
    });
    router = null;
  };
  return Router2;
}(class_default);
Router.prototype.navigate = navigate;
Router.prototype.refreshPage = refreshPage;
Router.prototype.tabLoad = tabLoad;
Router.prototype.tabRemove = tabRemove;
Router.prototype.modalLoad = modalLoad;
Router.prototype.modalRemove = modalRemove;
Router.prototype.back = back2;
Router.prototype.clearPreviousHistory = clearPreviousHistory;
var router_class_default = Router;

// node_modules/framework7/esm/modules/router/router.js
var router_default = {
  name: "router",
  static: {
    Router: router_class_default
  },
  instance: {
    cache: {
      xhr: [],
      templates: [],
      components: []
    }
  },
  create: function create3() {
    var instance = this;
    if (instance.app) {
      if (instance.params.router) {
        instance.router = new router_class_default(instance.app, instance);
      }
    } else {
      instance.router = new router_class_default(instance);
    }
  }
};

// node_modules/framework7/esm/components/view/resizable-view.js
function resizableView(view) {
  var app = view.app;
  var support2 = getSupport();
  if (view.resizableInitialized)
    return;
  extend(view, {
    resizable: true,
    resizableWidth: null,
    resizableInitialized: true
  });
  var $htmlEl = dom7_default("html");
  var $el = view.$el;
  if (!$el)
    return;
  var $resizeHandlerEl;
  var isTouched;
  var isMoved;
  var touchesStart = {};
  var touchesDiff;
  var width;
  var minWidth;
  var maxWidth;
  function transformCSSWidth(v) {
    if (!v)
      return null;
    if (v.indexOf("%") >= 0 || v.indexOf("vw") >= 0) {
      return parseInt(v, 10) / 100 * app.width;
    }
    var newV = parseInt(v, 10);
    if (Number.isNaN(newV))
      return null;
    return newV;
  }
  function isResizable() {
    return view.resizable && $el.hasClass("view-resizable") && $el.hasClass("view-master-detail");
  }
  function handleTouchStart(e) {
    if (!isResizable())
      return;
    touchesStart.x = e.type === "touchstart" ? e.targetTouches[0].pageX : e.pageX;
    touchesStart.y = e.type === "touchstart" ? e.targetTouches[0].pageY : e.pageY;
    isMoved = false;
    isTouched = true;
    var $pageMasterEl = $el.children(".page-master");
    minWidth = transformCSSWidth($pageMasterEl.css("min-width"));
    maxWidth = transformCSSWidth($pageMasterEl.css("max-width"));
  }
  function handleTouchMove(e) {
    if (!isTouched)
      return;
    e.f7PreventSwipePanel = true;
    var pageX = e.type === "touchmove" ? e.targetTouches[0].pageX : e.pageX;
    if (!isMoved) {
      width = $resizeHandlerEl[0].offsetLeft + $resizeHandlerEl[0].offsetWidth;
      $el.addClass("view-resizing");
      $htmlEl.css("cursor", "col-resize");
    }
    isMoved = true;
    e.preventDefault();
    touchesDiff = pageX - touchesStart.x;
    var newWidth = width + touchesDiff;
    if (minWidth && !Number.isNaN(minWidth)) {
      newWidth = Math.max(newWidth, minWidth);
    }
    if (maxWidth && !Number.isNaN(maxWidth)) {
      newWidth = Math.min(newWidth, maxWidth);
    }
    newWidth = Math.min(Math.max(newWidth, 0), app.width);
    view.resizableWidth = newWidth;
    $htmlEl[0].style.setProperty("--f7-page-master-width", newWidth + "px");
    $el.trigger("view:resize", newWidth);
    view.emit("local::resize viewResize", view, newWidth);
  }
  function handleTouchEnd() {
    dom7_default("html").css("cursor", "");
    if (!isTouched || !isMoved) {
      isTouched = false;
      isMoved = false;
      return;
    }
    isTouched = false;
    isMoved = false;
    $htmlEl[0].style.setProperty("--f7-page-master-width", view.resizableWidth + "px");
    $el.removeClass("view-resizing");
  }
  function handleResize() {
    if (!view.resizableWidth)
      return;
    minWidth = transformCSSWidth($resizeHandlerEl.css("min-width"));
    maxWidth = transformCSSWidth($resizeHandlerEl.css("max-width"));
    if (minWidth && !Number.isNaN(minWidth) && view.resizableWidth < minWidth) {
      view.resizableWidth = Math.max(view.resizableWidth, minWidth);
    }
    if (maxWidth && !Number.isNaN(maxWidth) && view.resizableWidth > maxWidth) {
      view.resizableWidth = Math.min(view.resizableWidth, maxWidth);
    }
    view.resizableWidth = Math.min(Math.max(view.resizableWidth, 0), app.width);
    $htmlEl[0].style.setProperty("--f7-page-master-width", view.resizableWidth + "px");
  }
  $resizeHandlerEl = view.$el.children(".view-resize-handler");
  if (!$resizeHandlerEl.length) {
    view.$el.append('<div class="view-resize-handler"></div>');
    $resizeHandlerEl = view.$el.children(".view-resize-handler");
  }
  view.$resizeHandlerEl = $resizeHandlerEl;
  $el.addClass("view-resizable");
  var passive = support2.passiveListener ? {
    passive: true
  } : false;
  view.$el.on(app.touchEvents.start, ".view-resize-handler", handleTouchStart, passive);
  app.on("touchmove:active", handleTouchMove);
  app.on("touchend:passive", handleTouchEnd);
  app.on("resize", handleResize);
  view.on("beforeOpen", handleResize);
  view.once("viewDestroy", function() {
    $el.removeClass("view-resizable");
    view.$resizeHandlerEl.remove();
    view.$el.off(app.touchEvents.start, ".view-resize-handler", handleTouchStart, passive);
    app.off("touchmove:active", handleTouchMove);
    app.off("touchend:passive", handleTouchEnd);
    app.off("resize", handleResize);
    view.off("beforeOpen", handleResize);
  });
}
var resizable_view_default = resizableView;

// node_modules/framework7/esm/components/view/view-class.js
function _assertThisInitialized5(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose5(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf6(subClass, superClass);
}
function _setPrototypeOf6(o, p) {
  _setPrototypeOf6 = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf6(o, p);
}
var View = function(_Framework7Class) {
  _inheritsLoose5(View2, _Framework7Class);
  function View2(app, el, viewParams) {
    var _this;
    if (viewParams === void 0) {
      viewParams = {};
    }
    _this = _Framework7Class.call(this, viewParams, [app]) || this;
    var view = _assertThisInitialized5(_this);
    var ssr = view.params.routerId;
    var defaults = {
      routes: [],
      routesAdd: []
    };
    if (!ssr) {
      var $el = dom7_default(el);
      if (!$el.length) {
        var message = "Framework7: can't create a View instance because ";
        message += typeof el === "string" ? 'the selector "' + el + `" didn't match any element` : "el must be an HTMLElement or Dom7 object";
        throw new Error(message);
      }
    }
    view.params = extend({
      el
    }, defaults, app.params.view, viewParams);
    if (view.params.routes.length > 0) {
      view.routes = view.params.routes;
    } else {
      view.routes = [].concat(app.routes, view.params.routesAdd);
    }
    extend(false, view, {
      app,
      name: view.params.name,
      main: view.params.main,
      history: [],
      scrollHistory: {}
    });
    view.useModules();
    app.views.push(view);
    if (view.main) {
      app.views.main = view;
    }
    if (view.name) {
      app.views[view.name] = view;
    }
    view.index = app.views.indexOf(view);
    var viewId;
    if (view.name) {
      viewId = "view_" + view.name;
    } else if (view.main) {
      viewId = "view_main";
    } else {
      viewId = "view_" + view.index;
    }
    view.id = viewId;
    if (!view.params.init) {
      return view || _assertThisInitialized5(_this);
    }
    if (app.initialized) {
      view.init();
    } else {
      app.on("init", function() {
        view.init();
      });
    }
    return view || _assertThisInitialized5(_this);
  }
  var _proto = View2.prototype;
  _proto.destroy = function destroy2() {
    var view = this;
    var app = view.app;
    view.$el.trigger("view:beforedestroy");
    view.emit("local::beforeDestroy viewBeforeDestroy", view);
    app.off("resize", view.checkMasterDetailBreakpoint);
    if (view.main) {
      app.views.main = null;
      delete app.views.main;
    } else if (view.name) {
      app.views[view.name] = null;
      delete app.views[view.name];
    }
    view.$el[0].f7View = null;
    delete view.$el[0].f7View;
    app.views.splice(app.views.indexOf(view), 1);
    if (view.params.router && view.router) {
      view.router.destroy();
    }
    view.emit("local::destroy viewDestroy", view);
    Object.keys(view).forEach(function(viewProp) {
      view[viewProp] = null;
      delete view[viewProp];
    });
    view = null;
  };
  _proto.checkMasterDetailBreakpoint = function checkMasterDetailBreakpoint(force) {
    var view = this;
    var app = view.app;
    var wasMasterDetail = view.$el.hasClass("view-master-detail");
    var isMasterDetail = app.width >= view.params.masterDetailBreakpoint && view.$el.children(".page-master").length;
    if (typeof force === "undefined" && isMasterDetail || force === true) {
      view.$el.addClass("view-master-detail");
      if (!wasMasterDetail) {
        view.emit("local::masterDetailBreakpoint viewMasterDetailBreakpoint", view);
        view.$el.trigger("view:masterDetailBreakpoint");
      }
    } else {
      view.$el.removeClass("view-master-detail");
      if (wasMasterDetail) {
        view.emit("local::masterDetailBreakpoint viewMasterDetailBreakpoint", view);
        view.$el.trigger("view:masterDetailBreakpoint");
      }
    }
  };
  _proto.initMasterDetail = function initMasterDetail() {
    var view = this;
    var app = view.app;
    view.checkMasterDetailBreakpoint = view.checkMasterDetailBreakpoint.bind(view);
    view.checkMasterDetailBreakpoint();
    if (view.params.masterDetailResizable) {
      resizable_view_default(view);
    }
    app.on("resize", view.checkMasterDetailBreakpoint);
  };
  _proto.mount = function mount(viewEl) {
    var view = this;
    var app = view.app;
    var el = view.params.el || viewEl;
    var $el = dom7_default(el);
    var selector;
    if (typeof el === "string")
      selector = el;
    else {
      selector = ($el.attr("id") ? "#" + $el.attr("id") : "") + ($el.attr("class") ? "." + $el.attr("class").replace(/ /g, ".").replace(".active", "") : "");
    }
    var $navbarsEl;
    if (app.theme === "ios" && view.params.iosDynamicNavbar) {
      $navbarsEl = $el.children(".navbars").eq(0);
      if ($navbarsEl.length === 0) {
        $navbarsEl = dom7_default('<div class="navbars"></div>');
      }
    }
    extend(view, {
      $el,
      el: $el[0],
      main: view.main || $el.hasClass("view-main"),
      $navbarsEl,
      navbarsEl: $navbarsEl ? $navbarsEl[0] : void 0,
      selector
    });
    if (view.main) {
      app.views.main = view;
    }
    if ($el && $el[0]) {
      $el[0].f7View = view;
    }
    view.emit("local::mount viewMount", view);
  };
  _proto.init = function init12(viewEl) {
    var view = this;
    view.mount(viewEl);
    if (view.params.router) {
      if (view.params.masterDetailBreakpoint > 0) {
        view.initMasterDetail();
      }
      view.router.init();
      view.$el.trigger("view:init");
      view.emit("local::init viewInit", view);
    }
  };
  return View2;
}(class_default);
View.use(router_default);
var view_class_default = View;

// node_modules/framework7/esm/modules/clicks/clicks.js
function initClicks(app) {
  function handleClicks(e) {
    var window2 = getWindow();
    var $clickedEl = dom7_default(e.target);
    var $clickedLinkEl = $clickedEl.closest("a");
    var isLink = $clickedLinkEl.length > 0;
    var url = isLink && $clickedLinkEl.attr("href");
    if (isLink) {
      if ($clickedLinkEl.is(app.params.clicks.externalLinks) || url && url.indexOf("javascript:") >= 0) {
        var target = $clickedLinkEl.attr("target");
        if (url && window2.cordova && window2.cordova.InAppBrowser && (target === "_system" || target === "_blank")) {
          e.preventDefault();
          window2.cordova.InAppBrowser.open(url, target);
        } else if (url && window2.Capacitor && window2.Capacitor.Plugins && window2.Capacitor.Plugins.Browser && (target === "_system" || target === "_blank")) {
          e.preventDefault();
          window2.Capacitor.Plugins.Browser.open({
            url
          });
        }
        return;
      }
    }
    Object.keys(app.modules).forEach(function(moduleName) {
      var moduleClicks = app.modules[moduleName].clicks;
      if (!moduleClicks)
        return;
      if (e.preventF7Router)
        return;
      Object.keys(moduleClicks).forEach(function(clickSelector) {
        var matchingClickedElement = $clickedEl.closest(clickSelector).eq(0);
        if (matchingClickedElement.length > 0) {
          moduleClicks[clickSelector].call(app, matchingClickedElement, matchingClickedElement.dataset(), e);
        }
      });
    });
    var clickedLinkData = {};
    if (isLink) {
      e.preventDefault();
      clickedLinkData = $clickedLinkEl.dataset();
    }
    clickedLinkData.clickedEl = $clickedLinkEl[0];
    if (e.preventF7Router)
      return;
    if ($clickedLinkEl.hasClass("prevent-router") || $clickedLinkEl.hasClass("router-prevent"))
      return;
    var validUrl = url && url.length > 0 && url[0] !== "#";
    if (validUrl || $clickedLinkEl.hasClass("back")) {
      var view;
      if (clickedLinkData.view && clickedLinkData.view === "current") {
        view = app.views.current;
      } else if (clickedLinkData.view) {
        view = dom7_default(clickedLinkData.view)[0].f7View;
      } else {
        view = $clickedEl.parents(".view")[0] && $clickedEl.parents(".view")[0].f7View;
        if (!$clickedLinkEl.hasClass("back") && view && view.params.linksView) {
          if (typeof view.params.linksView === "string")
            view = dom7_default(view.params.linksView)[0].f7View;
          else if (view.params.linksView instanceof view_class_default)
            view = view.params.linksView;
        }
      }
      if (!view) {
        if (app.views.main)
          view = app.views.main;
      }
      if (!view || !view.router)
        return;
      if ($clickedLinkEl[0].f7RouteProps) {
        clickedLinkData.props = $clickedLinkEl[0].f7RouteProps;
      }
      if ($clickedLinkEl.hasClass("back"))
        view.router.back(url, clickedLinkData);
      else
        view.router.navigate(url, clickedLinkData);
    }
  }
  app.on("click", handleClicks);
}
var clicks_default = {
  name: "clicks",
  params: {
    clicks: {
      externalLinks: ".external"
    }
  },
  on: {
    init: function init4() {
      var app = this;
      initClicks(app);
    }
  }
};

// node_modules/framework7/esm/modules/history/history.js
var history_default2 = {
  name: "history",
  static: {
    history: history_default
  },
  on: {
    init: function init5() {
      history_default.init(this);
    }
  }
};

// node_modules/framework7/esm/modules/service-worker/service-worker.js
var SW = {
  registrations: [],
  register: function register(path, scope) {
    var app = this;
    var window2 = getWindow();
    if (!("serviceWorker" in window2.navigator) || !app.serviceWorker.container) {
      return new Promise(function(resolve, reject) {
        reject(new Error("Service worker is not supported"));
      });
    }
    return new Promise(function(resolve, reject) {
      app.serviceWorker.container.register(path, scope ? {
        scope
      } : {}).then(function(reg) {
        SW.registrations.push(reg);
        app.emit("serviceWorkerRegisterSuccess", reg);
        resolve(reg);
      }).catch(function(error) {
        app.emit("serviceWorkerRegisterError", error);
        reject(error);
      });
    });
  },
  unregister: function unregister(registration) {
    var app = this;
    var window2 = getWindow();
    if (!("serviceWorker" in window2.navigator) || !app.serviceWorker.container) {
      return new Promise(function(resolve, reject) {
        reject(new Error("Service worker is not supported"));
      });
    }
    var registrations;
    if (!registration)
      registrations = SW.registrations;
    else if (Array.isArray(registration))
      registrations = registration;
    else
      registrations = [registration];
    return Promise.all(registrations.map(function(reg) {
      return new Promise(function(resolve, reject) {
        reg.unregister().then(function() {
          if (SW.registrations.indexOf(reg) >= 0) {
            SW.registrations.splice(SW.registrations.indexOf(reg), 1);
          }
          app.emit("serviceWorkerUnregisterSuccess", reg);
          resolve();
        }).catch(function(error) {
          app.emit("serviceWorkerUnregisterError", reg, error);
          reject(error);
        });
      });
    }));
  }
};
var service_worker_default = {
  name: "sw",
  params: {
    serviceWorker: {
      path: void 0,
      scope: void 0
    }
  },
  create: function create4() {
    var app = this;
    var window2 = getWindow();
    extend(app, {
      serviceWorker: {
        container: "serviceWorker" in window2.navigator ? window2.navigator.serviceWorker : void 0,
        registrations: SW.registrations,
        register: SW.register.bind(app),
        unregister: SW.unregister.bind(app)
      }
    });
  },
  on: {
    init: function init6() {
      var window2 = getWindow();
      if (!("serviceWorker" in window2.navigator))
        return;
      var app = this;
      if (app.device.cordova || window2.Capacitor && window2.Capacitor.isNative)
        return;
      if (!app.serviceWorker.container)
        return;
      var paths = app.params.serviceWorker.path;
      var scope = app.params.serviceWorker.scope;
      if (!paths || Array.isArray(paths) && !paths.length)
        return;
      var toRegister = Array.isArray(paths) ? paths : [paths];
      toRegister.forEach(function(path) {
        app.serviceWorker.register(path, scope);
      });
    }
  }
};

// node_modules/framework7/esm/components/statusbar/statusbar.js
var isCapacitor = function isCapacitor2() {
  var window2 = getWindow();
  return window2.Capacitor && window2.Capacitor.isNative && window2.Capacitor.Plugins && window2.Capacitor.Plugins.StatusBar;
};
var Statusbar = {
  hide: function hide() {
    var window2 = getWindow();
    var device = getDevice();
    if (device.cordova && window2.StatusBar) {
      window2.StatusBar.hide();
    }
    if (isCapacitor()) {
      window2.Capacitor.Plugins.StatusBar.hide();
    }
  },
  show: function show() {
    var window2 = getWindow();
    var device = getDevice();
    if (device.cordova && window2.StatusBar) {
      window2.StatusBar.show();
    }
    if (isCapacitor()) {
      window2.Capacitor.Plugins.StatusBar.show();
    }
  },
  onClick: function onClick() {
    var app = this;
    var pageContent;
    if (dom7_default(".popup.modal-in").length > 0) {
      pageContent = dom7_default(".popup.modal-in").find(".page:not(.page-previous):not(.page-next):not(.cached)").find(".page-content");
    } else if (dom7_default(".panel.panel-in").length > 0) {
      pageContent = dom7_default(".panel.panel-in").find(".page:not(.page-previous):not(.page-next):not(.cached)").find(".page-content");
    } else if (dom7_default(".views > .view.tab-active").length > 0) {
      pageContent = dom7_default(".views > .view.tab-active").find(".page:not(.page-previous):not(.page-next):not(.cached)").find(".page-content");
    } else if (dom7_default(".views").length > 0) {
      pageContent = dom7_default(".views").find(".page:not(.page-previous):not(.page-next):not(.cached)").find(".page-content");
    } else {
      pageContent = app.$el.children(".view").find(".page:not(.page-previous):not(.page-next):not(.cached)").find(".page-content");
    }
    if (pageContent && pageContent.length > 0) {
      if (pageContent.hasClass("tab")) {
        pageContent = pageContent.parent(".tabs").children(".page-content.tab-active");
      }
      if (pageContent.length > 0)
        pageContent.scrollTop(0, 300);
    }
  },
  setTextColor: function setTextColor(color) {
    var window2 = getWindow();
    var device = getDevice();
    if (device.cordova && window2.StatusBar) {
      if (color === "white") {
        window2.StatusBar.styleLightContent();
      } else {
        window2.StatusBar.styleDefault();
      }
    }
    if (isCapacitor()) {
      if (color === "white") {
        window2.Capacitor.Plugins.StatusBar.setStyle({
          style: "DARK"
        });
      } else {
        window2.Capacitor.Plugins.StatusBar.setStyle({
          style: "LIGHT"
        });
      }
    }
  },
  setBackgroundColor: function setBackgroundColor(color) {
    var window2 = getWindow();
    var device = getDevice();
    if (device.cordova && window2.StatusBar) {
      window2.StatusBar.backgroundColorByHexString(color);
    }
    if (isCapacitor()) {
      window2.Capacitor.Plugins.StatusBar.setBackgroundColor({
        color
      });
    }
  },
  isVisible: function isVisible() {
    var window2 = getWindow();
    var device = getDevice();
    return new Promise(function(resolve) {
      if (device.cordova && window2.StatusBar) {
        resolve(window2.StatusBar.isVisible);
      }
      if (isCapacitor()) {
        window2.Capacitor.Plugins.StatusBar.getInfo().then(function(info) {
          resolve(info.visible);
        });
      }
      resolve(false);
    });
  },
  overlaysWebView: function overlaysWebView(overlays) {
    if (overlays === void 0) {
      overlays = true;
    }
    var window2 = getWindow();
    var device = getDevice();
    if (device.cordova && window2.StatusBar) {
      window2.StatusBar.overlaysWebView(overlays);
    }
    if (isCapacitor()) {
      window2.Capacitor.Plugins.StatusBar.setOverlaysWebView({
        overlay: overlays
      });
    }
  },
  init: function init7() {
    var app = this;
    var window2 = getWindow();
    var device = getDevice();
    var params = app.params.statusbar;
    if (!params.enabled)
      return;
    var isCordova = device.cordova && window2.StatusBar;
    var isCap = isCapacitor();
    if (isCordova || isCap) {
      if (params.scrollTopOnClick) {
        dom7_default(window2).on("statusTap", Statusbar.onClick.bind(app));
      }
      if (device.ios) {
        if (params.iosOverlaysWebView) {
          Statusbar.overlaysWebView(true);
        } else {
          Statusbar.overlaysWebView(false);
        }
        if (params.iosTextColor === "white") {
          Statusbar.setTextColor("white");
        } else {
          Statusbar.setTextColor("black");
        }
      }
      if (device.android) {
        if (params.androidOverlaysWebView) {
          Statusbar.overlaysWebView(true);
        } else {
          Statusbar.overlaysWebView(false);
        }
        if (params.androidTextColor === "white") {
          Statusbar.setTextColor("white");
        } else {
          Statusbar.setTextColor("black");
        }
      }
    }
    if (params.iosBackgroundColor && device.ios) {
      Statusbar.setBackgroundColor(params.iosBackgroundColor);
    }
    if (params.androidBackgroundColor && device.android) {
      Statusbar.setBackgroundColor(params.androidBackgroundColor);
    }
  }
};
var statusbar_default = {
  name: "statusbar",
  params: {
    statusbar: {
      enabled: true,
      scrollTopOnClick: true,
      iosOverlaysWebView: true,
      iosTextColor: "black",
      iosBackgroundColor: null,
      androidOverlaysWebView: false,
      androidTextColor: "black",
      androidBackgroundColor: null
    }
  },
  create: function create5() {
    var app = this;
    bindMethods(app, {
      statusbar: Statusbar
    });
  },
  on: {
    init: function init8() {
      var app = this;
      Statusbar.init.call(app);
    }
  }
};

// node_modules/framework7/esm/components/view/view.js
function getCurrentView(app) {
  var $popoverView = dom7_default(".popover.modal-in .view");
  var $popupView = dom7_default(".popup.modal-in .view");
  var $panelView = dom7_default(".panel.panel-in .view");
  var $viewsEl = dom7_default(".views");
  if ($viewsEl.length === 0)
    $viewsEl = app.$el;
  var $viewEl = $viewsEl.children(".view");
  if ($viewEl.length === 0) {
    $viewEl = $viewsEl.children(".tabs").children(".view");
  }
  if ($viewEl.length > 1) {
    if ($viewEl.hasClass("tab")) {
      $viewEl = $viewsEl.children(".view.tab-active");
      if ($viewEl.length === 0) {
        $viewEl = $viewsEl.children(".tabs").children(".view.tab-active");
      }
    } else {
    }
  }
  if ($popoverView.length > 0 && $popoverView[0].f7View)
    return $popoverView[0].f7View;
  if ($popupView.length > 0 && $popupView[0].f7View)
    return $popupView[0].f7View;
  if ($panelView.length > 0 && $panelView[0].f7View)
    return $panelView[0].f7View;
  if ($viewEl.length > 0) {
    if ($viewEl.length === 1 && $viewEl[0].f7View)
      return $viewEl[0].f7View;
    if ($viewEl.length > 1) {
      return app.views.main;
    }
  }
  return void 0;
}
var view_default = {
  name: "view",
  params: {
    view: {
      init: true,
      name: void 0,
      main: false,
      router: true,
      linksView: null,
      stackPages: false,
      xhrCache: true,
      xhrCacheIgnore: [],
      xhrCacheIgnoreGetParameters: false,
      xhrCacheDuration: 1e3 * 60 * 10,
      componentCache: true,
      preloadPreviousPage: true,
      allowDuplicateUrls: false,
      reloadPages: false,
      reloadDetail: false,
      masterDetailBreakpoint: 0,
      masterDetailResizable: false,
      removeElements: true,
      removeElementsWithTimeout: false,
      removeElementsTimeout: 0,
      restoreScrollTopOnBack: true,
      unloadTabContent: true,
      passRouteQueryToRequest: true,
      passRouteParamsToRequest: false,
      loadInitialPage: true,
      iosSwipeBack: true,
      iosSwipeBackAnimateShadow: true,
      iosSwipeBackAnimateOpacity: true,
      iosSwipeBackActiveArea: 30,
      iosSwipeBackThreshold: 0,
      mdSwipeBack: false,
      mdSwipeBackAnimateShadow: true,
      mdSwipeBackAnimateOpacity: false,
      mdSwipeBackActiveArea: 30,
      mdSwipeBackThreshold: 0,
      auroraSwipeBack: false,
      auroraSwipeBackAnimateShadow: false,
      auroraSwipeBackAnimateOpacity: true,
      auroraSwipeBackActiveArea: 30,
      auroraSwipeBackThreshold: 0,
      browserHistory: false,
      browserHistoryRoot: void 0,
      browserHistoryAnimate: true,
      browserHistoryAnimateOnLoad: false,
      browserHistorySeparator: "#!",
      browserHistoryOnLoad: true,
      browserHistoryInitialMatch: false,
      browserHistoryStoreHistory: true,
      animate: true,
      iosDynamicNavbar: true,
      iosAnimateNavbarBackIcon: true,
      iosPageLoadDelay: 0,
      mdPageLoadDelay: 0,
      auroraPageLoadDelay: 0,
      routesBeforeEnter: null,
      routesBeforeLeave: null
    }
  },
  static: {
    View: view_class_default
  },
  create: function create6() {
    var app = this;
    extend(app, {
      views: extend([], {
        create: function create11(el, params) {
          return new view_class_default(app, el, params);
        },
        get: function get2(viewEl) {
          var $viewEl = dom7_default(viewEl);
          if ($viewEl.length && $viewEl[0].f7View)
            return $viewEl[0].f7View;
          return void 0;
        }
      })
    });
    Object.defineProperty(app.views, "current", {
      enumerable: true,
      configurable: true,
      get: function get2() {
        return getCurrentView(app);
      }
    });
    app.view = app.views;
  },
  on: {
    init: function init9() {
      var app = this;
      dom7_default(".view-init").each(function(viewEl) {
        if (viewEl.f7View)
          return;
        var viewParams = dom7_default(viewEl).dataset();
        app.views.create(viewEl, viewParams);
      });
    },
    "modalOpen panelOpen": function onOpen(instance) {
      var app = this;
      instance.$el.find(".view-init").each(function(viewEl) {
        if (viewEl.f7View)
          return;
        var viewParams = dom7_default(viewEl).dataset();
        app.views.create(viewEl, viewParams);
      });
    },
    "modalBeforeDestroy panelBeforeDestroy": function onClose(instance) {
      if (!instance || !instance.$el)
        return;
      instance.$el.find(".view-init").each(function(viewEl) {
        var view = viewEl.f7View;
        if (!view)
          return;
        view.destroy();
      });
    }
  },
  vnode: {
    "view-init": {
      insert: function insert(vnode) {
        var app = this;
        var viewEl = vnode.elm;
        if (viewEl.f7View)
          return;
        var viewParams = dom7_default(viewEl).dataset();
        app.views.create(viewEl, viewParams);
      },
      destroy: function destroy(vnode) {
        var viewEl = vnode.elm;
        var view = viewEl.f7View;
        if (!view)
          return;
        view.destroy();
      }
    }
  }
};

// node_modules/framework7/esm/components/navbar/navbar.js
var Navbar = {
  size: function size(el) {
    var app = this;
    var $el = dom7_default(el);
    if ($el.hasClass("navbars")) {
      $el = $el.children(".navbar").each(function(navbarEl) {
        app.navbar.size(navbarEl);
      });
      return;
    }
    var $innerEl = $el.children(".navbar-inner");
    if (!$innerEl.length)
      return;
    var needCenterTitle = $innerEl.hasClass("navbar-inner-centered-title") || app.params.navbar[app.theme + "CenterTitle"];
    var needLeftTitle = app.theme === "ios" && !app.params.navbar[app.theme + "CenterTitle"];
    if (!needCenterTitle && !needLeftTitle)
      return;
    if ($el.hasClass("stacked") || $el.parents(".stacked").length > 0 || $el.parents(".tab:not(.tab-active)").length > 0 || $el.parents(".popup:not(.modal-in)").length > 0) {
      return;
    }
    if (app.theme !== "ios" && app.params.navbar[app.theme + "CenterTitle"]) {
      $innerEl.addClass("navbar-inner-centered-title");
    }
    if (app.theme === "ios" && !app.params.navbar.iosCenterTitle) {
      $innerEl.addClass("navbar-inner-left-title");
    }
    var $viewEl = $el.parents(".view").eq(0);
    var left = app.rtl ? $innerEl.children(".right") : $innerEl.children(".left");
    var right = app.rtl ? $innerEl.children(".left") : $innerEl.children(".right");
    var title = $innerEl.children(".title");
    var subnavbar = $innerEl.children(".subnavbar");
    var noLeft = left.length === 0;
    var noRight = right.length === 0;
    var leftWidth = noLeft ? 0 : left.outerWidth(true);
    var rightWidth = noRight ? 0 : right.outerWidth(true);
    var titleWidth = title.outerWidth(true);
    var navbarStyles = $innerEl.styles();
    var navbarWidth = $innerEl[0].offsetWidth;
    var navbarInnerWidth = navbarWidth - parseInt(navbarStyles.paddingLeft, 10) - parseInt(navbarStyles.paddingRight, 10);
    var isPrevious = $el.hasClass("navbar-previous");
    var sliding = $innerEl.hasClass("sliding");
    var router;
    var dynamicNavbar;
    if ($viewEl.length > 0 && $viewEl[0].f7View) {
      router = $viewEl[0].f7View.router;
      dynamicNavbar = router && router.dynamicNavbar;
    }
    var currLeft;
    var diff;
    if (noRight) {
      currLeft = navbarInnerWidth - titleWidth;
    }
    if (noLeft) {
      currLeft = 0;
    }
    if (!noLeft && !noRight) {
      currLeft = (navbarInnerWidth - rightWidth - titleWidth + leftWidth) / 2;
    }
    var requiredLeft = (navbarInnerWidth - titleWidth) / 2;
    if (navbarInnerWidth - leftWidth - rightWidth > titleWidth) {
      if (requiredLeft < leftWidth) {
        requiredLeft = leftWidth;
      }
      if (requiredLeft + titleWidth > navbarInnerWidth - rightWidth) {
        requiredLeft = navbarInnerWidth - rightWidth - titleWidth;
      }
      diff = requiredLeft - currLeft;
    } else {
      diff = 0;
    }
    var inverter = app.rtl ? -1 : 1;
    if (dynamicNavbar && app.theme === "ios") {
      if (title.hasClass("sliding") || title.length > 0 && sliding) {
        var titleLeftOffset = -(currLeft + diff) * inverter;
        var titleRightOffset = (navbarInnerWidth - currLeft - diff - titleWidth) * inverter;
        if (isPrevious) {
          if (router && router.params.iosAnimateNavbarBackIcon) {
            var activeNavbarBackLink = $el.parent().find(".navbar-current").children(".left.sliding").find(".back .icon ~ span");
            if (activeNavbarBackLink.length > 0) {
              titleLeftOffset += activeNavbarBackLink[0].offsetLeft;
            }
          }
        }
        title[0].f7NavbarLeftOffset = titleLeftOffset;
        title[0].f7NavbarRightOffset = titleRightOffset;
      }
      if (!noLeft && (left.hasClass("sliding") || sliding)) {
        if (app.rtl) {
          left[0].f7NavbarLeftOffset = -(navbarInnerWidth - left[0].offsetWidth) / 2 * inverter;
          left[0].f7NavbarRightOffset = leftWidth * inverter;
        } else {
          left[0].f7NavbarLeftOffset = -leftWidth;
          left[0].f7NavbarRightOffset = (navbarInnerWidth - left[0].offsetWidth) / 2;
          if (router && router.params.iosAnimateNavbarBackIcon && left.find(".back .icon").length > 0) {
            if (left.find(".back .icon ~ span").length) {
              var leftOffset = left[0].f7NavbarLeftOffset;
              var rightOffset = left[0].f7NavbarRightOffset;
              left[0].f7NavbarLeftOffset = 0;
              left[0].f7NavbarRightOffset = 0;
              left.find(".back .icon ~ span")[0].f7NavbarLeftOffset = leftOffset;
              left.find(".back .icon ~ span")[0].f7NavbarRightOffset = rightOffset - left.find(".back .icon")[0].offsetWidth;
            }
          }
        }
      }
      if (!noRight && (right.hasClass("sliding") || sliding)) {
        if (app.rtl) {
          right[0].f7NavbarLeftOffset = -rightWidth * inverter;
          right[0].f7NavbarRightOffset = (navbarInnerWidth - right[0].offsetWidth) / 2 * inverter;
        } else {
          right[0].f7NavbarLeftOffset = -(navbarInnerWidth - right[0].offsetWidth) / 2;
          right[0].f7NavbarRightOffset = rightWidth;
        }
      }
      if (subnavbar.length && (subnavbar.hasClass("sliding") || sliding)) {
        subnavbar[0].f7NavbarLeftOffset = app.rtl ? subnavbar[0].offsetWidth : -subnavbar[0].offsetWidth;
        subnavbar[0].f7NavbarRightOffset = -subnavbar[0].f7NavbarLeftOffset;
      }
    }
    if (needCenterTitle) {
      var titleLeft = diff;
      if (app.rtl && noLeft && noRight && title.length > 0)
        titleLeft = -titleLeft;
      title.css({
        left: titleLeft + "px"
      });
    }
  },
  hide: function hide2(el, animate, hideStatusbar, hideOnlyCurrent) {
    if (animate === void 0) {
      animate = true;
    }
    if (hideStatusbar === void 0) {
      hideStatusbar = false;
    }
    if (hideOnlyCurrent === void 0) {
      hideOnlyCurrent = false;
    }
    var app = this;
    var $el = dom7_default(el);
    var isDynamic = $el.hasClass("navbar") && $el.parent(".navbars").length && !hideOnlyCurrent;
    if (isDynamic)
      $el = $el.parents(".navbars");
    if (!$el.length)
      return;
    if ($el.hasClass("navbar-hidden"))
      return;
    var className = "navbar-hidden" + (animate ? " navbar-transitioning" : "");
    var currentIsLarge = isDynamic ? $el.find(".navbar-current .title-large").length : $el.find(".title-large").length;
    if (currentIsLarge) {
      className += " navbar-large-hidden";
    }
    if (hideStatusbar) {
      className += " navbar-hidden-statusbar";
    }
    $el.transitionEnd(function() {
      $el.removeClass("navbar-transitioning");
    });
    $el.addClass(className);
    if (isDynamic) {
      $el.children(".navbar").each(function(subEl) {
        dom7_default(subEl).trigger("navbar:hide");
        app.emit("navbarHide", subEl);
      });
    } else {
      $el.trigger("navbar:hide");
      app.emit("navbarHide", $el[0]);
    }
  },
  show: function show2(el, animate, hideOnlyCurrent) {
    if (el === void 0) {
      el = ".navbar-hidden";
    }
    if (animate === void 0) {
      animate = true;
    }
    if (hideOnlyCurrent === void 0) {
      hideOnlyCurrent = false;
    }
    var app = this;
    var $el = dom7_default(el);
    var isDynamic = $el.hasClass("navbar") && $el.parent(".navbars").length && !hideOnlyCurrent;
    if (isDynamic)
      $el = $el.parents(".navbars");
    if (!$el.length)
      return;
    if (!$el.hasClass("navbar-hidden"))
      return;
    if (animate) {
      $el.addClass("navbar-transitioning");
      $el.transitionEnd(function() {
        $el.removeClass("navbar-transitioning");
      });
    }
    $el.removeClass("navbar-hidden navbar-large-hidden navbar-hidden-statusbar");
    if (isDynamic) {
      $el.children(".navbar").each(function(subEl) {
        dom7_default(subEl).trigger("navbar:show");
        app.emit("navbarShow", subEl);
      });
    } else {
      $el.trigger("navbar:show");
      app.emit("navbarShow", $el[0]);
    }
  },
  getElByPage: function getElByPage(page) {
    var $pageEl;
    var $navbarEl;
    var pageData;
    if (page.$navbarEl || page.$el) {
      pageData = page;
      $pageEl = page.$el;
    } else {
      $pageEl = dom7_default(page);
      if ($pageEl.length > 0)
        pageData = $pageEl[0].f7Page;
    }
    if (pageData && pageData.$navbarEl && pageData.$navbarEl.length > 0) {
      $navbarEl = pageData.$navbarEl;
    } else if ($pageEl) {
      $navbarEl = $pageEl.children(".navbar");
    }
    if (!$navbarEl || $navbarEl && $navbarEl.length === 0)
      return void 0;
    return $navbarEl[0];
  },
  getPageByEl: function getPageByEl(navbarEl) {
    var $navbarEl = dom7_default(navbarEl);
    if ($navbarEl.parents(".page").length) {
      return $navbarEl.parents(".page")[0];
    }
    var pageEl;
    $navbarEl.parents(".view").find(".page").each(function(el) {
      if (el && el.f7Page && el.f7Page.navbarEl && $navbarEl[0] === el.f7Page.navbarEl) {
        pageEl = el;
      }
    });
    return pageEl;
  },
  collapseLargeTitle: function collapseLargeTitle(navbarEl) {
    var app = this;
    var $navbarEl = dom7_default(navbarEl);
    if ($navbarEl.hasClass("navbars")) {
      $navbarEl = $navbarEl.find(".navbar");
      if ($navbarEl.length > 1) {
        $navbarEl = dom7_default(navbarEl).find(".navbar-large.navbar-current");
      }
      if ($navbarEl.length > 1 || !$navbarEl.length) {
        return;
      }
    }
    var $pageEl = dom7_default(app.navbar.getPageByEl($navbarEl));
    $navbarEl.addClass("navbar-large-collapsed");
    $pageEl.eq(0).addClass("page-with-navbar-large-collapsed").trigger("page:navbarlargecollapsed");
    app.emit("pageNavbarLargeCollapsed", $pageEl[0]);
    $navbarEl.trigger("navbar:collapse");
    app.emit("navbarCollapse", $navbarEl[0]);
  },
  expandLargeTitle: function expandLargeTitle(navbarEl) {
    var app = this;
    var $navbarEl = dom7_default(navbarEl);
    if ($navbarEl.hasClass("navbars")) {
      $navbarEl = $navbarEl.find(".navbar-large");
      if ($navbarEl.length > 1) {
        $navbarEl = dom7_default(navbarEl).find(".navbar-large.navbar-current");
      }
      if ($navbarEl.length > 1 || !$navbarEl.length) {
        return;
      }
    }
    var $pageEl = dom7_default(app.navbar.getPageByEl($navbarEl));
    $navbarEl.removeClass("navbar-large-collapsed");
    $pageEl.eq(0).removeClass("page-with-navbar-large-collapsed").trigger("page:navbarlargeexpanded");
    app.emit("pageNavbarLargeExpanded", $pageEl[0]);
    $navbarEl.trigger("navbar:expand");
    app.emit("navbarExpand", $navbarEl[0]);
  },
  toggleLargeTitle: function toggleLargeTitle(navbarEl) {
    var app = this;
    var $navbarEl = dom7_default(navbarEl);
    if ($navbarEl.hasClass("navbars")) {
      $navbarEl = $navbarEl.find(".navbar-large");
      if ($navbarEl.length > 1) {
        $navbarEl = dom7_default(navbarEl).find(".navbar-large.navbar-current");
      }
      if ($navbarEl.length > 1 || !$navbarEl.length) {
        return;
      }
    }
    if ($navbarEl.hasClass("navbar-large-collapsed")) {
      app.navbar.expandLargeTitle($navbarEl);
    } else {
      app.navbar.collapseLargeTitle($navbarEl);
    }
  },
  initNavbarOnScroll: function initNavbarOnScroll(pageEl, navbarEl, needHide, needCollapse, needTransparent) {
    var app = this;
    var support2 = getSupport();
    var $pageEl = dom7_default(pageEl);
    var $navbarEl = dom7_default(navbarEl);
    var $titleLargeEl = $navbarEl.find(".title-large");
    var isLarge = $titleLargeEl.length || $navbarEl.hasClass(".navbar-large");
    var navbarHideHeight = 44;
    var snapPageScrollToLargeTitle = app.params.navbar.snapPageScrollToLargeTitle;
    var snapPageScrollToTransparentNavbar = app.params.navbar.snapPageScrollToTransparentNavbar;
    var previousScrollTop;
    var currentScrollTop;
    var scrollHeight;
    var offsetHeight;
    var reachEnd;
    var action;
    var navbarHidden;
    var navbarCollapsed;
    var navbarTitleLargeHeight;
    var navbarOffsetHeight;
    if (needCollapse || needHide && isLarge) {
      navbarTitleLargeHeight = $navbarEl.css("--f7-navbar-large-title-height");
      if (navbarTitleLargeHeight && navbarTitleLargeHeight.indexOf("px") >= 0) {
        navbarTitleLargeHeight = parseInt(navbarTitleLargeHeight, 10);
        if (Number.isNaN(navbarTitleLargeHeight) && $titleLargeEl.length) {
          navbarTitleLargeHeight = $titleLargeEl[0].offsetHeight;
        } else if (Number.isNaN(navbarTitleLargeHeight)) {
          if (app.theme === "ios")
            navbarTitleLargeHeight = 52;
          else if (app.theme === "md")
            navbarTitleLargeHeight = 48;
          else if (app.theme === "aurora")
            navbarTitleLargeHeight = 38;
        }
      } else if ($titleLargeEl.length) {
        navbarTitleLargeHeight = $titleLargeEl[0].offsetHeight;
      } else {
        if (app.theme === "ios")
          navbarTitleLargeHeight = 52;
        else if (app.theme === "md")
          navbarTitleLargeHeight = 48;
        else if (app.theme === "aurora")
          navbarTitleLargeHeight = 38;
      }
    }
    if (needHide && isLarge) {
      navbarHideHeight += navbarTitleLargeHeight;
    }
    var scrollChanged;
    var scrollContent;
    var scrollTimeoutId;
    var touchEndTimeoutId;
    var touchSnapTimeout = 70;
    var desktopSnapTimeout = 300;
    function calcScrollableDistance() {
      $pageEl.find(".page-content").each(function(pageContentEl) {
        pageContentEl.f7ScrollableDistance = pageContentEl.scrollHeight - pageContentEl.offsetHeight;
      });
    }
    function snapLargeNavbar() {
      var inSearchbarExpanded = $navbarEl.hasClass("with-searchbar-expandable-enabled");
      if (inSearchbarExpanded)
        return;
      if (!scrollContent || currentScrollTop < 0)
        return;
      if (currentScrollTop >= navbarTitleLargeHeight / 2 && currentScrollTop < navbarTitleLargeHeight) {
        dom7_default(scrollContent).scrollTop(navbarTitleLargeHeight, 100);
      } else if (currentScrollTop < navbarTitleLargeHeight) {
        dom7_default(scrollContent).scrollTop(0, 200);
      }
    }
    function snapTransparentNavbar() {
      var inSearchbarExpanded = $navbarEl.hasClass("with-searchbar-expandable-enabled");
      if (inSearchbarExpanded)
        return;
      if (!scrollContent || currentScrollTop < 0)
        return;
      if (currentScrollTop >= navbarOffsetHeight / 2 && currentScrollTop < navbarOffsetHeight) {
        dom7_default(scrollContent).scrollTop(navbarOffsetHeight, 100);
      } else if (currentScrollTop < navbarOffsetHeight) {
        dom7_default(scrollContent).scrollTop(0, 200);
      }
    }
    function handleNavbarTransparent() {
      var isHidden = $navbarEl.hasClass("navbar-hidden") || $navbarEl.parent(".navbars").hasClass("navbar-hidden");
      var inSearchbarExpanded = $navbarEl.hasClass("with-searchbar-expandable-enabled");
      if (inSearchbarExpanded || isHidden)
        return;
      if (!navbarOffsetHeight) {
        navbarOffsetHeight = navbarEl.offsetHeight;
      }
      var opacity = currentScrollTop / navbarOffsetHeight;
      var notTransparent = $navbarEl.hasClass("navbar-transparent-visible");
      opacity = Math.max(Math.min(opacity, 1), 0);
      if (notTransparent && opacity === 1 || !notTransparent && opacity === 0) {
        $navbarEl.find(".navbar-bg, .title").css("opacity", "");
        return;
      }
      if (notTransparent && opacity === 0) {
        $navbarEl.trigger("navbar:transparenthide");
        app.emit("navbarTransparentHide", $navbarEl[0]);
        $navbarEl.removeClass("navbar-transparent-visible");
        $navbarEl.find(".navbar-bg, .title").css("opacity", "");
        return;
      }
      if (!notTransparent && opacity === 1) {
        $navbarEl.trigger("navbar:transparentshow");
        app.emit("navbarTransparentShow", $navbarEl[0]);
        $navbarEl.addClass("navbar-transparent-visible");
        $navbarEl.find(".navbar-bg, .title").css("opacity", "");
        return;
      }
      $navbarEl.find(".navbar-bg, .title").css("opacity", opacity);
      if (snapPageScrollToTransparentNavbar) {
        if (!support2.touch) {
          clearTimeout(scrollTimeoutId);
          scrollTimeoutId = setTimeout(function() {
            snapTransparentNavbar();
          }, desktopSnapTimeout);
        } else if (touchEndTimeoutId) {
          clearTimeout(touchEndTimeoutId);
          touchEndTimeoutId = null;
          touchEndTimeoutId = setTimeout(function() {
            snapTransparentNavbar();
            clearTimeout(touchEndTimeoutId);
            touchEndTimeoutId = null;
          }, touchSnapTimeout);
        }
      }
    }
    var previousCollapseProgress = null;
    var collapseProgress = null;
    function handleLargeNavbarCollapse(pageContentEl) {
      var isHidden = $navbarEl.hasClass("navbar-hidden") || $navbarEl.parent(".navbars").hasClass("navbar-hidden");
      if (isHidden)
        return;
      var isLargeTransparent = $navbarEl.hasClass("navbar-large-transparent") || $navbarEl.hasClass("navbar-large") && $navbarEl.hasClass("navbar-transparent");
      previousCollapseProgress = collapseProgress;
      var scrollableDistance = Math.min(navbarTitleLargeHeight, pageContentEl.f7ScrollableDistance || navbarTitleLargeHeight);
      collapseProgress = Math.min(Math.max(currentScrollTop / scrollableDistance, 0), 1);
      var previousCollapseWasInMiddle = previousCollapseProgress > 0 && previousCollapseProgress < 1;
      var inSearchbarExpanded = $navbarEl.hasClass("with-searchbar-expandable-enabled");
      if (inSearchbarExpanded)
        return;
      navbarCollapsed = $navbarEl.hasClass("navbar-large-collapsed");
      if (collapseProgress === 0 && navbarCollapsed) {
        app.navbar.expandLargeTitle($navbarEl[0]);
      } else if (collapseProgress === 1 && !navbarCollapsed) {
        app.navbar.collapseLargeTitle($navbarEl[0]);
      }
      if (collapseProgress === 0 && navbarCollapsed || collapseProgress === 0 && previousCollapseWasInMiddle || collapseProgress === 1 && !navbarCollapsed || collapseProgress === 1 && previousCollapseWasInMiddle) {
        if (app.theme === "md") {
          $navbarEl.find(".navbar-inner").css("overflow", "");
        }
        $navbarEl.find(".title").css("opacity", "");
        $navbarEl.find(".title-large-text, .subnavbar").css("transform", "");
        if (isLargeTransparent) {
          $navbarEl.find(".navbar-bg").css("opacity", "");
        } else {
          $navbarEl.find(".navbar-bg").css("transform", "");
        }
      } else if (collapseProgress > 0 && collapseProgress < 1) {
        if (app.theme === "md") {
          $navbarEl.find(".navbar-inner").css("overflow", "visible");
        }
        $navbarEl.find(".title").css("opacity", collapseProgress);
        $navbarEl.find(".title-large-text, .subnavbar").css("transform", "translate3d(0px, " + -1 * collapseProgress * navbarTitleLargeHeight + "px, 0)");
        if (isLargeTransparent) {
          $navbarEl.find(".navbar-bg").css("opacity", collapseProgress);
        } else {
          $navbarEl.find(".navbar-bg").css("transform", "translate3d(0px, " + -1 * collapseProgress * navbarTitleLargeHeight + "px, 0)");
        }
      }
      if (snapPageScrollToLargeTitle) {
        if (!support2.touch) {
          clearTimeout(scrollTimeoutId);
          scrollTimeoutId = setTimeout(function() {
            snapLargeNavbar();
          }, desktopSnapTimeout);
        } else if (touchEndTimeoutId) {
          clearTimeout(touchEndTimeoutId);
          touchEndTimeoutId = null;
          touchEndTimeoutId = setTimeout(function() {
            snapLargeNavbar();
            clearTimeout(touchEndTimeoutId);
            touchEndTimeoutId = null;
          }, touchSnapTimeout);
        }
      }
    }
    function handleTitleHideShow() {
      if ($pageEl.hasClass("page-with-card-opened"))
        return;
      scrollHeight = scrollContent.scrollHeight;
      offsetHeight = scrollContent.offsetHeight;
      reachEnd = currentScrollTop + offsetHeight >= scrollHeight;
      navbarHidden = $navbarEl.hasClass("navbar-hidden") || $navbarEl.parent(".navbars").hasClass("navbar-hidden");
      if (reachEnd) {
        if (app.params.navbar.showOnPageScrollEnd) {
          action = "show";
        }
      } else if (previousScrollTop > currentScrollTop) {
        if (app.params.navbar.showOnPageScrollTop || currentScrollTop <= navbarHideHeight) {
          action = "show";
        } else {
          action = "hide";
        }
      } else if (currentScrollTop > navbarHideHeight) {
        action = "hide";
      } else {
        action = "show";
      }
      if (action === "show" && navbarHidden) {
        app.navbar.show($navbarEl, true, true);
        navbarHidden = false;
      } else if (action === "hide" && !navbarHidden) {
        app.navbar.hide($navbarEl, true, false, true);
        navbarHidden = true;
      }
      previousScrollTop = currentScrollTop;
    }
    function handleScroll(e) {
      scrollContent = this;
      if (e && e.target && e.target !== scrollContent) {
        return;
      }
      currentScrollTop = scrollContent.scrollTop;
      scrollChanged = currentScrollTop;
      if (needCollapse) {
        handleLargeNavbarCollapse(scrollContent);
      } else if (needTransparent) {
        handleNavbarTransparent();
      }
      if ($pageEl.hasClass("page-previous"))
        return;
      if (needHide) {
        handleTitleHideShow();
      }
    }
    function handeTouchStart() {
      scrollChanged = false;
    }
    function handleTouchEnd() {
      clearTimeout(touchEndTimeoutId);
      touchEndTimeoutId = null;
      touchEndTimeoutId = setTimeout(function() {
        if (scrollChanged !== false) {
          if (needTransparent && !needCollapse) {
            snapTransparentNavbar();
          } else {
            snapLargeNavbar();
          }
          clearTimeout(touchEndTimeoutId);
          touchEndTimeoutId = null;
        }
      }, touchSnapTimeout);
    }
    $pageEl.on("scroll", ".page-content", handleScroll, true);
    if (support2.touch && (needCollapse && snapPageScrollToLargeTitle || needTransparent && snapPageScrollToTransparentNavbar)) {
      app.on("touchstart:passive", handeTouchStart);
      app.on("touchend:passive", handleTouchEnd);
    }
    calcScrollableDistance();
    if (needCollapse || needTransparent) {
      $pageEl.find(".page-content").each(function(pageContentEl) {
        if (pageContentEl.scrollTop > 0)
          handleScroll.call(pageContentEl);
      });
    }
    app.on("resize", calcScrollableDistance);
    $pageEl[0].f7DetachNavbarScrollHandlers = function f7DetachNavbarScrollHandlers() {
      app.off("resize", calcScrollableDistance);
      delete $pageEl[0].f7DetachNavbarScrollHandlers;
      $pageEl.off("scroll", ".page-content", handleScroll, true);
      if (support2.touch && (needCollapse && snapPageScrollToLargeTitle || needTransparent && snapPageScrollToTransparentNavbar)) {
        app.off("touchstart:passive", handeTouchStart);
        app.off("touchend:passive", handleTouchEnd);
      }
    };
  }
};
var navbar_default = {
  name: "navbar",
  create: function create7() {
    var app = this;
    bindMethods(app, {
      navbar: Navbar
    });
  },
  params: {
    navbar: {
      scrollTopOnTitleClick: true,
      iosCenterTitle: true,
      mdCenterTitle: false,
      auroraCenterTitle: true,
      hideOnPageScroll: false,
      showOnPageScrollEnd: true,
      showOnPageScrollTop: true,
      collapseLargeTitleOnScroll: true,
      snapPageScrollToLargeTitle: true,
      snapPageScrollToTransparentNavbar: true
    }
  },
  on: {
    "panelBreakpoint panelCollapsedBreakpoint panelResize viewResize resize viewMasterDetailBreakpoint": function onPanelResize() {
      var app = this;
      dom7_default(".navbar").each(function(navbarEl) {
        app.navbar.size(navbarEl);
      });
    },
    pageBeforeRemove: function pageBeforeRemove(page) {
      if (page.$el[0].f7DetachNavbarScrollHandlers) {
        page.$el[0].f7DetachNavbarScrollHandlers();
      }
    },
    pageBeforeIn: function pageBeforeIn(page) {
      var app = this;
      if (app.theme !== "ios")
        return;
      var $navbarsEl;
      var view = page.$el.parents(".view")[0].f7View;
      var navbarEl = app.navbar.getElByPage(page);
      if (!navbarEl) {
        $navbarsEl = page.$el.parents(".view").children(".navbars");
      } else {
        $navbarsEl = dom7_default(navbarEl).parents(".navbars");
      }
      if (page.$el.hasClass("no-navbar") || view.router.dynamicNavbar && !navbarEl) {
        var animate = !!(page.pageFrom && page.router.history.length > 0);
        app.navbar.hide($navbarsEl, animate);
      } else {
        app.navbar.show($navbarsEl);
      }
    },
    pageReinit: function pageReinit(page) {
      var app = this;
      var $navbarEl = dom7_default(app.navbar.getElByPage(page));
      if (!$navbarEl || $navbarEl.length === 0)
        return;
      app.navbar.size($navbarEl);
    },
    pageInit: function pageInit(page) {
      var app = this;
      var $navbarEl = dom7_default(app.navbar.getElByPage(page));
      if (!$navbarEl || $navbarEl.length === 0)
        return;
      app.navbar.size($navbarEl);
      var needCollapseOnScrollHandler;
      if ($navbarEl.find(".title-large").length > 0) {
        $navbarEl.addClass("navbar-large");
      }
      if ($navbarEl.hasClass("navbar-large")) {
        if (app.params.navbar.collapseLargeTitleOnScroll)
          needCollapseOnScrollHandler = true;
        page.$el.addClass("page-with-navbar-large");
      }
      var needTransparentOnScroll;
      if (!needCollapseOnScrollHandler && $navbarEl.hasClass("navbar-transparent")) {
        needTransparentOnScroll = true;
      }
      var needHideOnScrollHandler;
      if (app.params.navbar.hideOnPageScroll || page.$el.find(".hide-navbar-on-scroll").length || page.$el.hasClass("hide-navbar-on-scroll") || page.$el.find(".hide-bars-on-scroll").length || page.$el.hasClass("hide-bars-on-scroll")) {
        if (page.$el.find(".keep-navbar-on-scroll").length || page.$el.hasClass("keep-navbar-on-scroll") || page.$el.find(".keep-bars-on-scroll").length || page.$el.hasClass("keep-bars-on-scroll")) {
          needHideOnScrollHandler = false;
        } else {
          needHideOnScrollHandler = true;
        }
      }
      if (needCollapseOnScrollHandler || needHideOnScrollHandler || needTransparentOnScroll) {
        app.navbar.initNavbarOnScroll(page.el, $navbarEl[0], needHideOnScrollHandler, needCollapseOnScrollHandler, needTransparentOnScroll);
      }
    },
    "panelOpen panelSwipeOpen modalOpen": function onPanelModalOpen(instance) {
      var app = this;
      instance.$el.find(".navbar:not(.navbar-previous):not(.stacked)").each(function(navbarEl) {
        app.navbar.size(navbarEl);
      });
    },
    tabShow: function tabShow(tabEl) {
      var app = this;
      dom7_default(tabEl).find(".navbar:not(.navbar-previous):not(.stacked)").each(function(navbarEl) {
        app.navbar.size(navbarEl);
      });
    }
  },
  clicks: {
    ".navbar .title": function onTitleClick($clickedEl, clickedData, e) {
      var app = this;
      if (!app.params.navbar.scrollTopOnTitleClick)
        return;
      if (dom7_default(e.target).closest("a, button").length > 0) {
        return;
      }
      var $pageContentEl;
      var $navbarEl = $clickedEl.parents(".navbar");
      var $navbarsEl = $navbarEl.parents(".navbars");
      $pageContentEl = $navbarEl.parents(".page-content");
      if ($pageContentEl.length === 0) {
        if ($navbarEl.parents(".page").length > 0) {
          $pageContentEl = $navbarEl.parents(".page").find(".page-content");
        }
        if ($pageContentEl.length === 0 && $navbarsEl.length) {
          if ($navbarsEl.nextAll(".page-current:not(.stacked)").length > 0) {
            $pageContentEl = $navbarsEl.nextAll(".page-current:not(.stacked)").find(".page-content");
          }
        }
        if ($pageContentEl.length === 0) {
          if ($navbarEl.nextAll(".page-current:not(.stacked)").length > 0) {
            $pageContentEl = $navbarEl.nextAll(".page-current:not(.stacked)").find(".page-content");
          }
        }
      }
      if ($pageContentEl && $pageContentEl.length > 0) {
        if ($pageContentEl.hasClass("tab")) {
          $pageContentEl = $pageContentEl.parent(".tabs").children(".page-content.tab-active");
        }
        if ($pageContentEl.length > 0)
          $pageContentEl.scrollTop(0, 300);
      }
    }
  },
  vnode: {
    navbar: {
      postpatch: function postpatch(vnode) {
        var app = this;
        app.navbar.size(vnode.elm);
      }
    }
  }
};

// node_modules/framework7/esm/components/toolbar/toolbar.js
var Toolbar = {
  setHighlight: function setHighlight(tabbarEl) {
    var app = this;
    if (app.theme === "ios")
      return;
    var $tabbarEl = dom7_default(tabbarEl);
    if ($tabbarEl.length === 0 || !($tabbarEl.hasClass("tabbar") || $tabbarEl.hasClass("tabbar-labels")))
      return;
    var $highlightEl = $tabbarEl.find(".tab-link-highlight");
    var tabLinksCount = $tabbarEl.find(".tab-link").length;
    if (tabLinksCount === 0) {
      $highlightEl.remove();
      return;
    }
    if ($highlightEl.length === 0) {
      $tabbarEl.children(".toolbar-inner").append('<span class="tab-link-highlight"></span>');
      $highlightEl = $tabbarEl.find(".tab-link-highlight");
    } else if ($highlightEl.next().length) {
      $tabbarEl.children(".toolbar-inner").append($highlightEl);
    }
    var $activeLink = $tabbarEl.find(".tab-link-active");
    var highlightWidth;
    var highlightTranslate;
    if ($tabbarEl.hasClass("tabbar-scrollable") && $activeLink && $activeLink[0]) {
      highlightWidth = $activeLink[0].offsetWidth + "px";
      highlightTranslate = $activeLink[0].offsetLeft + "px";
    } else {
      var activeIndex = $activeLink.index();
      highlightWidth = 100 / tabLinksCount + "%";
      highlightTranslate = (app.rtl ? -activeIndex : activeIndex) * 100 + "%";
    }
    nextFrame(function() {
      $highlightEl.css("width", highlightWidth).transform("translate3d(" + highlightTranslate + ",0,0)");
    });
  },
  init: function init10(tabbarEl) {
    var app = this;
    app.toolbar.setHighlight(tabbarEl);
  },
  hide: function hide3(el, animate) {
    if (animate === void 0) {
      animate = true;
    }
    var app = this;
    var $el = dom7_default(el);
    if ($el.hasClass("toolbar-hidden"))
      return;
    var className = "toolbar-hidden" + (animate ? " toolbar-transitioning" : "");
    $el.transitionEnd(function() {
      $el.removeClass("toolbar-transitioning");
    });
    $el.addClass(className);
    $el.trigger("toolbar:hide");
    app.emit("toolbarHide", $el[0]);
  },
  show: function show3(el, animate) {
    if (animate === void 0) {
      animate = true;
    }
    var app = this;
    var $el = dom7_default(el);
    if (!$el.hasClass("toolbar-hidden"))
      return;
    if (animate) {
      $el.addClass("toolbar-transitioning");
      $el.transitionEnd(function() {
        $el.removeClass("toolbar-transitioning");
      });
    }
    $el.removeClass("toolbar-hidden");
    $el.trigger("toolbar:show");
    app.emit("toolbarShow", $el[0]);
  },
  initToolbarOnScroll: function initToolbarOnScroll(pageEl) {
    var app = this;
    var $pageEl = dom7_default(pageEl);
    var $toolbarEl = $pageEl.parents(".view").children(".toolbar");
    if ($toolbarEl.length === 0) {
      $toolbarEl = $pageEl.find(".toolbar");
    }
    if ($toolbarEl.length === 0) {
      $toolbarEl = $pageEl.parents(".views").children(".tabbar, .tabbar-labels");
    }
    if ($toolbarEl.length === 0) {
      return;
    }
    var previousScrollTop;
    var currentScrollTop;
    var scrollHeight;
    var offsetHeight;
    var reachEnd;
    var action;
    var toolbarHidden;
    function handleScroll(e) {
      if ($pageEl.hasClass("page-with-card-opened"))
        return;
      if ($pageEl.hasClass("page-previous"))
        return;
      var scrollContent = this;
      if (e && e.target && e.target !== scrollContent) {
        return;
      }
      currentScrollTop = scrollContent.scrollTop;
      scrollHeight = scrollContent.scrollHeight;
      offsetHeight = scrollContent.offsetHeight;
      reachEnd = currentScrollTop + offsetHeight >= scrollHeight;
      toolbarHidden = $toolbarEl.hasClass("toolbar-hidden");
      if (reachEnd) {
        if (app.params.toolbar.showOnPageScrollEnd) {
          action = "show";
        }
      } else if (previousScrollTop > currentScrollTop) {
        if (app.params.toolbar.showOnPageScrollTop || currentScrollTop <= 44) {
          action = "show";
        } else {
          action = "hide";
        }
      } else if (currentScrollTop > 44) {
        action = "hide";
      } else {
        action = "show";
      }
      if (action === "show" && toolbarHidden) {
        app.toolbar.show($toolbarEl);
        toolbarHidden = false;
      } else if (action === "hide" && !toolbarHidden) {
        app.toolbar.hide($toolbarEl);
        toolbarHidden = true;
      }
      previousScrollTop = currentScrollTop;
    }
    $pageEl.on("scroll", ".page-content", handleScroll, true);
    $pageEl[0].f7ScrollToolbarHandler = handleScroll;
  }
};
var toolbar_default = {
  name: "toolbar",
  create: function create8() {
    var app = this;
    bindMethods(app, {
      toolbar: Toolbar
    });
  },
  params: {
    toolbar: {
      hideOnPageScroll: false,
      showOnPageScrollEnd: true,
      showOnPageScrollTop: true
    }
  },
  on: {
    pageBeforeRemove: function pageBeforeRemove2(page) {
      if (page.$el[0].f7ScrollToolbarHandler) {
        page.$el.off("scroll", ".page-content", page.$el[0].f7ScrollToolbarHandler, true);
      }
    },
    pageBeforeIn: function pageBeforeIn2(page) {
      var app = this;
      var $toolbarEl = page.$el.parents(".view").children(".toolbar");
      if ($toolbarEl.length === 0) {
        $toolbarEl = page.$el.parents(".views").children(".tabbar, .tabbar-labels");
      }
      if ($toolbarEl.length === 0) {
        $toolbarEl = page.$el.find(".toolbar");
      }
      if ($toolbarEl.length === 0) {
        return;
      }
      if (page.$el.hasClass("no-toolbar")) {
        app.toolbar.hide($toolbarEl);
      } else {
        app.toolbar.show($toolbarEl);
      }
    },
    pageInit: function pageInit2(page) {
      var app = this;
      page.$el.find(".tabbar, .tabbar-labels").each(function(tabbarEl) {
        app.toolbar.init(tabbarEl);
      });
      if (app.params.toolbar.hideOnPageScroll || page.$el.find(".hide-toolbar-on-scroll").length || page.$el.hasClass("hide-toolbar-on-scroll") || page.$el.find(".hide-bars-on-scroll").length || page.$el.hasClass("hide-bars-on-scroll")) {
        if (page.$el.find(".keep-toolbar-on-scroll").length || page.$el.hasClass("keep-toolbar-on-scroll") || page.$el.find(".keep-bars-on-scroll").length || page.$el.hasClass("keep-bars-on-scroll")) {
          return;
        }
        app.toolbar.initToolbarOnScroll(page.el);
      }
    },
    init: function init11() {
      var app = this;
      app.$el.find(".tabbar, .tabbar-labels").each(function(tabbarEl) {
        app.toolbar.init(tabbarEl);
      });
    }
  },
  vnode: {
    tabbar: {
      insert: function insert2(vnode) {
        var app = this;
        app.toolbar.init(vnode.elm);
      }
    }
  }
};

// node_modules/framework7/esm/components/subnavbar/subnavbar.js
var subnavbar_default = {
  name: "subnavbar",
  on: {
    pageInit: function pageInit3(page) {
      if (page.$navbarEl && page.$navbarEl.length && page.$navbarEl.find(".subnavbar").length) {
        page.$el.addClass("page-with-subnavbar");
      }
      var $innerSubnavbars = page.$el.find(".subnavbar").filter(function(subnavbarEl) {
        return dom7_default(subnavbarEl).parents(".page")[0] === page.$el[0];
      });
      if ($innerSubnavbars.length) {
        page.$el.addClass("page-with-subnavbar");
      }
    }
  }
};

// node_modules/framework7/esm/components/touch-ripple/touch-ripple-class.js
var TouchRipple = function() {
  function TouchRipple2(app, $el, x, y) {
    var ripple = this;
    if (!$el)
      return void 0;
    var _$el$0$getBoundingCli = $el[0].getBoundingClientRect(), left = _$el$0$getBoundingCli.left, top = _$el$0$getBoundingCli.top, width = _$el$0$getBoundingCli.width, height = _$el$0$getBoundingCli.height;
    var center = {
      x: x - left,
      y: y - top
    };
    var diameter = Math.max(Math.pow(Math.pow(height, 2) + Math.pow(width, 2), 0.5), 48);
    var isInset = false;
    var insetElements = app.params.touch.touchRippleInsetElements || "";
    if (insetElements && $el.is(insetElements)) {
      isInset = true;
    }
    if (isInset) {
      diameter = Math.max(Math.min(width, height), 48);
    }
    if (!isInset && $el.css("overflow") === "hidden") {
      var distanceFromCenter = Math.pow(Math.pow(center.x - width / 2, 2) + Math.pow(center.y - height / 2, 2), 0.5);
      var scale = (diameter / 2 + distanceFromCenter) / (diameter / 2);
      ripple.rippleTransform = "translate3d(0px, 0px, 0) scale(" + scale + ")";
    } else {
      ripple.rippleTransform = "translate3d(" + (-center.x + width / 2) + "px, " + (-center.y + height / 2) + "px, 0) scale(1)";
    }
    if (isInset) {
      $el.addClass("ripple-inset");
    }
    ripple.$rippleWaveEl = dom7_default('<div class="ripple-wave" style="width: ' + diameter + "px; height: " + diameter + "px; margin-top:-" + diameter / 2 + "px; margin-left:-" + diameter / 2 + "px; left:" + center.x + "px; top:" + center.y + "px; --f7-ripple-transform: " + ripple.rippleTransform + '"></div>');
    $el.prepend(ripple.$rippleWaveEl);
    ripple.$rippleWaveEl.animationEnd(function() {
      if (!ripple.$rippleWaveEl)
        return;
      if (ripple.$rippleWaveEl.hasClass("ripple-wave-out"))
        return;
      ripple.$rippleWaveEl.addClass("ripple-wave-in");
      if (ripple.shouldBeRemoved) {
        ripple.out();
      }
    });
    return ripple;
  }
  var _proto = TouchRipple2.prototype;
  _proto.destroy = function destroy2() {
    var ripple = this;
    if (ripple.$rippleWaveEl) {
      ripple.$rippleWaveEl.remove();
    }
    Object.keys(ripple).forEach(function(key) {
      ripple[key] = null;
      delete ripple[key];
    });
    ripple = null;
  };
  _proto.out = function out() {
    var ripple = this;
    var $rippleWaveEl = this.$rippleWaveEl;
    clearTimeout(ripple.removeTimeout);
    $rippleWaveEl.addClass("ripple-wave-out");
    ripple.removeTimeout = setTimeout(function() {
      ripple.destroy();
    }, 300);
    $rippleWaveEl.animationEnd(function() {
      clearTimeout(ripple.removeTimeout);
      ripple.destroy();
    });
  };
  _proto.remove = function remove() {
    var ripple = this;
    if (ripple.shouldBeRemoved)
      return;
    ripple.removeTimeout = setTimeout(function() {
      ripple.destroy();
    }, 400);
    ripple.shouldBeRemoved = true;
    if (ripple.$rippleWaveEl.hasClass("ripple-wave-in")) {
      ripple.out();
    }
  };
  return TouchRipple2;
}();

// node_modules/framework7/esm/components/touch-ripple/touch-ripple.js
function _construct3(Parent, args, Class) {
  if (_isNativeReflectConstruct3()) {
    _construct3 = Reflect.construct;
  } else {
    _construct3 = function _construct4(Parent2, args2, Class2) {
      var a = [null];
      a.push.apply(a, args2);
      var Constructor = Function.bind.apply(Parent2, a);
      var instance = new Constructor();
      if (Class2)
        _setPrototypeOf7(instance, Class2.prototype);
      return instance;
    };
  }
  return _construct3.apply(null, arguments);
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
function _setPrototypeOf7(o, p) {
  _setPrototypeOf7 = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf7(o, p);
}
var touch_ripple_default = {
  name: "touch-ripple",
  static: {
    TouchRipple
  },
  create: function create9() {
    var app = this;
    app.touchRipple = {
      create: function create11() {
        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _construct3(TouchRipple, args);
      }
    };
  }
};

// node_modules/framework7/esm/components/modal/modal-class.js
function _assertThisInitialized6(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose6(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf8(subClass, superClass);
}
function _setPrototypeOf8(o, p) {
  _setPrototypeOf8 = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf8(o, p);
}
var openedModals = [];
var dialogsQueue = [];
function clearDialogsQueue() {
  if (dialogsQueue.length === 0)
    return;
  var dialog = dialogsQueue.shift();
  dialog.open();
}
var Modal = function(_Framework7Class) {
  _inheritsLoose6(Modal2, _Framework7Class);
  function Modal2(app, params) {
    var _this;
    _this = _Framework7Class.call(this, params, [app]) || this;
    var modal = _assertThisInitialized6(_this);
    var defaults = {};
    modal.useModulesParams(defaults);
    modal.params = extend(defaults, params);
    modal.opened = false;
    var $containerEl = modal.params.containerEl ? dom7_default(modal.params.containerEl).eq(0) : app.$el;
    if (!$containerEl.length)
      $containerEl = app.$el;
    modal.$containerEl = $containerEl;
    modal.containerEl = $containerEl[0];
    modal.useModules();
    return _assertThisInitialized6(_this) || _assertThisInitialized6(_this);
  }
  var _proto = Modal2.prototype;
  _proto.onOpen = function onOpen2() {
    var modal = this;
    modal.opened = true;
    openedModals.push(modal);
    dom7_default("html").addClass("with-modal-" + modal.type.toLowerCase());
    modal.$el.trigger("modal:open " + modal.type.toLowerCase() + ":open");
    modal.emit("local::open modalOpen " + modal.type + "Open", modal);
  };
  _proto.onOpened = function onOpened() {
    var modal = this;
    modal.$el.trigger("modal:opened " + modal.type.toLowerCase() + ":opened");
    modal.emit("local::opened modalOpened " + modal.type + "Opened", modal);
  };
  _proto.onClose = function onClose2() {
    var modal = this;
    modal.opened = false;
    if (!modal.type || !modal.$el)
      return;
    openedModals.splice(openedModals.indexOf(modal), 1);
    dom7_default("html").removeClass("with-modal-" + modal.type.toLowerCase());
    modal.$el.trigger("modal:close " + modal.type.toLowerCase() + ":close");
    modal.emit("local::close modalClose " + modal.type + "Close", modal);
  };
  _proto.onClosed = function onClosed() {
    var modal = this;
    if (!modal.type || !modal.$el)
      return;
    modal.$el.removeClass("modal-out");
    modal.$el.hide();
    modal.$el.trigger("modal:closed " + modal.type.toLowerCase() + ":closed");
    modal.emit("local::closed modalClosed " + modal.type + "Closed", modal);
  };
  _proto.open = function open(animateModal) {
    var modal = this;
    var document = getDocument();
    var app = modal.app;
    var $el = modal.$el;
    var $backdropEl = modal.$backdropEl;
    var type = modal.type;
    var animate = true;
    if (typeof animateModal !== "undefined")
      animate = animateModal;
    else if (typeof modal.params.animate !== "undefined") {
      animate = modal.params.animate;
    }
    if (!$el || $el.hasClass("modal-in")) {
      if (animateModal === false && $el[0] && type !== "dialog") {
        $el[0].style.display = "block";
      }
      return modal;
    }
    if (type === "dialog" && app.params.modal.queueDialogs) {
      var pushToQueue;
      if (dom7_default(".dialog.modal-in").length > 0) {
        pushToQueue = true;
      } else if (openedModals.length > 0) {
        openedModals.forEach(function(openedModal) {
          if (openedModal.type === "dialog")
            pushToQueue = true;
        });
      }
      if (pushToQueue) {
        dialogsQueue.push(modal);
        return modal;
      }
    }
    var $modalParentEl = $el.parent();
    var wasInDom = $el.parents(document).length > 0;
    if (!$modalParentEl.is(modal.$containerEl)) {
      modal.$containerEl.append($el);
      modal.once(type + "Closed", function() {
        if (wasInDom) {
          $modalParentEl.append($el);
        } else {
          $el.remove();
        }
      });
    }
    $el.show();
    modal._clientLeft = $el[0].clientLeft;
    function transitionEnd() {
      if ($el.hasClass("modal-out")) {
        modal.onClosed();
      } else if ($el.hasClass("modal-in")) {
        modal.onOpened();
      }
    }
    if (animate) {
      if ($backdropEl) {
        $backdropEl.removeClass("not-animated");
        $backdropEl.addClass("backdrop-in");
      }
      $el.animationEnd(function() {
        transitionEnd();
      });
      $el.transitionEnd(function() {
        transitionEnd();
      });
      $el.removeClass("modal-out not-animated").addClass("modal-in");
      modal.onOpen();
    } else {
      if ($backdropEl) {
        $backdropEl.addClass("backdrop-in not-animated");
      }
      $el.removeClass("modal-out").addClass("modal-in not-animated");
      modal.onOpen();
      modal.onOpened();
    }
    return modal;
  };
  _proto.close = function close(animateModal) {
    var modal = this;
    var $el = modal.$el;
    var $backdropEl = modal.$backdropEl;
    var animate = true;
    if (typeof animateModal !== "undefined")
      animate = animateModal;
    else if (typeof modal.params.animate !== "undefined") {
      animate = modal.params.animate;
    }
    if (!$el || !$el.hasClass("modal-in")) {
      if (dialogsQueue.indexOf(modal) >= 0) {
        dialogsQueue.splice(dialogsQueue.indexOf(modal), 1);
      }
      return modal;
    }
    if ($backdropEl) {
      var needToHideBackdrop = true;
      if (modal.type === "popup") {
        modal.$el.prevAll(".popup.modal-in").add(modal.$el.nextAll(".popup.modal-in")).each(function(popupEl) {
          var popupInstance = popupEl.f7Modal;
          if (!popupInstance)
            return;
          if (popupInstance.params.closeByBackdropClick && popupInstance.params.backdrop && popupInstance.backdropEl === modal.backdropEl) {
            needToHideBackdrop = false;
          }
        });
      }
      if (needToHideBackdrop) {
        $backdropEl[animate ? "removeClass" : "addClass"]("not-animated");
        $backdropEl.removeClass("backdrop-in");
      }
    }
    $el[animate ? "removeClass" : "addClass"]("not-animated");
    function transitionEnd() {
      if ($el.hasClass("modal-out")) {
        modal.onClosed();
      } else if ($el.hasClass("modal-in")) {
        modal.onOpened();
      }
    }
    if (animate) {
      $el.animationEnd(function() {
        transitionEnd();
      });
      $el.transitionEnd(function() {
        transitionEnd();
      });
      $el.removeClass("modal-in").addClass("modal-out");
      modal.onClose();
    } else {
      $el.addClass("not-animated").removeClass("modal-in").addClass("modal-out");
      modal.onClose();
      modal.onClosed();
    }
    if (modal.type === "dialog") {
      clearDialogsQueue();
    }
    return modal;
  };
  _proto.destroy = function destroy2() {
    var modal = this;
    if (modal.destroyed)
      return;
    modal.emit("local::beforeDestroy modalBeforeDestroy " + modal.type + "BeforeDestroy", modal);
    if (modal.$el) {
      modal.$el.trigger("modal:beforedestroy " + modal.type.toLowerCase() + ":beforedestroy");
      if (modal.$el.length && modal.$el[0].f7Modal) {
        delete modal.$el[0].f7Modal;
      }
    }
    deleteProps(modal);
    modal.destroyed = true;
  };
  return Modal2;
}(class_default);
var modal_class_default = Modal;

// node_modules/framework7/esm/components/modal/custom-modal-class.js
function _assertThisInitialized7(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
function _inheritsLoose7(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  _setPrototypeOf9(subClass, superClass);
}
function _setPrototypeOf9(o, p) {
  _setPrototypeOf9 = Object.setPrototypeOf || function _setPrototypeOf10(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf9(o, p);
}
var CustomModal = function(_Modal) {
  _inheritsLoose7(CustomModal2, _Modal);
  function CustomModal2(app, params) {
    var _this;
    var extendedParams = extend({
      backdrop: true,
      closeByBackdropClick: true,
      on: {}
    }, params);
    _this = _Modal.call(this, app, extendedParams) || this;
    var customModal = _assertThisInitialized7(_this);
    customModal.params = extendedParams;
    var $el;
    if (!customModal.params.el) {
      $el = dom7_default(customModal.params.content);
    } else {
      $el = dom7_default(customModal.params.el);
    }
    if ($el && $el.length > 0 && $el[0].f7Modal) {
      return $el[0].f7Modal || _assertThisInitialized7(_this);
    }
    if ($el.length === 0) {
      return customModal.destroy() || _assertThisInitialized7(_this);
    }
    var $backdropEl;
    if (customModal.params.backdrop) {
      $backdropEl = app.$el.children(".custom-modal-backdrop");
      if ($backdropEl.length === 0) {
        $backdropEl = dom7_default('<div class="custom-modal-backdrop"></div>');
        app.$el.append($backdropEl);
      }
    }
    function handleClick(e) {
      if (!customModal || customModal.destroyed)
        return;
      if ($backdropEl && e.target === $backdropEl[0]) {
        customModal.close();
      }
    }
    customModal.on("customModalOpened", function() {
      if (customModal.params.closeByBackdropClick && customModal.params.backdrop) {
        app.on("click", handleClick);
      }
    });
    customModal.on("customModalClose", function() {
      if (customModal.params.closeByBackdropClick && customModal.params.backdrop) {
        app.off("click", handleClick);
      }
    });
    extend(customModal, {
      app,
      $el,
      el: $el[0],
      $backdropEl,
      backdropEl: $backdropEl && $backdropEl[0],
      type: "customModal"
    });
    $el[0].f7Modal = customModal;
    return customModal || _assertThisInitialized7(_this);
  }
  return CustomModal2;
}(modal_class_default);
var custom_modal_class_default = CustomModal;

// node_modules/framework7/esm/components/modal/modal.js
var modal_default = {
  name: "modal",
  static: {
    Modal: modal_class_default,
    CustomModal: custom_modal_class_default
  },
  create: function create10() {
    var app = this;
    app.customModal = {
      create: function create11(params) {
        return new custom_modal_class_default(app, params);
      }
    };
  },
  params: {
    modal: {
      queueDialogs: true
    }
  }
};

export {
  dom7_default,
  id,
  mdPreloaderContent,
  iosPreloaderContent,
  auroraPreloaderContent,
  deleteProps,
  requestAnimationFrame,
  nextTick,
  nextFrame,
  now,
  getTranslate,
  serializeObject,
  extend,
  colorHexToRgb,
  colorRgbToHex,
  colorRgbToHsl,
  colorHslToRgb,
  colorHsbToHsl,
  colorHslToHsb,
  bindMethods,
  utils_exports,
  getSupport,
  getDevice,
  class_default,
  ConstructorMethods,
  ModalMethods,
  app_class_default,
  request_default,
  device_default,
  support_default,
  utils_default,
  resize_default,
  request_default2,
  touch_default,
  router_default,
  clicks_default,
  history_default2 as history_default,
  service_worker_default,
  create_store_default,
  store_default,
  statusbar_default,
  view_default,
  navbar_default,
  toolbar_default,
  subnavbar_default,
  touch_ripple_default,
  modal_class_default,
  modal_default
};
//# sourceMappingURL=chunk-DWA4DAY4.js.map
